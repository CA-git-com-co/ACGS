# ACGS-1 Production-Ready Multi-Stage Dockerfile
# Supports all 7 core services with Solana/Anchor integration
# Optimized for cloud-native deployment while maintaining host compatibility

# =============================================================================
# Stage 1: Base System Dependencies
# =============================================================================
FROM ubuntu:22.04 as acgs-base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    pkg-config \
    libudev-dev \
    libssl-dev \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# Stage 2: Solana and Anchor Installation
# =============================================================================
FROM acgs-base as solana-stage

# Install Solana CLI v1.18.22
RUN sh -c "$(curl -sSfL https://release.solana.com/v1.18.22/install)" && \
    echo 'export PATH="/root/.local/share/solana/install/active_release/bin:$PATH"' >> ~/.bashrc

# Set Solana PATH for this stage
ENV PATH="/root/.local/share/solana/install/active_release/bin:$PATH"

# Install Node.js 18.x LTS for Anchor CLI
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

# Install Anchor CLI v0.29.0
RUN npm install -g @coral-xyz/anchor-cli@0.29.0

# Verify installations
RUN solana --version && anchor --version && node --version && npm --version

# =============================================================================
# Stage 3: Python Environment Setup
# =============================================================================
FROM solana-stage as python-stage

# Install Python 3.11 and pip
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip \
    python3-setuptools \
    && rm -rf /var/lib/apt/lists/*

# Create symlinks for python3.11
RUN ln -sf /usr/bin/python3.11 /usr/bin/python3 && \
    ln -sf /usr/bin/python3.11 /usr/bin/python

# Upgrade pip
RUN python3 -m pip install --upgrade pip setuptools wheel

# =============================================================================
# Stage 4: Service Dependencies Installation
# =============================================================================
FROM python-stage as dependencies-stage

# Set working directory
WORKDIR /app

# Copy requirements files for all services
COPY services/platform/authentication/auth_service/requirements.txt /app/requirements-auth.txt
COPY services/core/constitutional-ai/ac_service/requirements.txt /app/requirements-ac.txt
COPY services/platform/integrity/integrity_service/requirements.txt /app/requirements-integrity.txt
COPY services/core/formal-verification/fv_service/requirements.txt /app/requirements-fv.txt
COPY services/core/governance-synthesis/gs_service/requirements.txt /app/requirements-gs.txt
COPY services/core/policy-governance/pgc_service/requirements.txt /app/requirements-pgc.txt
COPY services/core/evolutionary-computation/requirements.txt /app/requirements-ec.txt
COPY services/shared/requirements.txt /app/requirements-shared.txt

# Install Python dependencies for all services
RUN pip install --no-cache-dir -r /app/requirements-auth.txt && \
    pip install --no-cache-dir -r /app/requirements-ac.txt && \
    pip install --no-cache-dir -r /app/requirements-integrity.txt && \
    pip install --no-cache-dir -r /app/requirements-fv.txt && \
    pip install --no-cache-dir -r /app/requirements-gs.txt && \
    pip install --no-cache-dir -r /app/requirements-pgc.txt && \
    pip install --no-cache-dir -r /app/requirements-ec.txt && \
    pip install --no-cache-dir -r /app/requirements-shared.txt

# Install additional production dependencies
RUN pip install --no-cache-dir \
    gunicorn \
    uvicorn[standard] \
    prometheus-client \
    structlog \
    tenacity \
    httpx \
    aioredis \
    asyncpg \
    psycopg2-binary

# =============================================================================
# Stage 5: Application Code and Configuration
# =============================================================================
FROM dependencies-stage as application-stage

# Copy shared modules first
COPY services/shared /app/shared

# Copy all service code
COPY services/platform/authentication /app/services/platform/authentication
COPY services/core/constitutional-ai /app/services/core/constitutional-ai
COPY services/platform/integrity /app/services/platform/integrity
COPY services/core/formal-verification /app/services/core/formal-verification
COPY services/core/governance-synthesis /app/services/core/governance-synthesis
COPY services/core/policy-governance /app/services/core/policy-governance
COPY services/core/evolutionary-computation /app/services/core/evolutionary-computation

# Copy blockchain programs and configuration
COPY blockchain /app/blockchain

# Copy scripts and configuration
COPY scripts /app/scripts
COPY alembic.ini /app/alembic.ini

# Set Python path to include shared modules
ENV PYTHONPATH="/app:/app/shared"

# =============================================================================
# Stage 6: Production Runtime
# =============================================================================
FROM application-stage as production-runtime

# Create non-root user for security
RUN groupadd -r acgs && useradd -r -g acgs -d /app -s /bin/bash acgs

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/pids /app/data && \
    chown -R acgs:acgs /app

# Set up environment variables
ENV PYTHONPATH="/app:/app/shared"
ENV PATH="/root/.local/share/solana/install/active_release/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Expose all service ports
EXPOSE 8000 8001 8002 8003 8004 8005 8006

# Health check script
COPY scripts/docker/health_check.sh /app/health_check.sh
RUN chmod +x /app/health_check.sh

# Default health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/health_check.sh

# Switch to non-root user
USER acgs

# Default command (can be overridden in docker-compose)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

# =============================================================================
# Stage 7: Development Environment
# =============================================================================
FROM production-runtime as development

# Switch back to root for development tools installation
USER root

# Install development tools
RUN apt-get update && apt-get install -y \
    vim \
    nano \
    htop \
    curl \
    jq \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    flake8 \
    mypy \
    ipython \
    jupyter

# Copy development configuration
COPY .env.development /app/.env

# Switch back to acgs user
USER acgs

# Development command with hot reload
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
