<!-- Constitutional Hash: cdd01ef066bc6cf2 -->
services:
  postgres-e2e:
    image: postgres:15-alpine
    container_name: acgs_postgres_e2e
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: os.environ.get("PASSWORD")
      POSTGRES_DB: acgs_e2e_test
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=C
    ports:
    - 5439:5432
    volumes:
    - postgres_e2e_data:/var/lib/postgresql/data
    - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
    - acgs_e2e_network
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U test_user -d acgs_e2e_test
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
  redis-e2e:
    image: redis:7-alpine
    container_name: acgs_redis_e2e
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
    - 6389:6379
    volumes:
    - redis_e2e_data:/data
    networks:
    - acgs_e2e_network
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
  mock-auth-service:
    build:
      context: ../../../
      dockerfile: tests/e2e/docker/Dockerfile.mock-services
      target: mock-auth
    container_name: acgs_mock_auth_e2e
    environment:
    - SERVICE_NAME=auth_service
    - SERVICE_PORT=8016
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - DATABASE_URL=os.environ.get("DATABASE_URL")
    - REDIS_URL=redis://redis-e2e:6379/0
    - LOG_LEVEL=INFO
    ports:
    - 8016:8016
    networks:
    - acgs_e2e_network
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8016/health
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
  mock-constitutional-ai:
    build:
      context: ../../../
      dockerfile: tests/e2e/docker/Dockerfile.mock-services
      target: mock-constitutional-ai
    container_name: acgs_mock_constitutional_ai_e2e
    environment:
    - SERVICE_NAME=constitutional_ai_service
    - SERVICE_PORT=8001
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - DATABASE_URL=os.environ.get("DATABASE_URL")
    - REDIS_URL=redis://redis-e2e:6379/1
    - AUTH_SERVICE_URL=http://mock-auth-service:8016
    - LOG_LEVEL=INFO
    ports:
    - 8001:8001
    networks:
    - acgs_e2e_network
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
      mock-auth-service:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8001/health
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
  mock-policy-governance:
    build:
      context: ../../../
      dockerfile: tests/e2e/docker/Dockerfile.mock-services
      target: mock-policy-governance
    container_name: acgs_mock_policy_governance_e2e
    environment:
    - SERVICE_NAME=policy_governance_service
    - SERVICE_PORT=8005
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - DATABASE_URL=os.environ.get("DATABASE_URL")
    - REDIS_URL=redis://redis-e2e:6379/5
    - AUTH_SERVICE_URL=http://mock-auth-service:8016
    - CONSTITUTIONAL_AI_URL=http://mock-constitutional-ai:8001
    - LOG_LEVEL=INFO
    ports:
    - 8005:8005
    networks:
    - acgs_e2e_network
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
      mock-auth-service:
        condition: service_healthy
      mock-constitutional-ai:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8005/health
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
  mock-governance-synthesis:
    build:
      context: ../../../
      dockerfile: tests/e2e/docker/Dockerfile.mock-services
      target: mock-governance-synthesis
    container_name: acgs_mock_governance_synthesis_e2e
    environment:
    - SERVICE_NAME=governance_synthesis_service
    - SERVICE_PORT=8004
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - DATABASE_URL=os.environ.get("DATABASE_URL")
    - REDIS_URL=redis://redis-e2e:6379/4
    - AUTH_SERVICE_URL=http://mock-auth-service:8016
    - CONSTITUTIONAL_AI_URL=http://mock-constitutional-ai:8001
    - POLICY_GOVERNANCE_URL=http://mock-policy-governance:8005
    - LOG_LEVEL=INFO
    ports:
    - 8004:8004
    networks:
    - acgs_e2e_network
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
      mock-auth-service:
        condition: service_healthy
      mock-constitutional-ai:
        condition: service_healthy
      mock-policy-governance:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8004/health
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
  e2e-test-runner:
    build:
      context: ../../../
      dockerfile: tests/e2e/docker/Dockerfile.test-runner
    container_name: acgs_e2e_test_runner
    environment:
    - E2E_TEST_MODE=offline
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - POSTGRES_HOST=postgres-e2e
    - POSTGRES_PORT=5432
    - POSTGRES_USER=test_user
    - POSTGRES_PASSWORD=os.environ.get("PASSWORD")
    - POSTGRES_DB=acgs_e2e_test
    - REDIS_HOST=redis-e2e
    - REDIS_PORT=6379
    - AUTH_SERVICE_URL=http://mock-auth-service:8016
    - CONSTITUTIONAL_AI_URL=http://mock-constitutional-ai:8001
    - POLICY_GOVERNANCE_URL=http://mock-policy-governance:8005
    - GOVERNANCE_SYNTHESIS_URL=http://mock-governance-synthesis:8004
    - E2E_PARALLEL_WORKERS=2
    - E2E_TEST_TIMEOUT=1800
    - PYTHONPATH=/app
    - PYTEST_CACHE_DIR=/app/.pytest_cache
    volumes:
    - ../../../tests:/app/tests:ro
    - ../../../services:/app/services:ro
    - e2e_test_results:/app/reports
    networks:
    - acgs_e2e_network
    depends_on:
      postgres-e2e:
        condition: service_healthy
      redis-e2e:
        condition: service_healthy
      mock-auth-service:
        condition: service_healthy
      mock-constitutional-ai:
        condition: service_healthy
      mock-policy-governance:
        condition: service_healthy
      mock-governance-synthesis:
        condition: service_healthy
    command: "sh -c \"\n  echo 'Waiting for services to be ready...' &&\n  sleep 30\
      \ &&\n  echo 'Starting E2E test suite...' &&\n  python -m pytest tests/e2e/tests/\
      \ \n    -v \n    --tb=short \n    --maxfail=10 \n    --timeout=300 \n    --junitxml=/app/reports/e2e-results.xml\
      \ \n    --cov=tests/e2e \n    --cov-report=html:/app/reports/coverage \n   \
      \ --cov-report=xml:/app/reports/coverage.xml \n    --cov-fail-under=80\n\"\n"
  prometheus-e2e:
    image: prom/prometheus:latest
    container_name: acgs_prometheus_e2e
    ports:
    - 9090:9090
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus_e2e_data:/prometheus
    networks:
    - acgs_e2e_network
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=1h
    - --web.enable-lifecycle
    profiles:
    - monitoring
  grafana-e2e:
    image: grafana/grafana:latest
    container_name: acgs_grafana_e2e
    ports:
    - 3000:3000
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
    - grafana_e2e_data:/var/lib/grafana
    - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
    - acgs_e2e_network
    depends_on:
    - prometheus-e2e
    profiles:
    - monitoring
networks:
  acgs_e2e_network:
    driver: bridge
    ipam:
      config:
      - subnet: 192.168.100.0/24
volumes:
  postgres_e2e_data:
    driver: local
  redis_e2e_data:
    driver: local
  e2e_test_results:
    driver: local
  prometheus_e2e_data:
    driver: local
  grafana_e2e_data:
    driver: local
constitutional_hash: cdd01ef066bc6cf2

# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit rates

**Constitutional Hash**: `cdd01ef066bc6cf2`

**Constitutional Hash**: `cdd01ef066bc6cf2`
# Constitutional Compliance: cdd01ef066bc6cf2
# Implementation Status: ðŸ”„ IN PROGRESS

# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit rates
# Constitutional Compliance: cdd01ef066bc6cf2
# Implementation Status: ðŸ”„ IN PROGRESS

---

**Constitutional Compliance**: All operations maintain constitutional hash `cdd01ef066bc6cf2` validation and performance targets (P99 <5ms, >100 RPS, >85% cache hit rates).
