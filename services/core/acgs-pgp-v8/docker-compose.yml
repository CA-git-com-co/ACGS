# ACGS-PGP v8 Docker Compose Configuration
# Development and testing environment setup

version: '3.8'

services:
  # ACGS-PGP v8 Main Service
  acgs-pgp-v8:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acgs_pgp_v8
    ports:
      - "8010:8010"
    environment:
      - SERVICE_NAME=acgs-pgp-v8
      - SERVICE_PORT=8010
      - ENVIRONMENT=development
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # Constitutional governance
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - CONSTITUTIONAL_COMPLIANCE_THRESHOLD=0.8
      - GOVERNANCE_VALIDATION_ENABLED=true
      
      # Database
      - DATABASE_URL=postgresql://acgs_user:acgs_password@postgres:5432/acgs_db
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=30
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      - REDIS_MAX_CONNECTIONS=100
      
      # Service integration
      - AUTH_SERVICE_URL=http://auth_service:8000
      - AC_SERVICE_URL=http://ac_service:8001
      - INTEGRITY_SERVICE_URL=http://integrity_service:8002
      - FV_SERVICE_URL=http://fv_service:8003
      - GS_SERVICE_URL=http://gs_service:8004
      - PGC_SERVICE_URL=http://pgc_service:8005
      - EC_SERVICE_URL=http://ec_service:8006
      
      # Generation engine
      - MAX_POLICY_LENGTH=5000
      - MIN_CONSTITUTIONAL_COMPLIANCE=0.8
      - FAULT_TOLERANCE_LEVEL=2
      - CONSENSUS_THRESHOLD=0.7
      - MAX_CONCURRENT_GENERATIONS=10
      - GENERATION_TIMEOUT_SECONDS=300
      - RESPONSE_TIME_TARGET_MS=500
      
      # Multi-model LLM
      - PRIMARY_MODEL=qwen3-32b
      - FALLBACK_MODELS=deepseek-chat,qwen3-235b,deepseek-r1
      - CONSENSUS_STRATEGY=weighted_average
      - MODEL_TIMEOUT_SECONDS=30
      
      # Quantum-inspired parameters
      - QUANTUM_ERROR_CORRECTION=true
      - SEMANTIC_ENTANGLEMENT_STRENGTH=0.5
      - DECOHERENCE_THRESHOLD=0.1
      - QUANTUM_STATE_PERSISTENCE=true
      
      # Security
      - JWT_SECRET_KEY=acgs-pgp-v8-secret-key-2024
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_MINUTES=30
      - CORS_ENABLED=true
      - RATE_LIMITING_ENABLED=true
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - STRUCTURED_LOGGING=true
      - TRACE_SAMPLING_RATE=0.1
      - AUDIT_TRAIL_ENABLED=true
      
      # Performance
      - ASYNC_WORKERS=4
      - CONNECTION_POOL_SIZE=100
      - REQUEST_TIMEOUT=30
      - GZIP_COMPRESSION=true
      
      # Quantumagi integration
      - QUANTUMAGI_ENABLED=true
      - QUANTUMAGI_DEVNET_ENDPOINT=https://api.devnet.solana.com
      - BLOCKCHAIN_SYNC_ENABLED=true
    
    depends_on:
      - postgres
      - redis
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    
    networks:
      - acgs-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: acgs_pgp_v8_postgres
    environment:
      - POSTGRES_DB=acgs_db
      - POSTGRES_USER=acgs_user
      - POSTGRES_PASSWORD=acgs_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - acgs-network
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acgs_user -d acgs_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: acgs_pgp_v8_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - acgs-network
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs_pgp_v8_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - acgs-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: acgs_pgp_v8_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - acgs-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  acgs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
