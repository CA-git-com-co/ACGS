apiVersion: apps/v1
kind: Deployment
metadata:
  name: acgs-pgp-v8
  namespace: acgs-system
  labels:
    app: acgs-pgp-v8
    component: policy-generation
    version: v8.0.0
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: acgs-pgp-v8
  template:
    metadata:
      labels:
        app: acgs-pgp-v8
        component: policy-generation
        version: v8.0.0
        constitutional-hash: cdd01ef066bc6cf2
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8010'
        prometheus.io/path: '/metrics'
    spec:
      serviceAccountName: acgs-pgp-v8-vault-auth
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: acgs-pgp-v8
          image: acgs-pgp-v8:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8010
              name: http
              protocol: TCP
          env:
            # Database Configuration - Secure External Secret
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-database-credentials
                  key: database-url
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-database-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-database-credentials
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-database-credentials
                  key: host

            # Redis Configuration - Secure External Secret
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-redis-credentials
                  key: redis-url
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-redis-credentials
                  key: password

            # Authentication Configuration - Secure External Secret
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-auth-credentials
                  key: jwt-secret-key
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-auth-credentials
                  key: api-key
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-auth-credentials
                  key: encryption-key

            # AI/ML Model API Keys - Secure External Secret
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-ai-credentials
                  key: openai-api-key
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-ai-credentials
                  key: anthropic-api-key
            - name: GROQ_API_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-ai-credentials
                  key: groq-api-key
            - name: GOOGLE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: acgs-pgp-v8-ai-credentials
                  key: google-api-key
            - name: CONSTITUTIONAL_HASH
              value: 'cdd01ef066bc6cf2'
            - name: GS_SERVICE_URL
              value: 'http://acgs-gs-service:8004'
            - name: PGC_SERVICE_URL
              value: 'http://acgs-pgc-service:8005'
            - name: AUTH_SERVICE_URL
              value: 'http://acgs-auth-service:8000'
            - name: PORT
              value: '8010'
          resources:
            requests:
              memory: '512Mi'
              cpu: '200m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8010
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8010
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          startupProbe:
            httpGet:
              path: /health
              port: 8010
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 12
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: config
          configMap:
            name: acgs-pgp-v8-config
        - name: logs
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - acgs-pgp-v8
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: 'acgs-system'
          operator: 'Equal'
          value: 'true'
          effect: 'NoSchedule'

---
apiVersion: v1
kind: Service
metadata:
  name: acgs-pgp-v8-service
  namespace: acgs-system
  labels:
    app: acgs-pgp-v8
    component: policy-generation
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8010'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - port: 8010
      targetPort: 8010
      protocol: TCP
      name: http
  selector:
    app: acgs-pgp-v8

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: acgs-pgp-v8
  namespace: acgs-system
  labels:
    app: acgs-pgp-v8

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: acgs-pgp-v8-config
  namespace: acgs-system
  labels:
    app: acgs-pgp-v8
data:
  acgs_pgp_v8_config.yaml: |
    # ACGS-PGP v8 Configuration
    service:
      name: "acgs-pgp-v8"
      port: 8010
      constitutional_hash: "cdd01ef066bc6cf2"

    generation_engine:
      max_concurrent_generations: 10
      generation_timeout_seconds: 300
      fault_tolerance_level: 2
      consensus_threshold: 0.7

    performance:
      async_workers: 4
      connection_pool_size: 100
      request_timeout: 30
      keep_alive_timeout: 5
      max_request_size: 10485760
      gzip_compression: true

    monitoring:
      prometheus_enabled: true
      prometheus_port: 9090
      metrics_path: "/metrics"
      health_check_path: "/health"
      structured_logging: true
      log_level: "INFO"
      trace_sampling_rate: 0.1

    security:
      jwt_algorithm: "HS256"
      jwt_expiration_minutes: 30
      cors_enabled: true
      cors_origins: ["*"]
      rate_limiting_enabled: true
      rate_limit_requests_per_minute: 100

# NOTE: Secrets are now managed externally via External Secrets Operator
# See secrets-management.yaml for secure secret configuration

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-pgp-v8-network-policy
  namespace: acgs-system
spec:
  podSelector:
    matchLabels:
      app: acgs-pgp-v8
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: acgs-system
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8010
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: acgs-system
      ports:
        - protocol: TCP
          port: 8000 # Auth Service
        - protocol: TCP
          port: 8004 # GS Service
        - protocol: TCP
          port: 8005 # PGC Service
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 6379 # Redis
    - to: []
      ports:
        - protocol: TCP
          port: 53 # DNS
        - protocol: UDP
          port: 53 # DNS
        - protocol: TCP
          port: 443 # HTTPS for external APIs

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: acgs-pgp-v8-hpa
  namespace: acgs-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: acgs-pgp-v8
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
