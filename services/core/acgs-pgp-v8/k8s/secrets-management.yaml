# ACGS-PGP v8 Secure Secret Management
# Production-ready secret management with external secret operator integration

apiVersion: v1
kind: Namespace
metadata:
  name: acgs-secrets
  labels:
    name: acgs-secrets
    security.acgs.gov/classification: restricted

---
# External Secrets Operator Configuration for HashiCorp Vault
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: acgs-vault-secret-store
  namespace: acgs-system
spec:
  provider:
    vault:
      server: "https://vault.acgs.internal:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "acgs-pgp-v8"
          serviceAccountRef:
            name: "acgs-pgp-v8-vault-auth"

---
# Service Account for Vault Authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: acgs-pgp-v8-vault-auth
  namespace: acgs-system
  labels:
    app: acgs-pgp-v8
    component: secret-management

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: acgs-pgp-v8-database-secret
  namespace: acgs-system
spec:
  refreshInterval: 300s # Refresh every 5 minutes
  secretStoreRef:
    name: acgs-vault-secret-store
    kind: SecretStore
  target:
    name: acgs-pgp-v8-database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        database-url: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}"
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
  data:
    - secretKey: username
      remoteRef:
        key: acgs-pgp-v8/database
        property: username
    - secretKey: password
      remoteRef:
        key: acgs-pgp-v8/database
        property: password
    - secretKey: host
      remoteRef:
        key: acgs-pgp-v8/database
        property: host
    - secretKey: port
      remoteRef:
        key: acgs-pgp-v8/database
        property: port
    - secretKey: database
      remoteRef:
        key: acgs-pgp-v8/database
        property: database

---
# External Secret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: acgs-pgp-v8-redis-secret
  namespace: acgs-system
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: acgs-vault-secret-store
    kind: SecretStore
  target:
    name: acgs-pgp-v8-redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        redis-url: "redis://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}"
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        port: "{{ .port }}"
        database: "{{ .database }}"
  data:
    - secretKey: username
      remoteRef:
        key: acgs-pgp-v8/redis
        property: username
    - secretKey: password
      remoteRef:
        key: acgs-pgp-v8/redis
        property: password
    - secretKey: host
      remoteRef:
        key: acgs-pgp-v8/redis
        property: host
    - secretKey: port
      remoteRef:
        key: acgs-pgp-v8/redis
        property: port
    - secretKey: database
      remoteRef:
        key: acgs-pgp-v8/redis
        property: database

---
# External Secret for JWT and API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: acgs-pgp-v8-auth-secret
  namespace: acgs-system
spec:
  refreshInterval: 3600s # Refresh every hour for security keys
  secretStoreRef:
    name: acgs-vault-secret-store
    kind: SecretStore
  target:
    name: acgs-pgp-v8-auth-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        jwt-secret-key: "{{ .jwt_secret_key }}"
        api-key: "{{ .api_key }}"
        encryption-key: "{{ .encryption_key }}"
  data:
    - secretKey: jwt_secret_key
      remoteRef:
        key: acgs-pgp-v8/auth
        property: jwt_secret_key
    - secretKey: api_key
      remoteRef:
        key: acgs-pgp-v8/auth
        property: api_key
    - secretKey: encryption_key
      remoteRef:
        key: acgs-pgp-v8/auth
        property: encryption_key

---
# External Secret for AI/ML Model API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: acgs-pgp-v8-ai-secret
  namespace: acgs-system
spec:
  refreshInterval: 3600s
  secretStoreRef:
    name: acgs-vault-secret-store
    kind: SecretStore
  target:
    name: acgs-pgp-v8-ai-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        openai-api-key: "{{ .openai_api_key }}"
        anthropic-api-key: "{{ .anthropic_api_key }}"
        groq-api-key: "{{ .groq_api_key }}"
        google-api-key: "{{ .google_api_key }}"
  data:
    - secretKey: openai_api_key
      remoteRef:
        key: acgs-pgp-v8/ai-models
        property: openai_api_key
    - secretKey: anthropic_api_key
      remoteRef:
        key: acgs-pgp-v8/ai-models
        property: anthropic_api_key
    - secretKey: groq_api_key
      remoteRef:
        key: acgs-pgp-v8/ai-models
        property: groq_api_key
    - secretKey: google_api_key
      remoteRef:
        key: acgs-pgp-v8/ai-models
        property: google_api_key

---
# RBAC for Secret Management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: acgs-system
  name: acgs-pgp-v8-secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: acgs-pgp-v8-secret-reader-binding
  namespace: acgs-system
subjects:
- kind: ServiceAccount
  name: acgs-pgp-v8
  namespace: acgs-system
roleRef:
  kind: Role
  name: acgs-pgp-v8-secret-reader
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for Secret Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-pgp-v8-secret-access-policy
  namespace: acgs-system
spec:
  podSelector:
    matchLabels:
      app: acgs-pgp-v8
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: vault-system
    ports:
    - protocol: TCP
      port: 8200 # Vault API
  - to: []
    ports:
    - protocol: TCP
      port: 53 # DNS
    - protocol: UDP
      port: 53 # DNS
