// Quantum Policy Evaluator (QPE) Protocol Buffer Definition
// ACGS-1 Constitutional Governance Enhancement
// Implements quantum-inspired policy evaluation with superposition states

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: proto/qpe.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Policy states (quantum basis states)
type State int32

const (
	State_APPROVED State = 0 // |approved⟩
	State_REJECTED State = 1 // |rejected⟩
	State_PENDING  State = 2 // |pending⟩
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "APPROVED",
		1: "REJECTED",
		2: "PENDING",
	}
	State_value = map[string]int32{
		"APPROVED": 0,
		"REJECTED": 1,
		"PENDING":  2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_qpe_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_proto_qpe_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{0}
}

// Collapse reasons for audit trail
type CollapseReason int32

const (
	CollapseReason_MEASUREMENT      CollapseReason = 0 // Normal measurement-induced collapse
	CollapseReason_OBSERVATION      CollapseReason = 1 // Stakeholder observation
	CollapseReason_DEADLINE_EXPIRED CollapseReason = 2 // Automatic deadline collapse
	CollapseReason_DETERMINISTIC    CollapseReason = 3 // Hash-based deterministic collapse
	CollapseReason_MANUAL           CollapseReason = 4 // Manual administrative collapse
)

// Enum value maps for CollapseReason.
var (
	CollapseReason_name = map[int32]string{
		0: "MEASUREMENT",
		1: "OBSERVATION",
		2: "DEADLINE_EXPIRED",
		3: "DETERMINISTIC",
		4: "MANUAL",
	}
	CollapseReason_value = map[string]int32{
		"MEASUREMENT":      0,
		"OBSERVATION":      1,
		"DEADLINE_EXPIRED": 2,
		"DETERMINISTIC":    3,
		"MANUAL":           4,
	}
)

func (x CollapseReason) Enum() *CollapseReason {
	p := new(CollapseReason)
	*p = x
	return p
}

func (x CollapseReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollapseReason) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_qpe_proto_enumTypes[1].Descriptor()
}

func (CollapseReason) Type() protoreflect.EnumType {
	return &file_proto_qpe_proto_enumTypes[1]
}

func (x CollapseReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollapseReason.Descriptor instead.
func (CollapseReason) EnumDescriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{1}
}

// Quantum policy representation with superposition weights
type QuantumPolicy struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PolicyId             string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	EntanglementTag      []byte                 `protobuf:"bytes,2,opt,name=entanglement_tag,json=entanglementTag,proto3" json:"entanglement_tag,omitempty"`                  // 32-byte HMAC with constitutional hash
	WeightApproved       float32                `protobuf:"fixed32,3,opt,name=weight_approved,json=weightApproved,proto3" json:"weight_approved,omitempty"`                   // |approved⟩ amplitude squared
	WeightRejected       float32                `protobuf:"fixed32,4,opt,name=weight_rejected,json=weightRejected,proto3" json:"weight_rejected,omitempty"`                   // |rejected⟩ amplitude squared
	WeightPending        float32                `protobuf:"fixed32,5,opt,name=weight_pending,json=weightPending,proto3" json:"weight_pending,omitempty"`                      // |pending⟩ amplitude squared
	CreatedAt            int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                   // Unix timestamp
	DeadlineAt           int64                  `protobuf:"varint,7,opt,name=deadline_at,json=deadlineAt,proto3" json:"deadline_at,omitempty"`                                // Automatic collapse deadline
	UncertaintyParameter float32                `protobuf:"fixed32,8,opt,name=uncertainty_parameter,json=uncertaintyParameter,proto3" json:"uncertainty_parameter,omitempty"` // λ value for this policy
	Criticality          string                 `protobuf:"bytes,9,opt,name=criticality,proto3" json:"criticality,omitempty"`                                                 // HIGH, MEDIUM, LOW
	IsCollapsed          bool                   `protobuf:"varint,10,opt,name=is_collapsed,json=isCollapsed,proto3" json:"is_collapsed,omitempty"`                            // Whether superposition has collapsed
	CollapsedState       State                  `protobuf:"varint,11,opt,name=collapsed_state,json=collapsedState,proto3,enum=qpe.State" json:"collapsed_state,omitempty"`    // Final state after collapse
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *QuantumPolicy) Reset() {
	*x = QuantumPolicy{}
	mi := &file_proto_qpe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuantumPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantumPolicy) ProtoMessage() {}

func (x *QuantumPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantumPolicy.ProtoReflect.Descriptor instead.
func (*QuantumPolicy) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{0}
}

func (x *QuantumPolicy) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *QuantumPolicy) GetEntanglementTag() []byte {
	if x != nil {
		return x.EntanglementTag
	}
	return nil
}

func (x *QuantumPolicy) GetWeightApproved() float32 {
	if x != nil {
		return x.WeightApproved
	}
	return 0
}

func (x *QuantumPolicy) GetWeightRejected() float32 {
	if x != nil {
		return x.WeightRejected
	}
	return 0
}

func (x *QuantumPolicy) GetWeightPending() float32 {
	if x != nil {
		return x.WeightPending
	}
	return 0
}

func (x *QuantumPolicy) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *QuantumPolicy) GetDeadlineAt() int64 {
	if x != nil {
		return x.DeadlineAt
	}
	return 0
}

func (x *QuantumPolicy) GetUncertaintyParameter() float32 {
	if x != nil {
		return x.UncertaintyParameter
	}
	return 0
}

func (x *QuantumPolicy) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

func (x *QuantumPolicy) GetIsCollapsed() bool {
	if x != nil {
		return x.IsCollapsed
	}
	return false
}

func (x *QuantumPolicy) GetCollapsedState() State {
	if x != nil {
		return x.CollapsedState
	}
	return State_APPROVED
}

// Register new policy in superposition
type RegisterRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PolicyId          string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Criticality       string                 `protobuf:"bytes,2,opt,name=criticality,proto3" json:"criticality,omitempty"`                                       // HIGH, MEDIUM, LOW
	DeadlineHours     int64                  `protobuf:"varint,3,opt,name=deadline_hours,json=deadlineHours,proto3" json:"deadline_hours,omitempty"`             // Hours until automatic collapse
	DeterministicMode bool                   `protobuf:"varint,4,opt,name=deterministic_mode,json=deterministicMode,proto3" json:"deterministic_mode,omitempty"` // Use hash-based collapse
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_proto_qpe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *RegisterRequest) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

func (x *RegisterRequest) GetDeadlineHours() int64 {
	if x != nil {
		return x.DeadlineHours
	}
	return 0
}

func (x *RegisterRequest) GetDeterministicMode() bool {
	if x != nil {
		return x.DeterministicMode
	}
	return false
}

type RegisterResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PolicyId        string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	EntanglementTag []byte                 `protobuf:"bytes,2,opt,name=entanglement_tag,json=entanglementTag,proto3" json:"entanglement_tag,omitempty"`
	QuantumState    *QuantumPolicy         `protobuf:"bytes,3,opt,name=quantum_state,json=quantumState,proto3" json:"quantum_state,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_proto_qpe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *RegisterResponse) GetEntanglementTag() []byte {
	if x != nil {
		return x.EntanglementTag
	}
	return nil
}

func (x *RegisterResponse) GetQuantumState() *QuantumPolicy {
	if x != nil {
		return x.QuantumState
	}
	return nil
}

// Measure policy state (triggers collapse)
type MeasureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Context       map[string]string      `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Evaluation context
	ForceCollapse bool                   `protobuf:"varint,3,opt,name=force_collapse,json=forceCollapse,proto3" json:"force_collapse,omitempty"`                                         // Force collapse even if not needed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeasureRequest) Reset() {
	*x = MeasureRequest{}
	mi := &file_proto_qpe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRequest) ProtoMessage() {}

func (x *MeasureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRequest.ProtoReflect.Descriptor instead.
func (*MeasureRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{3}
}

func (x *MeasureRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *MeasureRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *MeasureRequest) GetForceCollapse() bool {
	if x != nil {
		return x.ForceCollapse
	}
	return false
}

type MeasureResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PolicyId            string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	State               State                  `protobuf:"varint,2,opt,name=state,proto3,enum=qpe.State" json:"state,omitempty"`
	PgcResult           bool                   `protobuf:"varint,3,opt,name=pgc_result,json=pgcResult,proto3" json:"pgc_result,omitempty"`                  // Actual PGC evaluation result
	LatencyMs           float32                `protobuf:"fixed32,4,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`                 // Total latency including QPE overhead
	EntanglementTag     []byte                 `protobuf:"bytes,5,opt,name=entanglement_tag,json=entanglementTag,proto3" json:"entanglement_tag,omitempty"` // For audit trail
	CollapseReason      CollapseReason         `protobuf:"varint,6,opt,name=collapse_reason,json=collapseReason,proto3,enum=qpe.CollapseReason" json:"collapse_reason,omitempty"`
	WasAlreadyCollapsed bool                   `protobuf:"varint,7,opt,name=was_already_collapsed,json=wasAlreadyCollapsed,proto3" json:"was_already_collapsed,omitempty"`
	HeisenbergConstant  float32                `protobuf:"fixed32,8,opt,name=heisenberg_constant,json=heisenbergConstant,proto3" json:"heisenberg_constant,omitempty"` // Current K value (latency × accuracy)
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MeasureResponse) Reset() {
	*x = MeasureResponse{}
	mi := &file_proto_qpe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureResponse) ProtoMessage() {}

func (x *MeasureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureResponse.ProtoReflect.Descriptor instead.
func (*MeasureResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{4}
}

func (x *MeasureResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *MeasureResponse) GetState() State {
	if x != nil {
		return x.State
	}
	return State_APPROVED
}

func (x *MeasureResponse) GetPgcResult() bool {
	if x != nil {
		return x.PgcResult
	}
	return false
}

func (x *MeasureResponse) GetLatencyMs() float32 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *MeasureResponse) GetEntanglementTag() []byte {
	if x != nil {
		return x.EntanglementTag
	}
	return nil
}

func (x *MeasureResponse) GetCollapseReason() CollapseReason {
	if x != nil {
		return x.CollapseReason
	}
	return CollapseReason_MEASUREMENT
}

func (x *MeasureResponse) GetWasAlreadyCollapsed() bool {
	if x != nil {
		return x.WasAlreadyCollapsed
	}
	return false
}

func (x *MeasureResponse) GetHeisenbergConstant() float32 {
	if x != nil {
		return x.HeisenbergConstant
	}
	return 0
}

// Set uncertainty parameter
type UncertaintyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lambda        float32                `protobuf:"fixed32,1,opt,name=lambda,proto3" json:"lambda,omitempty"` // λ ∈ [0,1] controlling accuracy vs speed trade-off
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UncertaintyRequest) Reset() {
	*x = UncertaintyRequest{}
	mi := &file_proto_qpe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UncertaintyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncertaintyRequest) ProtoMessage() {}

func (x *UncertaintyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncertaintyRequest.ProtoReflect.Descriptor instead.
func (*UncertaintyRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{5}
}

func (x *UncertaintyRequest) GetLambda() float32 {
	if x != nil {
		return x.Lambda
	}
	return 0
}

type UncertaintyResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Lambda            float32                `protobuf:"fixed32,1,opt,name=lambda,proto3" json:"lambda,omitempty"`
	EffectDescription string                 `protobuf:"bytes,2,opt,name=effect_description,json=effectDescription,proto3" json:"effect_description,omitempty"` // Human-readable description of effect
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UncertaintyResponse) Reset() {
	*x = UncertaintyResponse{}
	mi := &file_proto_qpe_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UncertaintyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncertaintyResponse) ProtoMessage() {}

func (x *UncertaintyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncertaintyResponse.ProtoReflect.Descriptor instead.
func (*UncertaintyResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{6}
}

func (x *UncertaintyResponse) GetLambda() float32 {
	if x != nil {
		return x.Lambda
	}
	return 0
}

func (x *UncertaintyResponse) GetEffectDescription() string {
	if x != nil {
		return x.EffectDescription
	}
	return ""
}

// Observer effect - stakeholder observation
type ObserveRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PolicyId          string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	ObserverId        string                 `protobuf:"bytes,2,opt,name=observer_id,json=observerId,proto3" json:"observer_id,omitempty"`                      // Stakeholder identifier
	ObservationReason string                 `protobuf:"bytes,3,opt,name=observation_reason,json=observationReason,proto3" json:"observation_reason,omitempty"` // Why observing
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ObserveRequest) Reset() {
	*x = ObserveRequest{}
	mi := &file_proto_qpe_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveRequest) ProtoMessage() {}

func (x *ObserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveRequest.ProtoReflect.Descriptor instead.
func (*ObserveRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{7}
}

func (x *ObserveRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ObserveRequest) GetObserverId() string {
	if x != nil {
		return x.ObserverId
	}
	return ""
}

func (x *ObserveRequest) GetObservationReason() string {
	if x != nil {
		return x.ObservationReason
	}
	return ""
}

type ObserveResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PolicyId             string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	State                State                  `protobuf:"varint,2,opt,name=state,proto3,enum=qpe.State" json:"state,omitempty"`
	WasCollapsed         bool                   `protobuf:"varint,3,opt,name=was_collapsed,json=wasCollapsed,proto3" json:"was_collapsed,omitempty"` // Whether collapse occurred
	EntanglementTag      []byte                 `protobuf:"bytes,4,opt,name=entanglement_tag,json=entanglementTag,proto3" json:"entanglement_tag,omitempty"`
	ObservationTimestamp int64                  `protobuf:"varint,5,opt,name=observation_timestamp,json=observationTimestamp,proto3" json:"observation_timestamp,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ObserveResponse) Reset() {
	*x = ObserveResponse{}
	mi := &file_proto_qpe_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObserveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveResponse) ProtoMessage() {}

func (x *ObserveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveResponse.ProtoReflect.Descriptor instead.
func (*ObserveResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{8}
}

func (x *ObserveResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ObserveResponse) GetState() State {
	if x != nil {
		return x.State
	}
	return State_APPROVED
}

func (x *ObserveResponse) GetWasCollapsed() bool {
	if x != nil {
		return x.WasCollapsed
	}
	return false
}

func (x *ObserveResponse) GetEntanglementTag() []byte {
	if x != nil {
		return x.EntanglementTag
	}
	return nil
}

func (x *ObserveResponse) GetObservationTimestamp() int64 {
	if x != nil {
		return x.ObservationTimestamp
	}
	return 0
}

// Get quantum state without collapse (monitoring)
type GetQuantumStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuantumStateRequest) Reset() {
	*x = GetQuantumStateRequest{}
	mi := &file_proto_qpe_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuantumStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuantumStateRequest) ProtoMessage() {}

func (x *GetQuantumStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuantumStateRequest.ProtoReflect.Descriptor instead.
func (*GetQuantumStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{9}
}

func (x *GetQuantumStateRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type GetQuantumStateResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	QuantumState         *QuantumPolicy         `protobuf:"bytes,1,opt,name=quantum_state,json=quantumState,proto3" json:"quantum_state,omitempty"`
	Exists               bool                   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	SuperpositionEntropy float32                `protobuf:"fixed32,3,opt,name=superposition_entropy,json=superpositionEntropy,proto3" json:"superposition_entropy,omitempty"` // Measure of superposition "spread"
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetQuantumStateResponse) Reset() {
	*x = GetQuantumStateResponse{}
	mi := &file_proto_qpe_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuantumStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuantumStateResponse) ProtoMessage() {}

func (x *GetQuantumStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuantumStateResponse.ProtoReflect.Descriptor instead.
func (*GetQuantumStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{10}
}

func (x *GetQuantumStateResponse) GetQuantumState() *QuantumPolicy {
	if x != nil {
		return x.QuantumState
	}
	return nil
}

func (x *GetQuantumStateResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetQuantumStateResponse) GetSuperpositionEntropy() float32 {
	if x != nil {
		return x.SuperpositionEntropy
	}
	return 0
}

// Health check
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_proto_qpe_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{11}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Healthy       bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Details       map[string]string      `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_proto_qpe_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{12}
}

func (x *HealthCheckResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// Batch operations for efficiency
type BatchMeasureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyIds     []string               `protobuf:"bytes,1,rep,name=policy_ids,json=policyIds,proto3" json:"policy_ids,omitempty"`
	Context       map[string]string      `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchMeasureRequest) Reset() {
	*x = BatchMeasureRequest{}
	mi := &file_proto_qpe_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchMeasureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMeasureRequest) ProtoMessage() {}

func (x *BatchMeasureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMeasureRequest.ProtoReflect.Descriptor instead.
func (*BatchMeasureRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{13}
}

func (x *BatchMeasureRequest) GetPolicyIds() []string {
	if x != nil {
		return x.PolicyIds
	}
	return nil
}

func (x *BatchMeasureRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchMeasureResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Results        []*MeasureResponse     `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TotalLatencyMs float32                `protobuf:"fixed32,2,opt,name=total_latency_ms,json=totalLatencyMs,proto3" json:"total_latency_ms,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchMeasureResponse) Reset() {
	*x = BatchMeasureResponse{}
	mi := &file_proto_qpe_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchMeasureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMeasureResponse) ProtoMessage() {}

func (x *BatchMeasureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMeasureResponse.ProtoReflect.Descriptor instead.
func (*BatchMeasureResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{14}
}

func (x *BatchMeasureResponse) GetResults() []*MeasureResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BatchMeasureResponse) GetTotalLatencyMs() float32 {
	if x != nil {
		return x.TotalLatencyMs
	}
	return 0
}

// Metrics and monitoring
type MetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	mi := &file_proto_qpe_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{15}
}

type MetricsResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TotalPolicies           int64                  `protobuf:"varint,1,opt,name=total_policies,json=totalPolicies,proto3" json:"total_policies,omitempty"`
	PoliciesInSuperposition int64                  `protobuf:"varint,2,opt,name=policies_in_superposition,json=policiesInSuperposition,proto3" json:"policies_in_superposition,omitempty"`
	CollapsedPolicies       int64                  `protobuf:"varint,3,opt,name=collapsed_policies,json=collapsedPolicies,proto3" json:"collapsed_policies,omitempty"`
	AverageLatencyMs        float32                `protobuf:"fixed32,4,opt,name=average_latency_ms,json=averageLatencyMs,proto3" json:"average_latency_ms,omitempty"`
	CurrentUncertainty      float32                `protobuf:"fixed32,5,opt,name=current_uncertainty,json=currentUncertainty,proto3" json:"current_uncertainty,omitempty"`
	HeisenbergConstant      float32                `protobuf:"fixed32,6,opt,name=heisenberg_constant,json=heisenbergConstant,proto3" json:"heisenberg_constant,omitempty"`
	StateDistribution       map[string]int64       `protobuf:"bytes,7,rep,name=state_distribution,json=stateDistribution,proto3" json:"state_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	CollapseReasons         map[string]int64       `protobuf:"bytes,8,rep,name=collapse_reasons,json=collapseReasons,proto3" json:"collapse_reasons,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	mi := &file_proto_qpe_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{16}
}

func (x *MetricsResponse) GetTotalPolicies() int64 {
	if x != nil {
		return x.TotalPolicies
	}
	return 0
}

func (x *MetricsResponse) GetPoliciesInSuperposition() int64 {
	if x != nil {
		return x.PoliciesInSuperposition
	}
	return 0
}

func (x *MetricsResponse) GetCollapsedPolicies() int64 {
	if x != nil {
		return x.CollapsedPolicies
	}
	return 0
}

func (x *MetricsResponse) GetAverageLatencyMs() float32 {
	if x != nil {
		return x.AverageLatencyMs
	}
	return 0
}

func (x *MetricsResponse) GetCurrentUncertainty() float32 {
	if x != nil {
		return x.CurrentUncertainty
	}
	return 0
}

func (x *MetricsResponse) GetHeisenbergConstant() float32 {
	if x != nil {
		return x.HeisenbergConstant
	}
	return 0
}

func (x *MetricsResponse) GetStateDistribution() map[string]int64 {
	if x != nil {
		return x.StateDistribution
	}
	return nil
}

func (x *MetricsResponse) GetCollapseReasons() map[string]int64 {
	if x != nil {
		return x.CollapseReasons
	}
	return nil
}

// Constitutional entanglement verification
type VerifyEntanglementRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      string                 `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	ExpectedTag   []byte                 `protobuf:"bytes,2,opt,name=expected_tag,json=expectedTag,proto3" json:"expected_tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyEntanglementRequest) Reset() {
	*x = VerifyEntanglementRequest{}
	mi := &file_proto_qpe_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyEntanglementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEntanglementRequest) ProtoMessage() {}

func (x *VerifyEntanglementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEntanglementRequest.ProtoReflect.Descriptor instead.
func (*VerifyEntanglementRequest) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{17}
}

func (x *VerifyEntanglementRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *VerifyEntanglementRequest) GetExpectedTag() []byte {
	if x != nil {
		return x.ExpectedTag
	}
	return nil
}

type VerifyEntanglementResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Valid              bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ActualTag          []byte                 `protobuf:"bytes,2,opt,name=actual_tag,json=actualTag,proto3" json:"actual_tag,omitempty"`
	ConstitutionalHash string                 `protobuf:"bytes,3,opt,name=constitutional_hash,json=constitutionalHash,proto3" json:"constitutional_hash,omitempty"` // Should be "cdd01ef066bc6cf2"
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *VerifyEntanglementResponse) Reset() {
	*x = VerifyEntanglementResponse{}
	mi := &file_proto_qpe_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyEntanglementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEntanglementResponse) ProtoMessage() {}

func (x *VerifyEntanglementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qpe_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEntanglementResponse.ProtoReflect.Descriptor instead.
func (*VerifyEntanglementResponse) Descriptor() ([]byte, []int) {
	return file_proto_qpe_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyEntanglementResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *VerifyEntanglementResponse) GetActualTag() []byte {
	if x != nil {
		return x.ActualTag
	}
	return nil
}

func (x *VerifyEntanglementResponse) GetConstitutionalHash() string {
	if x != nil {
		return x.ConstitutionalHash
	}
	return ""
}

var File_proto_qpe_proto protoreflect.FileDescriptor

const file_proto_qpe_proto_rawDesc = "" +
	"\n" +
	"\x0fproto/qpe.proto\x12\x03qpe\"\xbf\x03\n" +
	"\rQuantumPolicy\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12)\n" +
	"\x10entanglement_tag\x18\x02 \x01(\fR\x0fentanglementTag\x12'\n" +
	"\x0fweight_approved\x18\x03 \x01(\x02R\x0eweightApproved\x12'\n" +
	"\x0fweight_rejected\x18\x04 \x01(\x02R\x0eweightRejected\x12%\n" +
	"\x0eweight_pending\x18\x05 \x01(\x02R\rweightPending\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1f\n" +
	"\vdeadline_at\x18\a \x01(\x03R\n" +
	"deadlineAt\x123\n" +
	"\x15uncertainty_parameter\x18\b \x01(\x02R\x14uncertaintyParameter\x12 \n" +
	"\vcriticality\x18\t \x01(\tR\vcriticality\x12!\n" +
	"\fis_collapsed\x18\n" +
	" \x01(\bR\visCollapsed\x123\n" +
	"\x0fcollapsed_state\x18\v \x01(\x0e2\n" +
	".qpe.StateR\x0ecollapsedState\"\xa6\x01\n" +
	"\x0fRegisterRequest\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12 \n" +
	"\vcriticality\x18\x02 \x01(\tR\vcriticality\x12%\n" +
	"\x0edeadline_hours\x18\x03 \x01(\x03R\rdeadlineHours\x12-\n" +
	"\x12deterministic_mode\x18\x04 \x01(\bR\x11deterministicMode\"\x93\x01\n" +
	"\x10RegisterResponse\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12)\n" +
	"\x10entanglement_tag\x18\x02 \x01(\fR\x0fentanglementTag\x127\n" +
	"\rquantum_state\x18\x03 \x01(\v2\x12.qpe.QuantumPolicyR\fquantumState\"\xcc\x01\n" +
	"\x0eMeasureRequest\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12:\n" +
	"\acontext\x18\x02 \x03(\v2 .qpe.MeasureRequest.ContextEntryR\acontext\x12%\n" +
	"\x0eforce_collapse\x18\x03 \x01(\bR\rforceCollapse\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdc\x02\n" +
	"\x0fMeasureResponse\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12 \n" +
	"\x05state\x18\x02 \x01(\x0e2\n" +
	".qpe.StateR\x05state\x12\x1d\n" +
	"\n" +
	"pgc_result\x18\x03 \x01(\bR\tpgcResult\x12\x1d\n" +
	"\n" +
	"latency_ms\x18\x04 \x01(\x02R\tlatencyMs\x12)\n" +
	"\x10entanglement_tag\x18\x05 \x01(\fR\x0fentanglementTag\x12<\n" +
	"\x0fcollapse_reason\x18\x06 \x01(\x0e2\x13.qpe.CollapseReasonR\x0ecollapseReason\x122\n" +
	"\x15was_already_collapsed\x18\a \x01(\bR\x13wasAlreadyCollapsed\x12/\n" +
	"\x13heisenberg_constant\x18\b \x01(\x02R\x12heisenbergConstant\",\n" +
	"\x12UncertaintyRequest\x12\x16\n" +
	"\x06lambda\x18\x01 \x01(\x02R\x06lambda\"\\\n" +
	"\x13UncertaintyResponse\x12\x16\n" +
	"\x06lambda\x18\x01 \x01(\x02R\x06lambda\x12-\n" +
	"\x12effect_description\x18\x02 \x01(\tR\x11effectDescription\"}\n" +
	"\x0eObserveRequest\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12\x1f\n" +
	"\vobserver_id\x18\x02 \x01(\tR\n" +
	"observerId\x12-\n" +
	"\x12observation_reason\x18\x03 \x01(\tR\x11observationReason\"\xd5\x01\n" +
	"\x0fObserveResponse\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12 \n" +
	"\x05state\x18\x02 \x01(\x0e2\n" +
	".qpe.StateR\x05state\x12#\n" +
	"\rwas_collapsed\x18\x03 \x01(\bR\fwasCollapsed\x12)\n" +
	"\x10entanglement_tag\x18\x04 \x01(\fR\x0fentanglementTag\x123\n" +
	"\x15observation_timestamp\x18\x05 \x01(\x03R\x14observationTimestamp\"5\n" +
	"\x16GetQuantumStateRequest\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\"\x9f\x01\n" +
	"\x17GetQuantumStateResponse\x127\n" +
	"\rquantum_state\x18\x01 \x01(\v2\x12.qpe.QuantumPolicyR\fquantumState\x12\x16\n" +
	"\x06exists\x18\x02 \x01(\bR\x06exists\x123\n" +
	"\x15superposition_entropy\x18\x03 \x01(\x02R\x14superpositionEntropy\"\x14\n" +
	"\x12HealthCheckRequest\"\xc4\x01\n" +
	"\x13HealthCheckResponse\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12?\n" +
	"\adetails\x18\x03 \x03(\v2%.qpe.HealthCheckResponse.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb1\x01\n" +
	"\x13BatchMeasureRequest\x12\x1d\n" +
	"\n" +
	"policy_ids\x18\x01 \x03(\tR\tpolicyIds\x12?\n" +
	"\acontext\x18\x02 \x03(\v2%.qpe.BatchMeasureRequest.ContextEntryR\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"p\n" +
	"\x14BatchMeasureResponse\x12.\n" +
	"\aresults\x18\x01 \x03(\v2\x14.qpe.MeasureResponseR\aresults\x12(\n" +
	"\x10total_latency_ms\x18\x02 \x01(\x02R\x0etotalLatencyMs\"\x10\n" +
	"\x0eMetricsRequest\"\xef\x04\n" +
	"\x0fMetricsResponse\x12%\n" +
	"\x0etotal_policies\x18\x01 \x01(\x03R\rtotalPolicies\x12:\n" +
	"\x19policies_in_superposition\x18\x02 \x01(\x03R\x17policiesInSuperposition\x12-\n" +
	"\x12collapsed_policies\x18\x03 \x01(\x03R\x11collapsedPolicies\x12,\n" +
	"\x12average_latency_ms\x18\x04 \x01(\x02R\x10averageLatencyMs\x12/\n" +
	"\x13current_uncertainty\x18\x05 \x01(\x02R\x12currentUncertainty\x12/\n" +
	"\x13heisenberg_constant\x18\x06 \x01(\x02R\x12heisenbergConstant\x12Z\n" +
	"\x12state_distribution\x18\a \x03(\v2+.qpe.MetricsResponse.StateDistributionEntryR\x11stateDistribution\x12T\n" +
	"\x10collapse_reasons\x18\b \x03(\v2).qpe.MetricsResponse.CollapseReasonsEntryR\x0fcollapseReasons\x1aD\n" +
	"\x16StateDistributionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aB\n" +
	"\x14CollapseReasonsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"[\n" +
	"\x19VerifyEntanglementRequest\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12!\n" +
	"\fexpected_tag\x18\x02 \x01(\fR\vexpectedTag\"\x82\x01\n" +
	"\x1aVerifyEntanglementResponse\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x1d\n" +
	"\n" +
	"actual_tag\x18\x02 \x01(\fR\tactualTag\x12/\n" +
	"\x13constitutional_hash\x18\x03 \x01(\tR\x12constitutionalHash*0\n" +
	"\x05State\x12\f\n" +
	"\bAPPROVED\x10\x00\x12\f\n" +
	"\bREJECTED\x10\x01\x12\v\n" +
	"\aPENDING\x10\x02*g\n" +
	"\x0eCollapseReason\x12\x0f\n" +
	"\vMEASUREMENT\x10\x00\x12\x0f\n" +
	"\vOBSERVATION\x10\x01\x12\x14\n" +
	"\x10DEADLINE_EXPIRED\x10\x02\x12\x11\n" +
	"\rDETERMINISTIC\x10\x03\x12\n" +
	"\n" +
	"\x06MANUAL\x10\x042\x9e\x03\n" +
	"\x16QuantumPolicyEvaluator\x129\n" +
	"\bRegister\x12\x14.qpe.RegisterRequest\x1a\x15.qpe.RegisterResponse\"\x00\x126\n" +
	"\aMeasure\x12\x13.qpe.MeasureRequest\x1a\x14.qpe.MeasureResponse\"\x00\x12E\n" +
	"\x0eSetUncertainty\x12\x17.qpe.UncertaintyRequest\x1a\x18.qpe.UncertaintyResponse\"\x00\x126\n" +
	"\aObserve\x12\x13.qpe.ObserveRequest\x1a\x14.qpe.ObserveResponse\"\x00\x12N\n" +
	"\x0fGetQuantumState\x12\x1b.qpe.GetQuantumStateRequest\x1a\x1c.qpe.GetQuantumStateResponse\"\x00\x12B\n" +
	"\vHealthCheck\x12\x17.qpe.HealthCheckRequest\x1a\x18.qpe.HealthCheckResponse\"\x00B\x13Z\x11qpe_service/protob\x06proto3"

var (
	file_proto_qpe_proto_rawDescOnce sync.Once
	file_proto_qpe_proto_rawDescData []byte
)

func file_proto_qpe_proto_rawDescGZIP() []byte {
	file_proto_qpe_proto_rawDescOnce.Do(func() {
		file_proto_qpe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_qpe_proto_rawDesc), len(file_proto_qpe_proto_rawDesc)))
	})
	return file_proto_qpe_proto_rawDescData
}

var file_proto_qpe_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_qpe_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_proto_qpe_proto_goTypes = []any{
	(State)(0),                         // 0: qpe.State
	(CollapseReason)(0),                // 1: qpe.CollapseReason
	(*QuantumPolicy)(nil),              // 2: qpe.QuantumPolicy
	(*RegisterRequest)(nil),            // 3: qpe.RegisterRequest
	(*RegisterResponse)(nil),           // 4: qpe.RegisterResponse
	(*MeasureRequest)(nil),             // 5: qpe.MeasureRequest
	(*MeasureResponse)(nil),            // 6: qpe.MeasureResponse
	(*UncertaintyRequest)(nil),         // 7: qpe.UncertaintyRequest
	(*UncertaintyResponse)(nil),        // 8: qpe.UncertaintyResponse
	(*ObserveRequest)(nil),             // 9: qpe.ObserveRequest
	(*ObserveResponse)(nil),            // 10: qpe.ObserveResponse
	(*GetQuantumStateRequest)(nil),     // 11: qpe.GetQuantumStateRequest
	(*GetQuantumStateResponse)(nil),    // 12: qpe.GetQuantumStateResponse
	(*HealthCheckRequest)(nil),         // 13: qpe.HealthCheckRequest
	(*HealthCheckResponse)(nil),        // 14: qpe.HealthCheckResponse
	(*BatchMeasureRequest)(nil),        // 15: qpe.BatchMeasureRequest
	(*BatchMeasureResponse)(nil),       // 16: qpe.BatchMeasureResponse
	(*MetricsRequest)(nil),             // 17: qpe.MetricsRequest
	(*MetricsResponse)(nil),            // 18: qpe.MetricsResponse
	(*VerifyEntanglementRequest)(nil),  // 19: qpe.VerifyEntanglementRequest
	(*VerifyEntanglementResponse)(nil), // 20: qpe.VerifyEntanglementResponse
	nil,                                // 21: qpe.MeasureRequest.ContextEntry
	nil,                                // 22: qpe.HealthCheckResponse.DetailsEntry
	nil,                                // 23: qpe.BatchMeasureRequest.ContextEntry
	nil,                                // 24: qpe.MetricsResponse.StateDistributionEntry
	nil,                                // 25: qpe.MetricsResponse.CollapseReasonsEntry
}
var file_proto_qpe_proto_depIdxs = []int32{
	0,  // 0: qpe.QuantumPolicy.collapsed_state:type_name -> qpe.State
	2,  // 1: qpe.RegisterResponse.quantum_state:type_name -> qpe.QuantumPolicy
	21, // 2: qpe.MeasureRequest.context:type_name -> qpe.MeasureRequest.ContextEntry
	0,  // 3: qpe.MeasureResponse.state:type_name -> qpe.State
	1,  // 4: qpe.MeasureResponse.collapse_reason:type_name -> qpe.CollapseReason
	0,  // 5: qpe.ObserveResponse.state:type_name -> qpe.State
	2,  // 6: qpe.GetQuantumStateResponse.quantum_state:type_name -> qpe.QuantumPolicy
	22, // 7: qpe.HealthCheckResponse.details:type_name -> qpe.HealthCheckResponse.DetailsEntry
	23, // 8: qpe.BatchMeasureRequest.context:type_name -> qpe.BatchMeasureRequest.ContextEntry
	6,  // 9: qpe.BatchMeasureResponse.results:type_name -> qpe.MeasureResponse
	24, // 10: qpe.MetricsResponse.state_distribution:type_name -> qpe.MetricsResponse.StateDistributionEntry
	25, // 11: qpe.MetricsResponse.collapse_reasons:type_name -> qpe.MetricsResponse.CollapseReasonsEntry
	3,  // 12: qpe.QuantumPolicyEvaluator.Register:input_type -> qpe.RegisterRequest
	5,  // 13: qpe.QuantumPolicyEvaluator.Measure:input_type -> qpe.MeasureRequest
	7,  // 14: qpe.QuantumPolicyEvaluator.SetUncertainty:input_type -> qpe.UncertaintyRequest
	9,  // 15: qpe.QuantumPolicyEvaluator.Observe:input_type -> qpe.ObserveRequest
	11, // 16: qpe.QuantumPolicyEvaluator.GetQuantumState:input_type -> qpe.GetQuantumStateRequest
	13, // 17: qpe.QuantumPolicyEvaluator.HealthCheck:input_type -> qpe.HealthCheckRequest
	4,  // 18: qpe.QuantumPolicyEvaluator.Register:output_type -> qpe.RegisterResponse
	6,  // 19: qpe.QuantumPolicyEvaluator.Measure:output_type -> qpe.MeasureResponse
	8,  // 20: qpe.QuantumPolicyEvaluator.SetUncertainty:output_type -> qpe.UncertaintyResponse
	10, // 21: qpe.QuantumPolicyEvaluator.Observe:output_type -> qpe.ObserveResponse
	12, // 22: qpe.QuantumPolicyEvaluator.GetQuantumState:output_type -> qpe.GetQuantumStateResponse
	14, // 23: qpe.QuantumPolicyEvaluator.HealthCheck:output_type -> qpe.HealthCheckResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_qpe_proto_init() }
func file_proto_qpe_proto_init() {
	if File_proto_qpe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_qpe_proto_rawDesc), len(file_proto_qpe_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_qpe_proto_goTypes,
		DependencyIndexes: file_proto_qpe_proto_depIdxs,
		EnumInfos:         file_proto_qpe_proto_enumTypes,
		MessageInfos:      file_proto_qpe_proto_msgTypes,
	}.Build()
	File_proto_qpe_proto = out.File
	file_proto_qpe_proto_goTypes = nil
	file_proto_qpe_proto_depIdxs = nil
}
