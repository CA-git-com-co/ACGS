// Quantum Policy Evaluator (QPE) Protocol Buffer Definition
// ACGS-1 Constitutional Governance Enhancement
// Implements quantum-inspired policy evaluation with superposition states

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/qpe.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuantumPolicyEvaluator_Register_FullMethodName        = "/qpe.QuantumPolicyEvaluator/Register"
	QuantumPolicyEvaluator_Measure_FullMethodName         = "/qpe.QuantumPolicyEvaluator/Measure"
	QuantumPolicyEvaluator_SetUncertainty_FullMethodName  = "/qpe.QuantumPolicyEvaluator/SetUncertainty"
	QuantumPolicyEvaluator_Observe_FullMethodName         = "/qpe.QuantumPolicyEvaluator/Observe"
	QuantumPolicyEvaluator_GetQuantumState_FullMethodName = "/qpe.QuantumPolicyEvaluator/GetQuantumState"
	QuantumPolicyEvaluator_HealthCheck_FullMethodName     = "/qpe.QuantumPolicyEvaluator/HealthCheck"
)

// QuantumPolicyEvaluatorClient is the client API for QuantumPolicyEvaluator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Quantum Policy Evaluator Service
// Provides quantum-inspired policy evaluation with superposition states
type QuantumPolicyEvaluatorClient interface {
	// Register a new policy in quantum superposition
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Measure policy state (collapses superposition)
	Measure(ctx context.Context, in *MeasureRequest, opts ...grpc.CallOption) (*MeasureResponse, error)
	// Set uncertainty parameter (λ) for speed-accuracy trade-off
	SetUncertainty(ctx context.Context, in *UncertaintyRequest, opts ...grpc.CallOption) (*UncertaintyResponse, error)
	// Observer effect - force state collapse through stakeholder observation
	Observe(ctx context.Context, in *ObserveRequest, opts ...grpc.CallOption) (*ObserveResponse, error)
	// Get current quantum state without collapse (for monitoring)
	GetQuantumState(ctx context.Context, in *GetQuantumStateRequest, opts ...grpc.CallOption) (*GetQuantumStateResponse, error)
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type quantumPolicyEvaluatorClient struct {
	cc grpc.ClientConnInterface
}

func NewQuantumPolicyEvaluatorClient(cc grpc.ClientConnInterface) QuantumPolicyEvaluatorClient {
	return &quantumPolicyEvaluatorClient{cc}
}

func (c *quantumPolicyEvaluatorClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, QuantumPolicyEvaluator_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantumPolicyEvaluatorClient) Measure(ctx context.Context, in *MeasureRequest, opts ...grpc.CallOption) (*MeasureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeasureResponse)
	err := c.cc.Invoke(ctx, QuantumPolicyEvaluator_Measure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantumPolicyEvaluatorClient) SetUncertainty(ctx context.Context, in *UncertaintyRequest, opts ...grpc.CallOption) (*UncertaintyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UncertaintyResponse)
	err := c.cc.Invoke(ctx, QuantumPolicyEvaluator_SetUncertainty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantumPolicyEvaluatorClient) Observe(ctx context.Context, in *ObserveRequest, opts ...grpc.CallOption) (*ObserveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObserveResponse)
	err := c.cc.Invoke(ctx, QuantumPolicyEvaluator_Observe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantumPolicyEvaluatorClient) GetQuantumState(ctx context.Context, in *GetQuantumStateRequest, opts ...grpc.CallOption) (*GetQuantumStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuantumStateResponse)
	err := c.cc.Invoke(ctx, QuantumPolicyEvaluator_GetQuantumState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantumPolicyEvaluatorClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, QuantumPolicyEvaluator_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuantumPolicyEvaluatorServer is the server API for QuantumPolicyEvaluator service.
// All implementations must embed UnimplementedQuantumPolicyEvaluatorServer
// for forward compatibility.
//
// Quantum Policy Evaluator Service
// Provides quantum-inspired policy evaluation with superposition states
type QuantumPolicyEvaluatorServer interface {
	// Register a new policy in quantum superposition
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Measure policy state (collapses superposition)
	Measure(context.Context, *MeasureRequest) (*MeasureResponse, error)
	// Set uncertainty parameter (λ) for speed-accuracy trade-off
	SetUncertainty(context.Context, *UncertaintyRequest) (*UncertaintyResponse, error)
	// Observer effect - force state collapse through stakeholder observation
	Observe(context.Context, *ObserveRequest) (*ObserveResponse, error)
	// Get current quantum state without collapse (for monitoring)
	GetQuantumState(context.Context, *GetQuantumStateRequest) (*GetQuantumStateResponse, error)
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedQuantumPolicyEvaluatorServer()
}

// UnimplementedQuantumPolicyEvaluatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuantumPolicyEvaluatorServer struct{}

func (UnimplementedQuantumPolicyEvaluatorServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedQuantumPolicyEvaluatorServer) Measure(context.Context, *MeasureRequest) (*MeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Measure not implemented")
}
func (UnimplementedQuantumPolicyEvaluatorServer) SetUncertainty(context.Context, *UncertaintyRequest) (*UncertaintyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUncertainty not implemented")
}
func (UnimplementedQuantumPolicyEvaluatorServer) Observe(context.Context, *ObserveRequest) (*ObserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observe not implemented")
}
func (UnimplementedQuantumPolicyEvaluatorServer) GetQuantumState(context.Context, *GetQuantumStateRequest) (*GetQuantumStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuantumState not implemented")
}
func (UnimplementedQuantumPolicyEvaluatorServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedQuantumPolicyEvaluatorServer) mustEmbedUnimplementedQuantumPolicyEvaluatorServer() {
}
func (UnimplementedQuantumPolicyEvaluatorServer) testEmbeddedByValue() {}

// UnsafeQuantumPolicyEvaluatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuantumPolicyEvaluatorServer will
// result in compilation errors.
type UnsafeQuantumPolicyEvaluatorServer interface {
	mustEmbedUnimplementedQuantumPolicyEvaluatorServer()
}

func RegisterQuantumPolicyEvaluatorServer(s grpc.ServiceRegistrar, srv QuantumPolicyEvaluatorServer) {
	// If the following call pancis, it indicates UnimplementedQuantumPolicyEvaluatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuantumPolicyEvaluator_ServiceDesc, srv)
}

func _QuantumPolicyEvaluator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantumPolicyEvaluatorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantumPolicyEvaluator_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantumPolicyEvaluatorServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantumPolicyEvaluator_Measure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantumPolicyEvaluatorServer).Measure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantumPolicyEvaluator_Measure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantumPolicyEvaluatorServer).Measure(ctx, req.(*MeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantumPolicyEvaluator_SetUncertainty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncertaintyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantumPolicyEvaluatorServer).SetUncertainty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantumPolicyEvaluator_SetUncertainty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantumPolicyEvaluatorServer).SetUncertainty(ctx, req.(*UncertaintyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantumPolicyEvaluator_Observe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantumPolicyEvaluatorServer).Observe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantumPolicyEvaluator_Observe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantumPolicyEvaluatorServer).Observe(ctx, req.(*ObserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantumPolicyEvaluator_GetQuantumState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuantumStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantumPolicyEvaluatorServer).GetQuantumState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantumPolicyEvaluator_GetQuantumState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantumPolicyEvaluatorServer).GetQuantumState(ctx, req.(*GetQuantumStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantumPolicyEvaluator_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantumPolicyEvaluatorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantumPolicyEvaluator_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantumPolicyEvaluatorServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuantumPolicyEvaluator_ServiceDesc is the grpc.ServiceDesc for QuantumPolicyEvaluator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuantumPolicyEvaluator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qpe.QuantumPolicyEvaluator",
	HandlerType: (*QuantumPolicyEvaluatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _QuantumPolicyEvaluator_Register_Handler,
		},
		{
			MethodName: "Measure",
			Handler:    _QuantumPolicyEvaluator_Measure_Handler,
		},
		{
			MethodName: "SetUncertainty",
			Handler:    _QuantumPolicyEvaluator_SetUncertainty_Handler,
		},
		{
			MethodName: "Observe",
			Handler:    _QuantumPolicyEvaluator_Observe_Handler,
		},
		{
			MethodName: "GetQuantumState",
			Handler:    _QuantumPolicyEvaluator_GetQuantumState_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _QuantumPolicyEvaluator_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/qpe.proto",
}
