# DGM Service Docker Compose Configuration
# Development and testing environment setup

version: '3.8'

services:
  # DGM Service Main Application
  dgm-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    container_name: acgs_dgm_service
    ports:
      - '8007:8007'
    environment:
      # Service Configuration
      - SERVICE_NAME=dgm-service
      - DGM_PORT=8007
      - DGM_HOST=0.0.0.0
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG

      # Security
      - SECRET_KEY=${SECRET_KEY:-dgm-development-secret-key-change-in-production}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000,http://localhost:8007
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,dgm-service

      # Database Configuration
      - DATABASE_URL=postgresql://acgs_user:acgs_password@postgres:5432/acgs_db
      - DATABASE_POOL_SIZE=10
      - DATABASE_MAX_OVERFLOW=20
      - DATABASE_POOL_TIMEOUT=30
      - DATABASE_POOL_RECYCLE=3600

      # Redis Configuration
      - REDIS_URL=redis://redis:6379/7
      - REDIS_MAX_CONNECTIONS=50
      - REDIS_RETRY_ON_TIMEOUT=true
      - REDIS_SOCKET_TIMEOUT=5
      - REDIS_SOCKET_CONNECT_TIMEOUT=5
      - REDIS_HEALTH_CHECK_INTERVAL=30

      # ACGS Service URLs
      - AUTH_SERVICE_URL=http://auth-service:8000
      - AC_SERVICE_URL=http://ac-service:8001
      - INTEGRITY_SERVICE_URL=http://integrity-service:8002
      - FV_SERVICE_URL=http://fv-service:8003
      - GS_SERVICE_URL=http://gs-service:8004
      - PGC_SERVICE_URL=http://pgc-service:8005
      - EC_SERVICE_URL=http://ec-service:8006

      # DGM Configuration
      - CONSTITUTIONAL_COMPLIANCE_THRESHOLD=0.8
      - IMPROVEMENT_CYCLE_INTERVAL=3600
      - MAX_IMPROVEMENT_ATTEMPTS=5
      - SAFETY_EXPLORATION_RATE=0.1
      - ARCHIVE_RETENTION_DAYS=365

      # Performance Monitoring
      - PERFORMANCE_MONITORING_ENABLED=true
      - PERFORMANCE_METRICS_INTERVAL=60
      - PERFORMANCE_ALERT_THRESHOLD=0.95

      # Foundation Models
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MODEL_TIMEOUT=30
      - MODEL_MAX_RETRIES=3

      # Bandit Algorithm
      - BANDIT_ALGORITHM=ucb
      - BANDIT_EXPLORATION_PARAMETER=2.0
      - BANDIT_DECAY_RATE=0.99

      # Monitoring
      - PROMETHEUS_ENABLED=true
      - JAEGER_ENABLED=false

      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60

    volumes:
      - ./:/app
      - dgm_logs:/app/logs
      - dgm_data:/app/data
      - dgm_cache:/app/cache
      - dgm_archive:/app/archive

    depends_on:
      - postgres
      - redis

    networks:
      - acgs_network

    restart: unless-stopped

    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8007/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # PostgreSQL Database (if not already running)
  postgres:
    image: postgres:15-alpine
    container_name: acgs_postgres_dgm
    environment:
      - POSTGRES_DB=acgs_db
      - POSTGRES_USER=acgs_user
      - POSTGRES_PASSWORD=acgs_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - acgs_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U acgs_user -d acgs_db']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache (if not already running)
  redis:
    image: redis:7-alpine
    container_name: acgs_redis_dgm
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - acgs_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# Networks
networks:
  acgs_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  dgm_logs:
    driver: local
  dgm_data:
    driver: local
  dgm_cache:
    driver: local
  dgm_archive:
    driver: local
