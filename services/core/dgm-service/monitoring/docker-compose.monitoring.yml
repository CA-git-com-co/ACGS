# Docker Compose configuration for DGM Service monitoring stack
# Includes Prometheus, Alertmanager, and Grafana with DGM-specific configurations

version: '3.8'

services:
  # Prometheus for metrics collection
  dgm-prometheus:
    image: prom/prometheus:v2.45.0
    container_name: dgm-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"  # Changed to avoid conflict with main Prometheus
    volumes:
      - ./prometheus-dgm.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - dgm-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.notification-queue-capacity=10000'
    networks:
      - dgm-monitoring
      - acgs-network
    depends_on:
      - dgm-alertmanager
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Alertmanager for alert routing and notifications
  dgm-alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: dgm-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./templates:/etc/alertmanager/templates:ro
      - dgm-alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    environment:
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - PAGERDUTY_ROUTING_KEY=${PAGERDUTY_ROUTING_KEY:-}
    networks:
      - dgm-monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for visualization
  dgm-grafana:
    image: grafana/grafana:10.0.0
    container_name: dgm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - dgm-grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
    networks:
      - dgm-monitoring
    depends_on:
      - dgm-prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Node Exporter for system metrics
  dgm-node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: dgm-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - dgm-monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor for container metrics
  dgm-cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: dgm-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - dgm-monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter for cache metrics
  dgm-redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: dgm-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://dgm-redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - dgm-monitoring
      - acgs-network
    depends_on:
      - dgm-redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter for database metrics
  dgm-postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: dgm-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-dgm_user}:${POSTGRES_PASSWORD:-dgm_password}@dgm-postgres:5432/${POSTGRES_DB:-dgm_db}?sslmode=disable
    networks:
      - dgm-monitoring
      - acgs-network
    depends_on:
      - dgm-postgres
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blackbox Exporter for endpoint monitoring
  dgm-blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: dgm-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    networks:
      - dgm-monitoring
      - acgs-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9115/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for log aggregation
  dgm-loki:
    image: grafana/loki:2.8.0
    container_name: dgm-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      - dgm-loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - dgm-monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for log collection
  dgm-promtail:
    image: grafana/promtail:2.8.0
    container_name: dgm-promtail
    restart: unless-stopped
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - dgm-monitoring
    depends_on:
      - dgm-loki

# External services (assumed to be running)
  dgm-redis:
    image: redis:7-alpine
    container_name: dgm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - dgm-redis-data:/data
    networks:
      - acgs-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}

  dgm-postgres:
    image: postgres:15-alpine
    container_name: dgm-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - dgm-postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-dgm_db}
      - POSTGRES_USER=${POSTGRES_USER:-dgm_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dgm_password}
    networks:
      - acgs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dgm_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  dgm-monitoring:
    driver: bridge
    name: dgm-monitoring
  acgs-network:
    external: true
    name: acgs-network

volumes:
  dgm-prometheus-data:
    driver: local
  dgm-alertmanager-data:
    driver: local
  dgm-grafana-data:
    driver: local
  dgm-loki-data:
    driver: local
  dgm-redis-data:
    driver: local
  dgm-postgres-data:
    driver: local
