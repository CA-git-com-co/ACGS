version: '3.8'
services:
  code-analysis-engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: acgs-code-analysis-engine
    restart: unless-stopped
    ports:
    - 8107:8007
    - 9191:9091
    environment:
    - SERVICE_NAME=acgs-code-analysis-engine
    - SERVICE_PORT=8007
    - SERVICE_VERSION=1.0.0
    - ENVIRONMENT=staging
    - POSTGRESQL_HOST=postgres
    - POSTGRESQL_PORT=5432
    - POSTGRESQL_DATABASE=acgs
    - POSTGRESQL_USER=acgs_user
    - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-acgs_password}
    - POSTGRESQL_POOL_SIZE=20
    - POSTGRESQL_MAX_OVERFLOW=10
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_DB=3
    - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    - REDIS_POOL_SIZE=20
    - AUTH_SERVICE_URL=http://auth-service:8016
    - CONTEXT_SERVICE_URL=http://context-service:8012
    - SERVICE_REGISTRY_URL=http://service-registry:8001/registry
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - AUDIT_ENABLED=true
    - COMPLIANCE_STRICT_MODE=true
    - WATCH_PATHS=/workspace
    - SUPPORTED_EXTENSIONS=.py,.js,.ts,.yml,.yaml,.json,.sql,.md
    - IGNORE_PATTERNS=__pycache__,.git,node_modules,.pytest_cache,.venv,venv
    - EMBEDDING_MODEL=microsoft/codebert-base
    - EMBEDDING_BATCH_SIZE=32
    - CACHE_TTL_DEFAULT=1800
    - CACHE_TTL_SEARCH=300
    - CACHE_TTL_SYMBOLS=3600
    - MAX_CONCURRENT_REQUESTS=100
    - REQUEST_TIMEOUT_SECONDS=30
    - TARGET_P99_LATENCY_MS=10.0
    - TARGET_CACHE_HIT_RATE=0.85
    - TARGET_THROUGHPUT_RPS=100.0
    - LOG_LEVEL=INFO
    - STRUCTURED_LOGGING=true
    - ACCESS_LOG=true
    - PROMETHEUS_ENABLED=true
    - PROMETHEUS_PORT=9091
    - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
    - RATE_LIMIT_ENABLED=true
    - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development_jwt_secret_key}
    volumes:
    - /home/dislove/ACGS-2:/workspace:ro
    - code_analysis_logs:/app/logs
    - code_analysis_data:/app/data
    - ./config:/app/config:ro
    networks:
    - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_started
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8007/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
  postgres:
    image: postgres:15-alpine
    container_name: acgs-postgres
    restart: unless-stopped
    ports:
    - 5539:5432
    environment:
    - POSTGRES_DB=acgs
    - POSTGRES_USER=acgs_user
    - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD:-acgs_password}
    - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./database/migrations/001_simple_schema.sql:/docker-entrypoint-initdb.d/001_simple_schema.sql:ro
    networks:
    - acgs-network
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U acgs_user -d acgs
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  redis:
    image: redis:7-alpine
    container_name: acgs-redis
    restart: unless-stopped
    ports:
    - 6489:6379
    environment:
    - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
    - redis_data:/data
    - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
    - acgs-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  auth-service:
    image: nginx:alpine
    container_name: acgs-auth-service-mock
    restart: unless-stopped
    ports:
    - 8116:80
    volumes:
    - ./config/auth-mock.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
    - acgs-network
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  context-service:
    image: nginx:alpine
    container_name: acgs-context-service-mock
    restart: unless-stopped
    ports:
    - 8112:80
    volumes:
    - ./config/context-mock.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
    - acgs-network
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs-prometheus
    restart: unless-stopped
    ports:
    - 9190:9090
    volumes:
    - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus_data:/prometheus
    networks:
    - acgs-network
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=200h
    - --web.enable-lifecycle
  grafana:
    image: grafana/grafana:latest
    container_name: acgs-grafana
    restart: unless-stopped
    ports:
    - 3100:3000
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
    - grafana_data:/var/lib/grafana
    - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
    - acgs-network
    depends_on:
    - prometheus
networks:
  acgs-network:
    driver: bridge
    name: acgs-network
volumes:
  postgres_data:
    name: acgs-postgres-data
  redis_data:
    name: acgs-redis-data
  code_analysis_logs:
    name: acgs-code-analysis-logs
  code_analysis_data:
    name: acgs-code-analysis-data
  prometheus_data:
    name: acgs-prometheus-data
  grafana_data:
    name: acgs-grafana-data
constitutional_hash: cdd01ef066bc6cf2
