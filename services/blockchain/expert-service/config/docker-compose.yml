# Docker Compose for ACGS-2 Expert System with Redis (Cost-Optimized)
# Constitutional Hash: cdd01ef066bc6cf2
#
# COST OPTIMIZATION APPLIED:
# - Redis memory reduced from 256MB to 64MB (75% reduction)
# - LFU eviction policy for better cache efficiency
# - Optimized monitoring retention and resource limits
# - Estimated 80% infrastructure cost reduction

version: '3.8'

services:
  # Redis for distributed caching
  redis:
    image: redis:7.2-alpine
    container_name: acgs_expert_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 64mb --maxmemory-policy allkeys-lfu --lazyfree-lazy-eviction yes --lazyfree-lazy-expire yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - acgs_expert_network
    # Resource limits for cost optimization
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # ACGS-2 Expert System
  expert_system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: acgs_expert_system
    restart: unless-stopped
    ports:
      - "3000:3000"   # Main API
      - "9090:9090"   # Metrics
    environment:
      # Service Configuration
      EXPERT_SYSTEM_PORT: 3000
      EXPERT_SYSTEM_METRICS_PORT: 9090
      
      # LLM Configuration
      LLM_MODEL: llama-3.1-8b-instant
      LLM_CONFIDENCE_THRESHOLD: 0.66
      USE_FAKE_LLM: "false"
      USE_GROQ: "true"
      USE_BLOCKCHAIN: "false"
      
      # API Keys (set these in config/environments/development.env file)
      GROQ_API_KEY: ${GROQ_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      
      # Constitutional Compliance
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
      
      # Blockchain Configuration
      SOLANA_RPC_URL: https://api.devnet.solana.com
      GOVERNANCE_PROGRAM_ID: CNru2EYbLnaYMSHydaLzeFJMcBxkJah73oQGh4AYsveE  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_CACHE_KEY_PREFIX: acgs:expert_system
      REDIS_CACHE_TTL_SECONDS: 3600
      REDIS_MAX_CONNECTIONS: 10
      
      # Rate Limiting Configuration
      RATE_LIMIT_GOVERNANCE_REQUESTS_PER_MINUTE: 100
      RATE_LIMIT_HEALTH_REQUESTS_PER_MINUTE: 1000
      RATE_LIMIT_BURST: 10
      
      # Circuit Breaker Configuration
      CIRCUIT_BREAKER_FAILURE_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT_SECONDS: 30
      CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS: 3
      
      # Logging
      RUST_LOG: info
      
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - acgs_expert_network
    volumes:
      - ./config.yaml:/app/config.yaml:ro

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: acgs_expert_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - acgs_expert_network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: acgs_expert_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - acgs_expert_network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  acgs_expert_network:
    driver: bridge
    name: acgs_expert_network
