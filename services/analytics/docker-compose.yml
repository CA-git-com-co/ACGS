# ACGS Analytics Microservices Docker Compose
# Constitutional Hash: cdd01ef066bc6cf2

version: '3.8'

services:
  # NATS Message Broker
  nats:
    image: nats:2.10-alpine
    container_name: acgs-nats
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    command: [
      "--jetstream",
      "--store_dir=/data",
      "--http_port=8222"
    ]
    volumes:
      - nats_data:/data
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Quality Microservice
  data-quality-service:
    build:
      context: ./data-quality-service
      dockerfile: Dockerfile
    container_name: acgs-data-quality
    ports:
      - "8010:8010"
    environment:
      - NATS_URL=nats://nats:4222
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - LOG_LEVEL=INFO
    depends_on:
      nats:
        condition: service_healthy
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Drift Detection Microservice
  drift-detection-service:
    build:
      context: ./drift-detection-service
      dockerfile: Dockerfile
    container_name: acgs-drift-detection
    ports:
      - "8011:8011"
    environment:
      - NATS_URL=nats://nats:4222
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - LOG_LEVEL=INFO
    depends_on:
      nats:
        condition: service_healthy
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Performance Monitoring Microservice
  performance-monitoring-service:
    build:
      context: ./performance-monitoring-service
      dockerfile: Dockerfile
    container_name: acgs-performance-monitoring
    ports:
      - "8012:8012"
    environment:
      - NATS_URL=nats://nats:4222
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - LOG_LEVEL=INFO
    depends_on:
      nats:
        condition: service_healthy
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Analytics Orchestrator
  analytics-orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: acgs-analytics-orchestrator
    ports:
      - "8013:8013"
    environment:
      - NATS_URL=nats://nats:4222
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - LOG_LEVEL=INFO
    depends_on:
      nats:
        condition: service_healthy
      data-quality-service:
        condition: service_healthy
      drift-detection-service:
        condition: service_healthy
      performance-monitoring-service:
        condition: service_healthy
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: acgs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: acgs-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=acgs_analytics
      - POSTGRES_USER=acgs
      - POSTGRES_PASSWORD=acgs_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - acgs-analytics
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acgs -d acgs_analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - acgs-analytics
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: acgs-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=acgs_admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - acgs-analytics
    restart: unless-stopped

networks:
  acgs-analytics:
    driver: bridge
    name: acgs-analytics-network

volumes:
  nats_data:
    name: acgs-nats-data
  redis_data:
    name: acgs-redis-data
  postgres_data:
    name: acgs-postgres-data
  prometheus_data:
    name: acgs-prometheus-data
  grafana_data:
    name: acgs-grafana-data
