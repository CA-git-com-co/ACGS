version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: acgs-postgres-prod
    environment:
      POSTGRES_DB: acgs_production
      POSTGRES_USER: acgs_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - '5432:5432'
    networks:
      - acgs-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U acgs_user -d acgs_production']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: acgs-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - '6379:6379'
    networks:
      - acgs-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Core ACGS Services
  auth-service:
    build:
      context: ./services/platform/authentication
      dockerfile: Dockerfile.production
    container_name: acgs-auth-service-prod
    environment:
      - PORT=8000
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    env_file:
      - ./config/production.env
    ports:
      - '8000:8000'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  ac-service:
    build:
      context: ./services/core/constitutional-ai
      dockerfile: Dockerfile.production
    container_name: acgs-ac-service-prod
    environment:
      - PORT=8001
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    env_file:
      - ./config/production.env
    ports:
      - '8001:8001'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  integrity-service:
    build:
      context: ./services/platform/integrity
      dockerfile: Dockerfile.production
    container_name: acgs-integrity-service-prod
    environment:
      - PORT=8002
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
    env_file:
      - ./config/production.env
    ports:
      - '8002:8002'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8002/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  fv-service:
    build:
      context: ./services/core/formal-verification
      dockerfile: Dockerfile.production
    container_name: acgs-fv-service-prod
    environment:
      - PORT=8003
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
    env_file:
      - ./config/production.env
    ports:
      - '8003:8003'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8003/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  gs-service:
    build:
      context: ./services/core/governance-synthesis
      dockerfile: Dockerfile.production
    container_name: acgs-gs-service-prod
    environment:
      - PORT=8004
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
    env_file:
      - ./config/production.env
    ports:
      - '8004:8004'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8004/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  pgc-service:
    build:
      context: ./services/core/policy-governance
      dockerfile: Dockerfile.production
    container_name: acgs-pgc-service-prod
    environment:
      - PORT=8005
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
    env_file:
      - ./config/production.env
    ports:
      - '8005:8005'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8005/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  ec-service:
    build:
      context: ./services/core/evolutionary-computation
      dockerfile: Dockerfile.production
    container_name: acgs-ec-service-prod
    environment:
      - PORT=8006
      - DATABASE_URL=postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/6
    env_file:
      - ./config/production.env
    ports:
      - '8006:8006'
    networks:
      - acgs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8006/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    networks:
      - acgs-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: acgs-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - '3000:3000'
    networks:
      - acgs-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: acgs-nginx-prod
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - '80:80'
      - '443:443'
    networks:
      - acgs-network
    depends_on:
      - auth-service
      - ac-service
      - integrity-service
      - fv-service
      - gs-service
      - pgc-service
      - ec-service
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  acgs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
