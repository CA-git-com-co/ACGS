# ACGS-2 Production Docker Compose
# Constitutional Hash: cdd01ef066bc6cf2

version: '3.8'

x-common-environment: &common-env
  CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  DATABASE_URL: postgresql://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_db
  REDIS_URL: redis://redis:6379/0
  JWT_SECRET: ${JWT_SECRET}
  
x-common-labels: &common-labels
  - "traefik.enable=true"
  - "traefik.docker.network=acgs_network"
  - "constitutional.hash=cdd01ef066bc6cf2"

x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # Core Infrastructure Services
  
  postgres:
    image: postgres:15-alpine
    container_name: acgs_postgres
    environment:
      POSTGRES_DB: acgs_db
      POSTGRES_USER: acgs_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - acgs_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acgs_user -d acgs_db"]
      <<: *common-healthcheck
    restart: unless-stopped
    
  redis:
    image: redis:7-alpine
    container_name: acgs_redis
    environment:
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    volumes:
      - redis_data:/data
    networks:
      - acgs_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *common-healthcheck
    restart: unless-stopped
    
  # Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: acgs_traefik
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_acme:/acme.json"
    networks:
      - acgs_network
    restart: unless-stopped
    
  # ACGS-2 Core Services
  
  constitutional-core:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: constitutional-core
        SERVICE_PATH: constitutional-ai
    container_name: acgs_constitutional_core
    environment:
      <<: *common-env
      SERVICE_NAME: constitutional-core
      PORT: 8001
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.constitutional-core.rule=PathPrefix(`/api/v1/constitutional`)"
      - "traefik.http.routers.constitutional-core.tls.certresolver=letsencrypt"
      - "traefik.http.services.constitutional-core.loadbalancer.server.port=8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      <<: *common-healthcheck
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    
  auth-service:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: auth-service
        SERVICE_PATH: auth-service
    container_name: acgs_auth_service
    environment:
      <<: *common-env
      SERVICE_NAME: auth-service
      PORT: 8013
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.auth-service.rule=PathPrefix(`/api/v1/auth`)"
      - "traefik.http.routers.auth-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8013"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      <<: *common-healthcheck
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    
  monitoring-service:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: monitoring-service
        SERVICE_PATH: monitoring-service
    container_name: acgs_monitoring_service
    environment:
      <<: *common-env
      SERVICE_NAME: monitoring-service
      PORT: 8014
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.monitoring-service.rule=PathPrefix(`/api/v1/monitoring`)"
      - "traefik.http.routers.monitoring-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.monitoring-service.loadbalancer.server.port=8014"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      <<: *common-healthcheck
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    
  audit-service:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: audit-service
        SERVICE_PATH: audit-service
    container_name: acgs_audit_service
    environment:
      <<: *common-env
      SERVICE_NAME: audit-service
      PORT: 8015
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.audit-service.rule=PathPrefix(`/api/v1/audit`)"
      - "traefik.http.routers.audit-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.audit-service.loadbalancer.server.port=8015"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      <<: *common-healthcheck
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    
  gdpr-compliance:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: gdpr-compliance
        SERVICE_PATH: gdpr-compliance
    container_name: acgs_gdpr_compliance
    environment:
      <<: *common-env
      SERVICE_NAME: gdpr-compliance
      PORT: 8016
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.gdpr-compliance.rule=PathPrefix(`/api/v1/gdpr`)"
      - "traefik.http.routers.gdpr-compliance.tls.certresolver=letsencrypt"
      - "traefik.http.services.gdpr-compliance.loadbalancer.server.port=8016"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      <<: *common-healthcheck
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    
  alerting-service:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: alerting-service
        SERVICE_PATH: alerting-service
    container_name: acgs_alerting_service
    environment:
      <<: *common-env
      SERVICE_NAME: alerting-service
      PORT: 8017
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.alerting-service.rule=PathPrefix(`/api/v1/alerts`)"
      - "traefik.http.routers.alerting-service.tls.certresolver=letsencrypt"
      - "traefik.http.services.alerting-service.loadbalancer.server.port=8017"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8017/health"]
      <<: *common-healthcheck
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    
  api-gateway:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.production
      args:
        SERVICE_NAME: api-gateway
        SERVICE_PATH: api-gateway
    container_name: acgs_api_gateway
    environment:
      <<: *common-env
      SERVICE_NAME: api-gateway
      PORT: 8080
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.api-gateway.rule=PathPrefix(`/api`, `/gateway`)"
      - "traefik.http.routers.api-gateway.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8080"
      - "traefik.http.routers.api-gateway.priority=1"  # Lower priority than specific services
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      <<: *common-healthcheck
    depends_on:
      - constitutional-core
      - auth-service
      - monitoring-service
      - audit-service
      - gdpr-compliance
      - alerting-service
    restart: unless-stopped
    
  # Monitoring & Observability
  
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana:latest
    container_name: acgs_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/configs/grafana/:/etc/grafana/provisioning/
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: acgs_jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    networks:
      - acgs_network
    labels:
      <<: *common-labels
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN}`)"
      - "traefik.http.routers.jaeger.tls.certresolver=letsencrypt"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  traefik_acme:
    driver: local

networks:
  acgs_network:
    driver: bridge
    labels:
      constitutional.hash: cdd01ef066bc6cf2