# ACGS-2 Kubernetes Secrets Template
# Constitutional Hash: cdd01ef066bc6cf2
# NOTE: This is a template - replace with actual secrets in production

apiVersion: v1
kind: Secret
metadata:
  name: acgs-secrets
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: acgs-2
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  POSTGRES_PASSWORD: YWNnc19kYl9wYXNzd29yZA==  # acgs_db_password
  JWT_SECRET: YWNnc19qd3Rfc2VjcmV0X2tleQ==        # acgs_jwt_secret_key
  REDIS_PASSWORD: YWNnc19yZWRpc19wYXNzd29yZA==    # acgs_redis_password
  GRAFANA_PASSWORD: YWNnc19ncmFmYW5hX3Bhc3M=      # acgs_grafana_pass
  CONSTITUTIONAL_SIGNING_KEY: Y29uc3RpdHV0aW9uYWxfc2lnbmluZ19rZXk=  # constitutional_signing_key

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: acgs-2
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key - replace with actual certificates
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
    # Base64 encoded certificate
    LS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
    # Base64 encoded private key
    LS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==

---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: acgs-2
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6ImFjZ3MiLCJwYXNzd29yZCI6InNlY3JldCIsImVtYWlsIjoiYWNnc0BleGFtcGxlLmNvbSIsImF1dGgiOiJZV05uY3pwelpXTnlaWFE9In19fQ==

---
# Service Account for ACGS-2 services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: acgs-service-account
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: acgs-2
    app.kubernetes.io/component: service-account
imagePullSecrets:
- name: registry-credentials

---
# RBAC Role for ACGS-2 services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: acgs-service-role
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# RBAC RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: acgs-service-binding
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
subjects:
- kind: ServiceAccount
  name: acgs-service-account
  namespace: acgs-system
roleRef:
  kind: Role
  name: acgs-service-role
  apiGroup: rbac.authorization.k8s.io

---
# Cluster Role for monitoring and observability
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: acgs-monitoring-role
  labels:
    constitutional.hash: cdd01ef066bc6cf2
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Cluster RoleBinding for monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: acgs-monitoring-binding
  labels:
    constitutional.hash: cdd01ef066bc6cf2
subjects:
- kind: ServiceAccount
  name: acgs-service-account
  namespace: acgs-system
roleRef:
  kind: ClusterRole
  name: acgs-monitoring-role
  apiGroup: rbac.authorization.k8s.io