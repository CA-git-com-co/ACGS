# ACGS-2 Kubernetes ConfigMaps
# Constitutional Hash: cdd01ef066bc6cf2

apiVersion: v1
kind: ConfigMap
metadata:
  name: acgs-config
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: acgs-2
    app.kubernetes.io/component: configuration
data:
  CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
  DATABASE_URL: "postgresql://acgs_user:$(POSTGRES_PASSWORD)@postgres:5432/acgs_db"
  REDIS_URL: "redis://redis:6379/0"
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  SERVICE_MESH_ENABLED: "true"
  CONSTITUTIONAL_COMPLIANCE_REQUIRED: "true"
  PERFORMANCE_TARGETS_P99_MS: "5"
  PERFORMANCE_TARGETS_THROUGHPUT_RPS: "100"
  CONSTITUTIONAL_MONITORING_ENABLED: "true"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        constitutional_hash: cdd01ef066bc6cf2
        cluster: acgs-production

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'acgs-services'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - acgs-system
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_constitutional_hash]
          action: keep
          regex: cdd01ef066bc6cf2
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: 15s
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger:16686
      editable: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'acgs-dashboards'
      orgId: 1
      folder: 'ACGS-2'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: acgs-system
  labels:
    constitutional.hash: cdd01ef066bc6cf2
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: ingress
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Constitutional-Hash "cdd01ef066bc6cf2" always;

        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 16M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

        # Upstream services
        upstream constitutional-core {
            server constitutional-core:8001 max_fails=3 fail_timeout=30s;
        }

        upstream auth-service {
            server auth-service:8013 max_fails=3 fail_timeout=30s;
        }

        upstream monitoring-service {
            server monitoring-service:8014 max_fails=3 fail_timeout=30s;
        }

        upstream audit-service {
            server audit-service:8015 max_fails=3 fail_timeout=30s;
        }

        upstream gdpr-compliance {
            server gdpr-compliance:8016 max_fails=3 fail_timeout=30s;
        }

        upstream alerting-service {
            server alerting-service:8017 max_fails=3 fail_timeout=30s;
        }

        upstream api-gateway {
            server api-gateway:8080 max_fails=3 fail_timeout=30s;
        }

        # Logging format
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

        access_log /var/log/nginx/access.log main;

        # Health check endpoint
        server {
            listen 8080;
            server_name _;
            
            location /health {
                access_log off;
                return 200 '{"status":"healthy","constitutional_hash":"cdd01ef066bc6cf2"}\n';
                add_header Content-Type application/json;
            }
        }

        # Main server block
        server {
            listen 80;
            server_name _;

            # Rate limiting
            limit_req zone=api burst=20 nodelay;

            # API Gateway routing
            location / {
                proxy_pass http://api-gateway;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Constitutional-Hash "cdd01ef066bc6cf2";
                
                proxy_connect_timeout 5s;
                proxy_send_timeout 10s;
                proxy_read_timeout 10s;
            }

            # Direct service routing for high-priority endpoints
            location /api/v1/auth {
                limit_req zone=auth burst=10 nodelay;
                proxy_pass http://auth-service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Constitutional-Hash "cdd01ef066bc6cf2";
            }

            location /api/v1/constitutional {
                proxy_pass http://constitutional-core;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Constitutional-Hash "cdd01ef066bc6cf2";
            }
        }
    }