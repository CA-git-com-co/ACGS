# ACGS-2 Auth Service Kubernetes Deployment
# Constitutional Hash: cdd01ef066bc6cf2

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: acgs-system
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: auth-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: acgs-2
    constitutional.hash: cdd01ef066bc6cf2
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
      app.kubernetes.io/instance: auth-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-service
        app.kubernetes.io/instance: auth-service
        constitutional.hash: cdd01ef066bc6cf2
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8013"
        prometheus.io/path: "/metrics"
        constitutional.hash: cdd01ef066bc6cf2
    spec:
      serviceAccountName: acgs-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: auth-service
        image: acgs/auth-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8013
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "auth-service"
        - name: PORT
          value: "8013"
        - name: CONSTITUTIONAL_HASH
          valueFrom:
            configMapKeyRef:
              name: acgs-config
              key: CONSTITUTIONAL_HASH
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: acgs-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: acgs-config
              key: REDIS_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: acgs-secrets
              key: JWT_SECRET
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: acgs-secrets
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: acgs-system
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: auth-service
    constitutional.hash: cdd01ef066bc6cf2
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8013"
    prometheus.io/path: "/metrics"
    constitutional.hash: cdd01ef066bc6cf2
spec:
  type: ClusterIP
  ports:
  - port: 8013
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: auth-service

---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: auth-service
  namespace: acgs-system
  labels:
    app.kubernetes.io/name: auth-service
    constitutional.hash: cdd01ef066bc6cf2
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-pdb
  namespace: acgs-system
  labels:
    app.kubernetes.io/name: auth-service
    constitutional.hash: cdd01ef066bc6cf2
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
      app.kubernetes.io/instance: auth-service

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: acgs-system
  labels:
    app.kubernetes.io/name: auth-service
    constitutional.hash: cdd01ef066bc6cf2
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60