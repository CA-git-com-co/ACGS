apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: acgs-system
  labels:
    app: prometheus
    component: monitoring
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
        constitutional-hash: cdd01ef066bc6cf2
    spec:
      serviceAccountName: prometheus-sa
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
          name: prometheus
        env:
        - name: CONSTITUTIONAL_HASH
          valueFrom:
            configMapKeyRef:
              name: acgs-global-config
              key: constitutional_hash
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=30d
        - --web.enable-lifecycle
        - --web.enable-admin-api
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: monitoring-data-pvc
      nodeSelector:
        node-role.kubernetes.io/monitoring: "true"
      tolerations:
      - key: monitoring-workload
        operator: Equal
        value: "true"
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: acgs-system
  labels:
    app: prometheus
    component: monitoring
    constitutional-hash: cdd01ef066bc6cf2
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    name: prometheus
  selector:
    app: prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: acgs-system
  labels:
    app: grafana
    component: monitoring
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        constitutional-hash: cdd01ef066bc6cf2
    spec:
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: CONSTITUTIONAL_HASH
          valueFrom:
            configMapKeyRef:
              name: acgs-global-config
              key: constitutional_hash
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: acgs-monitoring-secrets
              key: grafana_admin_password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_SECURITY_ALLOW_EMBEDDING
          value: "true"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-data
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      nodeSelector:
        node-role.kubernetes.io/monitoring: "true"
      tolerations:
      - key: monitoring-workload
        operator: Equal
        value: "true"
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: acgs-system
  labels:
    app: grafana
    component: monitoring
    constitutional-hash: cdd01ef066bc6cf2
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: acgs-system
  labels:
    app: alertmanager
    component: monitoring
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        component: monitoring
        constitutional-hash: cdd01ef066bc6cf2
    spec:
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9093
          name: alertmanager
        env:
        - name: CONSTITUTIONAL_HASH
          valueFrom:
            configMapKeyRef:
              name: acgs-global-config
              key: constitutional_hash
        args:
        - --config.file=/etc/alertmanager/alertmanager.yml
        - --storage.path=/alertmanager
        - --web.external-url=http://alertmanager:9093
        - --web.route-prefix=/
        - --cluster.listen-address=0.0.0.0:9094
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        - name: alertmanager-data
          mountPath: /alertmanager
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-data
        emptyDir: {}
      nodeSelector:
        node-role.kubernetes.io/monitoring: "true"
      tolerations:
      - key: monitoring-workload
        operator: Equal
        value: "true"
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: acgs-system
  labels:
    app: alertmanager
    component: monitoring
    constitutional-hash: cdd01ef066bc6cf2
spec:
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
    name: alertmanager
  selector:
    app: alertmanager
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
  labels:
    constitutional-hash: cdd01ef066bc6cf2
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-binding
  labels:
    constitutional-hash: cdd01ef066bc6cf2
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: acgs-system
roleRef:
  kind: ClusterRole
  name: prometheus-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
data:
  grafana.ini: |
    [server]
    http_port = 3000
    root_url = %(protocol)s://%(domain)s:%(http_port)s/
    
    [database]
    type = sqlite3
    path = /var/lib/grafana/grafana.db
    
    [security]
    admin_user = admin
    cookie_secure = true
    cookie_samesite = strict
    
    [auth.anonymous]
    enabled = false
    
    [analytics]
    reporting_enabled = false
    check_for_updates = false
    
    [log]
    mode = console
    level = info
    
    [log.console]
    level = info
    format = console
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: 15s
        httpMethod: GET
        queryTimeout: 60s
        exemplarTraceIdDestinations:
          - name: trace_id
            url: http://jaeger:16686/trace/$${}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'ACGS-2 Dashboards'
      orgId: 1
      folder: 'ACGS-2'
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alertmanager@acgs.local'
      smtp_auth_username: 'alertmanager'
      smtp_auth_password: 'password'
      
    route:
      group_by: ['alertname', 'constitutional_hash']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'acgs-alerts'
      routes:
      - match:
          severity: critical
        receiver: 'acgs-critical-alerts'
      - match:
          constitutional_hash: cdd01ef066bc6cf2
        receiver: 'acgs-constitutional-alerts'
    
    receivers:
    - name: 'acgs-alerts'
      webhook_configs:
      - url: 'http://alerting-service:8017/webhook'
        send_resolved: true
        http_config:
          bearer_token: 'acgs_webhook_token'
        title: 'ACGS-2 Alert'
        text: |
          Constitutional Hash: {{ range .Alerts }}{{ .Labels.constitutional_hash }}{{ end }}
          Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}
          Description: {{ range .Alerts }}{{ .Annotations.description }}{{ end }}
    
    - name: 'acgs-critical-alerts'
      webhook_configs:
      - url: 'http://alerting-service:8017/webhook'
        send_resolved: true
        http_config:
          bearer_token: 'acgs_webhook_token'
        title: 'ACGS-2 CRITICAL Alert'
        text: |
          🚨 CRITICAL ALERT 🚨
          Constitutional Hash: {{ range .Alerts }}{{ .Labels.constitutional_hash }}{{ end }}
          Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}
          Description: {{ range .Alerts }}{{ .Annotations.description }}{{ end }}
      email_configs:
      - to: 'admin@acgs.local'
        subject: 'ACGS-2 Critical Alert'
        body: |
          🚨 CRITICAL ALERT 🚨
          Constitutional Hash: {{ range .Alerts }}{{ .Labels.constitutional_hash }}{{ end }}
          Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}
          Description: {{ range .Alerts }}{{ .Annotations.description }}{{ end }}
    
    - name: 'acgs-constitutional-alerts'
      webhook_configs:
      - url: 'http://alerting-service:8017/webhook'
        send_resolved: true
        http_config:
          bearer_token: 'acgs_webhook_token'
        title: 'ACGS-2 Constitutional Compliance Alert'
        text: |
          🏛️ CONSTITUTIONAL ALERT 🏛️
          Constitutional Hash: {{ range .Alerts }}{{ .Labels.constitutional_hash }}{{ end }}
          Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}
          Description: {{ range .Alerts }}{{ .Annotations.description }}{{ end }}
      email_configs:
      - to: 'compliance@acgs.local'
        subject: 'ACGS-2 Constitutional Compliance Alert'
        body: |
          🏛️ CONSTITUTIONAL ALERT 🏛️
          Constitutional Hash: {{ range .Alerts }}{{ .Labels.constitutional_hash }}{{ end }}
          Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}
          Description: {{ range .Alerts }}{{ .Annotations.description }}{{ end }}
    
    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'constitutional_hash']