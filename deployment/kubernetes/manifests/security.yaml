apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-default-deny
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-database-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: core
    - podSelector:
        matchLabels:
          component: agent
    - podSelector:
        matchLabels:
          component: management
    - podSelector:
        matchLabels:
          component: backup
    ports:
    - protocol: TCP
      port: 5432
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 9090
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-cache-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: core
    - podSelector:
        matchLabels:
          component: agent
    - podSelector:
        matchLabels:
          component: management
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 9090
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-core-services-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      component: core
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: agent
    - podSelector:
        matchLabels:
          component: management
    - podSelector:
        matchLabels:
          component: ingress
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8023
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          component: agent
    ports:
    - protocol: TCP
      port: 8002
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 8004
    - protocol: TCP
      port: 8005
    - protocol: TCP
      port: 8012
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-agent-services-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      component: agent
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: core
    - podSelector:
        matchLabels:
          component: agent
    - podSelector:
        matchLabels:
          component: management
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 8002
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 8004
    - protocol: TCP
      port: 8005
    - protocol: TCP
      port: 8012
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: core
    ports:
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8023
  - to:
    - podSelector:
        matchLabels:
          component: agent
    ports:
    - protocol: TCP
      port: 8002
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 8004
    - protocol: TCP
      port: 8005
    - protocol: TCP
      port: 8012
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-management-services-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      component: management
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: core
    - podSelector:
        matchLabels:
          component: agent
    - podSelector:
        matchLabels:
          component: management
    - podSelector:
        matchLabels:
          component: ingress
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 8013
    - protocol: TCP
      port: 8014
    - protocol: TCP
      port: 8015
    - protocol: TCP
      port: 8016
    - protocol: TCP
      port: 8017
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: core
    ports:
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8023
  - to:
    - podSelector:
        matchLabels:
          component: agent
    ports:
    - protocol: TCP
      port: 8002
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 8004
    - protocol: TCP
      port: 8005
    - protocol: TCP
      port: 8012
  - to:
    - podSelector:
        matchLabels:
          component: management
    ports:
    - protocol: TCP
      port: 8013
    - protocol: TCP
      port: 8014
    - protocol: TCP
      port: 8015
    - protocol: TCP
      port: 8016
    - protocol: TCP
      port: 8017
    - protocol: TCP
      port: 8080
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-monitoring-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      component: monitoring
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: ingress
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9093
  egress:
  - to:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8002
    - protocol: TCP
      port: 8003
    - protocol: TCP
      port: 8004
    - protocol: TCP
      port: 8005
    - protocol: TCP
      port: 8012
    - protocol: TCP
      port: 8013
    - protocol: TCP
      port: 8014
    - protocol: TCP
      port: 8015
    - protocol: TCP
      port: 8016
    - protocol: TCP
      port: 8017
    - protocol: TCP
      port: 8023
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9093
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-ingress-policy
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  podSelector:
    matchLabels:
      component: ingress
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: core
    ports:
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 8023
  - to:
    - podSelector:
        matchLabels:
          component: management
    ports:
    - protocol: TCP
      port: 8013
    - protocol: TCP
      port: 8014
    - protocol: TCP
      port: 8015
    - protocol: TCP
      port: 8016
    - protocol: TCP
      port: 8017
    - protocol: TCP
      port: 8080
  - to:
    - podSelector:
        matchLabels:
          component: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9093
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: acgs-system-psp
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true
  seLinux:
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: acgs-psp-user
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - acgs-system-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: acgs-psp-users
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
roleRef:
  kind: Role
  name: acgs-psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: acgs-system-sa
  namespace: acgs-system
- kind: ServiceAccount
  name: acgs-backup-sa
  namespace: acgs-system
- kind: ServiceAccount
  name: acgs-monitoring-sa
  namespace: acgs-system
- kind: ServiceAccount
  name: acgs-security-sa
  namespace: acgs-system
---
apiVersion: v1
kind: Secret
metadata:
  name: acgs-security-config
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
type: Opaque
data:
  # security_scan_enabled: true (base64 encoded)
  security_scan_enabled: dHJ1ZQ==
  # vulnerability_scan_enabled: true (base64 encoded)
  vulnerability_scan_enabled: dHJ1ZQ==
  # compliance_scan_enabled: true (base64 encoded)
  compliance_scan_enabled: dHJ1ZQ==
  # constitutional_validation_enabled: true (base64 encoded)
  constitutional_validation_enabled: dHJ1ZQ==
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: acgs-security-scan
  namespace: acgs-system
  labels:
    app: security-scan
    constitutional-hash: cdd01ef066bc6cf2
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: security-scan
            constitutional-hash: cdd01ef066bc6cf2
        spec:
          serviceAccountName: acgs-security-sa
          restartPolicy: OnFailure
          containers:
          - name: security-scanner
            image: aquasec/trivy:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "🔒 ACGS-2 Security Scan Started"
              echo "Constitutional Hash: cdd01ef066bc6cf2"
              
              # Scan container images
              trivy image --exit-code 0 --severity HIGH,CRITICAL postgres:15-alpine
              trivy image --exit-code 0 --severity HIGH,CRITICAL redis:7-alpine
              trivy image --exit-code 0 --severity HIGH,CRITICAL nginx:1.25-alpine
              trivy image --exit-code 0 --severity HIGH,CRITICAL python:3.11-slim
              
              # Scan Kubernetes configurations
              trivy config --exit-code 0 /tmp/k8s-configs/
              
              echo "✅ Security scan completed"
            env:
            - name: CONSTITUTIONAL_HASH
              value: "cdd01ef066bc6cf2"
            volumeMounts:
            - name: k8s-configs
              mountPath: /tmp/k8s-configs
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          volumes:
          - name: k8s-configs
            configMap:
              name: acgs-global-config