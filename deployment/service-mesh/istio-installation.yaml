#!/usr/bin/env bash
# ACGS-2 Istio Service Mesh Installation Script
# Constitutional Hash: cdd01ef066bc6cf2

set -euo pipefail

CONSTITUTIONAL_HASH="cdd01ef066bc6cf2"
ISTIO_VERSION="1.19.3"
NAMESPACE="acgs-system"
ISTIO_NAMESPACE="istio-system"

echo "üèõÔ∏è ACGS-2 Istio Service Mesh Installation"
echo "Constitutional Hash: $CONSTITUTIONAL_HASH"
echo "Istio Version: $ISTIO_VERSION"
echo "Target Namespace: $NAMESPACE"
echo "======================================"

# Function to check prerequisites
check_prerequisites() {
    echo "üîç Checking prerequisites..."
    
    # Check if kubectl is available
    if ! command -v kubectl &> /dev/null; then
        echo "‚ùå kubectl is not installed or not in PATH"
        exit 1
    fi
    
    # Check if Kubernetes cluster is accessible
    if ! kubectl cluster-info &> /dev/null; then
        echo "‚ùå Cannot connect to Kubernetes cluster"
        exit 1
    fi
    
    # Check if target namespace exists
    if ! kubectl get namespace $NAMESPACE &> /dev/null; then
        echo "‚ùå Target namespace $NAMESPACE does not exist"
        exit 1
    fi
    
    echo "‚úÖ Prerequisites check passed"
}

# Function to download and install Istio
install_istio() {
    echo "üì• Downloading Istio $ISTIO_VERSION..."
    
    # Download Istio
    curl -L https://istio.io/downloadIstio | ISTIO_VERSION=$ISTIO_VERSION sh -
    
    # Add istioctl to PATH
    export PATH=$PWD/istio-$ISTIO_VERSION/bin:$PATH
    
    # Verify installation
    istioctl version --remote=false
    
    echo "‚úÖ Istio downloaded and istioctl available"
}

# Function to install Istio control plane
install_control_plane() {
    echo "üöÄ Installing Istio control plane..."
    
    # Create Istio configuration
    cat <<EOF > istio-config.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: acgs-control-plane
  namespace: $ISTIO_NAMESPACE
  labels:
    constitutional-hash: $CONSTITUTIONAL_HASH
spec:
  values:
    global:
      meshID: acgs-mesh
      multiCluster:
        clusterName: acgs-cluster
      network: acgs-network
      proxy:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
    pilot:
      env:
        EXTERNAL_ISTIOD: false
        PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
        PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY: true
        PILOT_TRACE_SAMPLING: 1.0
      resources:
        requests:
          cpu: 500m
          memory: 512Mi
        limits:
          cpu: 1000m
          memory: 1Gi
    gateways:
      istio-ingressgateway:
        enabled: true
        labels:
          constitutional-hash: $CONSTITUTIONAL_HASH
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      istio-egressgateway:
        enabled: true
        labels:
          constitutional-hash: $CONSTITUTIONAL_HASH
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
  components:
    pilot:
      k8s:
        env:
        - name: CONSTITUTIONAL_HASH
          value: $CONSTITUTIONAL_HASH
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        labels:
          constitutional-hash: $CONSTITUTIONAL_HASH
        service:
          type: LoadBalancer
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        labels:
          constitutional-hash: $CONSTITUTIONAL_HASH
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
EOF
    
    # Install Istio
    istioctl install --set values.defaultRevision=default -f istio-config.yaml -y
    
    # Verify installation
    kubectl get pods -n $ISTIO_NAMESPACE
    
    echo "‚úÖ Istio control plane installed"
}

# Function to configure namespace for service mesh
configure_namespace() {
    echo "‚öôÔ∏è Configuring namespace for service mesh..."
    
    # Label namespace for automatic sidecar injection
    kubectl label namespace $NAMESPACE istio-injection=enabled --overwrite
    kubectl label namespace $NAMESPACE constitutional-hash=$CONSTITUTIONAL_HASH --overwrite
    
    # Verify namespace labels
    kubectl get namespace $NAMESPACE --show-labels
    
    echo "‚úÖ Namespace configured for service mesh"
}

# Function to install Istio addons
install_addons() {
    echo "üîß Installing Istio addons..."
    
    # Install Kiali (Service Mesh Observability)
    kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.19/samples/addons/kiali.yaml
    
    # Install Jaeger (Distributed Tracing)
    kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.19/samples/addons/jaeger.yaml
    
    # Install Prometheus (Metrics - if not already installed)
    if ! kubectl get deployment prometheus -n $NAMESPACE &> /dev/null; then
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.19/samples/addons/prometheus.yaml
    fi
    
    # Install Grafana (Visualization - if not already installed)
    if ! kubectl get deployment grafana -n $NAMESPACE &> /dev/null; then
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.19/samples/addons/grafana.yaml
    fi
    
    echo "‚úÖ Istio addons installed"
}

# Function to verify installation
verify_installation() {
    echo "üîç Verifying Istio installation..."
    
    # Check Istio components
    kubectl get pods -n $ISTIO_NAMESPACE
    
    # Check if services are ready
    kubectl wait --for=condition=ready pod -l app=istiod -n $ISTIO_NAMESPACE --timeout=300s
    kubectl wait --for=condition=ready pod -l app=istio-ingressgateway -n $ISTIO_NAMESPACE --timeout=300s
    
    # Verify configuration
    istioctl verify-install
    
    echo "‚úÖ Istio installation verified"
}

# Main installation function
main() {
    check_prerequisites
    install_istio
    install_control_plane
    configure_namespace
    install_addons
    verify_installation
    
    echo ""
    echo "üéâ ACGS-2 Istio Service Mesh Installation Complete!"
    echo "üèõÔ∏è Constitutional Hash: $CONSTITUTIONAL_HASH"
    echo "üîß Istio Version: $ISTIO_VERSION"
    echo "üìä Namespace: $NAMESPACE configured for service mesh"
    echo ""
    echo "Next steps:"
    echo "1. Deploy ACGS-2 services to enable sidecar injection"
    echo "2. Configure traffic management policies"
    echo "3. Set up security policies and mTLS"
    echo "4. Configure observability and monitoring"
}

# Run main function
main