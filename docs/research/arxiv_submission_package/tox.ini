# Constitutional Hash: cdd01ef066bc6cf2
# Tox configuration for Academic Submission System
# Tests across multiple Python versions and environments

[tox]
envlist =
    py{39,310,311,312}
    lint
    type
    security
    docs
    coverage
minversion = 4.0.0
isolated_build = true

[testenv]
# Base test environment configuration
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/unit/ tests/integration/ -v --tb=short
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
passenv =
    CI
    GITHUB_*
    CODECOV_*

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

[testenv:py312]
basepython = python3.12

# Linting environment
[testenv:lint]
deps =
    flake8>=6.0.0
    flake8-docstrings
    flake8-bugbear
    flake8-comprehensions
    flake8-import-order
commands =
    flake8 quality_assurance cli web tests --count --statistics
    flake8 quality_assurance cli web tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

# Type checking environment
[testenv:type]
deps =
    mypy>=1.5.0
    types-requests
commands =
    mypy quality_assurance cli web --ignore-missing-imports

# Security scanning environment
[testenv:security]
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r quality_assurance cli web -f json -o {toxworkdir}/bandit-report.json
    safety check --json --output {toxworkdir}/safety-report.json

# Code formatting check
[testenv:format]
deps =
    black>=23.7.0
    isort>=5.12.0
commands =
    black --check --diff quality_assurance cli web tests
    isort --check-only --diff quality_assurance cli web tests

# Documentation environment
[testenv:docs]
deps =
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
commands =
    python -c "print('Documentation available in docs/ directory')"
    python -c "import pathlib; print('Files:', list(pathlib.Path('docs').rglob('*.md')))"

# Coverage environment
[testenv:coverage]
deps =
    -r requirements.txt
    -r requirements-test.txt
    coverage[toml]>=7.2.0
commands =
    coverage erase
    coverage run -m pytest tests/unit/ tests/integration/
    coverage report --show-missing
    coverage html
    coverage xml

# Performance testing environment
[testenv:performance]
deps =
    -r requirements.txt
    -r requirements-test.txt
    pytest-benchmark>=4.0.0
commands =
    pytest tests/performance/ -v --benchmark-only --benchmark-json={toxworkdir}/benchmark.json

# Integration testing environment
[testenv:integration]
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/integration/ -v --tb=short

# Unit testing environment
[testenv:unit]
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/unit/ -v --tb=short

# Web testing environment
[testenv:web]
deps =
    -r requirements.txt
    -r requirements-test.txt
    flask>=2.3.0
commands =
    pytest tests/integration/ -v -m web --tb=short

# CLI testing environment
[testenv:cli]
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/integration/ -v -m cli --tb=short

# End-to-end testing environment
[testenv:e2e]
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/integration/test_end_to_end.py -v --tb=short

# Quick testing environment (fast feedback)
[testenv:quick]
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/unit/ -x --tb=short

# Full testing environment (all tests including slow ones)
[testenv:full]
deps =
    -r requirements.txt
    -r requirements-test.txt
commands =
    pytest tests/ -v --tb=short

# Development environment
[testenv:dev]
deps =
    -r requirements.txt
    -r requirements-test.txt
    pre-commit>=3.3.0
commands =
    pre-commit install
    pytest tests/unit/ -x --tb=short
    python -c "print('Development environment ready!')"

# Clean environment (remove generated files)
[testenv:clean]
deps =
commands =
    python -c "import shutil, pathlib; [shutil.rmtree(p, ignore_errors=True) for p in pathlib.Path('.').glob('**/__pycache__')]"
    python -c "import pathlib; [p.unlink(missing_ok=True) for p in pathlib.Path('.').glob('**/*.pyc')]"
    python -c "print('Cleanup complete!')"

# Build environment
[testenv:build]
deps =
    build>=0.10.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*

# Release environment
[testenv:release]
deps =
    build>=0.10.0
    twine>=4.0.0
commands =
    python -m build
    twine check dist/*
    python -c "print('Release package ready in dist/')"

# Configuration sections
[flake8]
max-line-length = 127
extend-ignore = E203, W503
exclude =
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv
per-file-ignores =
    tests/*:D100,D101,D102,D103,D104
    __init__.py:F401

[coverage:run]
source = quality_assurance, cli, web
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

[isort]
profile = black
line_length = 127
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[mypy]
python_version = 3.9
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
