openapi: 3.0.3
info:
  title: ACGS-1 Authentication Service API
  description: |
    Enterprise-grade authentication and authorization service for the ACGS-PGP system.
    Provides JWT token management, multi-factor authentication, and role-based access control.
  version: 3.0.0
  contact:
    name: ACGS-1 Development Team
    url: https://github.com/CA-git-com-co/ACGS
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://auth.acgs.local
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Service health check
      description: Returns the current health status of the authentication service
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /register:
    post:
      summary: Register new user
      description: Create a new user account with validation
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /token:
    post:
      summary: Authenticate user
      description: Authenticate user and receive JWT tokens
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /token/refresh:
    post:
      summary: Refresh access token
      description: Refresh expired access token using refresh token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: Logout user
      description: Revoke current session and tokens
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /me:
    get:
      summary: Get user profile
      description: Retrieve authenticated user profile
      tags:
        - User Management
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mfa/setup:
    post:
      summary: Setup multi-factor authentication
      description: Initialize MFA for the authenticated user
      tags:
        - Multi-Factor Authentication
      responses:
        '200':
          description: MFA setup initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASetupResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mfa/verify:
    post:
      summary: Verify MFA token
      description: Verify MFA token from authenticator app
      tags:
        - Multi-Factor Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFAVerifyRequest'
      responses:
        '200':
          description: MFA verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid MFA token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /metrics:
    get:
      summary: Prometheus metrics
      description: Service metrics for monitoring
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        service:
          type: string
          example: auth_service
        version:
          type: string
          example: "3.0.0"
        timestamp:
          type: string
          format: date-time
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: [connected, disconnected]
            redis:
              type: string
              enum: [connected, disconnected]

    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
        - full_name
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: Must contain uppercase, lowercase, number, and special character
        full_name:
          type: string
          minLength: 2
          maxLength: 100

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
        mfa_code:
          type: string
          description: Required if MFA is enabled

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/UserProfile'

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        full_name:
          type: string
        roles:
          type: array
          items:
            type: string
        mfa_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    MFASetupResponse:
      type: object
      properties:
        secret:
          type: string
          description: Base32 encoded secret for authenticator app
        qr_code_url:
          type: string
          description: QR code URL for easy setup
        backup_codes:
          type: array
          items:
            type: string
          description: One-time backup codes

    MFAVerifyRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          pattern: '^[0-9]{6}$'
          description: 6-digit TOTP code

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        timestamp:
          type: string
          format: date-time

    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          $ref: '#/components/schemas/UserProfile'

tags:
  - name: Health
    description: Service health and status endpoints
  - name: Authentication
    description: User authentication and token management
  - name: User Management
    description: User profile and account management
  - name: Multi-Factor Authentication
    description: MFA setup and verification
  - name: Monitoring
    description: Service monitoring and metrics
