openapi: 3.0.3
info:
  title: ACGS-1 Integrity Service API
  description: |
    Enterprise-grade cryptographic integrity, digital signature management, 
    and audit trail capabilities for the ACGS-PGP system.

    Constitutional Hash: cdd01ef066bc6cf2
  version: 3.0.0
  contact:
    name: ACGS-1 Development Team
    url: https://github.com/CA-git-com-co/ACGS
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8002
    description: Local development server
  - url: https://integrity.acgs.local
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Service health check
      description: Returns the current health status of the integrity service
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/crypto/sign:
    post:
      summary: Generate digital signature
      description: Generate digital signature for data
      tags:
        - Cryptographic Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignRequest'
      responses:
        '200':
          description: Signature generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'

  /api/v1/crypto/verify:
    post:
      summary: Verify digital signature
      description: Verify digital signature for data
      tags:
        - Cryptographic Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
      responses:
        '200':
          description: Signature verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'

  /api/v1/verify/hash:
    post:
      summary: Verify hash integrity
      description: Verify hash integrity of data
      tags:
        - Cryptographic Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HashVerifyRequest'
      responses:
        '200':
          description: Hash verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashVerifyResponse'

  /api/v1/policies:
    get:
      summary: List stored policies
      description: Retrieve all stored policies with integrity verification
      tags:
        - Policy Management
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Policies retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesResponse'

    post:
      summary: Store new policy
      description: Store new policy with digital signature
      tags:
        - Policy Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePolicyRequest'
      responses:
        '201':
          description: Policy stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'

  /api/v1/policies/{policy_id}:
    get:
      summary: Retrieve specific policy
      description: Get policy by ID with integrity verification
      tags:
        - Policy Management
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Policy retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'

  /api/v1/policies/{policy_id}/verify:
    post:
      summary: Verify policy integrity
      description: Verify integrity and signature of stored policy
      tags:
        - Policy Management
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Policy verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyVerificationResponse'

  /api/v1/pgp-assurance/certificates:
    get:
      summary: List PGP certificates
      description: Get all PGP certificates in trust store
      tags:
        - PGP Assurance
      responses:
        '200':
          description: Certificates retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatesResponse'

    post:
      summary: Add PGP certificate
      description: Add new PGP certificate to trust store
      tags:
        - PGP Assurance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCertificateRequest'
      responses:
        '201':
          description: Certificate added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponse'

  /api/v1/pgp-assurance/verify:
    post:
      summary: Verify PGP signature
      description: Verify PGP signature using trust store
      tags:
        - PGP Assurance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PGPVerifyRequest'
      responses:
        '200':
          description: PGP verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PGPVerifyResponse'

  /api/v1/audit/logs:
    get:
      summary: Retrieve audit logs
      description: Get audit logs with filtering options
      tags:
        - Audit & Logging
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
        - name: event_type
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Audit logs retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'

  /api/v1/audit/event:
    post:
      summary: Log audit event
      description: Create new audit log entry
      tags:
        - Audit & Logging
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditEventRequest'
      responses:
        '201':
          description: Audit event logged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEventResponse'

  /api/v1/integrity/check:
    post:
      summary: Perform integrity check
      description: Perform comprehensive integrity check on data
      tags:
        - Integrity Checks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrityCheckRequest'
      responses:
        '200':
          description: Integrity check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrityCheckResponse'

  /api/v1/integrity/status:
    get:
      summary: Get integrity status
      description: Get overall system integrity status
      tags:
        - Integrity Checks
      responses:
        '200':
          description: Integrity status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrityStatusResponse'

  /metrics:
    get:
      summary: Prometheus metrics
      description: Service metrics for monitoring
      tags:
        - Monitoring
      security: []
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        service:
          type: string
          example: integrity_service
        version:
          type: string
          example: '3.0.0'
        constitutional_hash:
          type: string
          example: 'cdd01ef066bc6cf2'
        timestamp:
          type: string
          format: date-time

    SignRequest:
      type: object
      required:
        - data
        - algorithm
      properties:
        data:
          type: string
          description: Data to sign (base64 encoded)
        algorithm:
          type: string
          enum: [RSA, ECDSA]
          default: RSA
        key_id:
          type: string
          description: Key ID to use for signing

    SignResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            signature:
              type: string
              description: Digital signature (base64 encoded)
            algorithm:
              type: string
            key_id:
              type: string
            timestamp:
              type: string
              format: date-time

    VerifyRequest:
      type: object
      required:
        - data
        - signature
        - public_key
      properties:
        data:
          type: string
          description: Original data (base64 encoded)
        signature:
          type: string
          description: Digital signature (base64 encoded)
        public_key:
          type: string
          description: Public key for verification
        algorithm:
          type: string
          enum: [RSA, ECDSA]

    VerifyResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            valid:
              type: boolean
            algorithm:
              type: string
            key_size:
              type: integer
            timestamp:
              type: string
              format: date-time

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        constitutional_hash:
          type: string
          example: 'cdd01ef066bc6cf2'
        timestamp:
          type: string
          format: date-time

tags:
  - name: Health
    description: Service health and status endpoints
  - name: Cryptographic Operations
    description: Digital signatures and cryptographic operations
  - name: Policy Management
    description: Secure policy storage and retrieval
  - name: PGP Assurance
    description: PGP certificate management and verification
  - name: Audit & Logging
    description: Audit trail and logging operations
  - name: Integrity Checks
    description: Data integrity verification
  - name: Monitoring
    description: Service monitoring and metrics
