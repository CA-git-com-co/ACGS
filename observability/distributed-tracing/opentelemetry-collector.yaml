apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
data:
  otel-collector-config.yaml: |
    # ACGS-2 OpenTelemetry Collector Configuration
    # Constitutional Hash: cdd01ef066bc6cf2
    
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
      memory_ballast:
        size_mib: 512
        
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_binary:
            endpoint: 0.0.0.0:6832
      zipkin:
        endpoint: 0.0.0.0:9411
      prometheus:
        config:
          scrape_configs:
          - job_name: 'acgs-services'
            scrape_interval: 30s
            static_configs:
            - targets: ['constitutional-core:8001', 'groqcloud-policy:8023', 'auth-service:8013']
            params:
              constitutional_hash: ['cdd01ef066bc6cf2']
          - job_name: 'istio-proxy'
            scrape_interval: 30s
            kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                - acgs-system
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status]
              action: keep
              regex: '.*'
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
              
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      memory_limiter:
        check_interval: 1s
        limit_mib: 1024
      resource:
        attributes:
        - key: constitutional_hash
          value: "cdd01ef066bc6cf2"
          action: insert
        - key: environment
          value: "production"
          action: insert
        - key: service.version
          value: "v1.0.0"
          action: insert
        - key: k8s.cluster.name
          value: "acgs-cluster"
          action: insert
        - key: k8s.namespace.name
          from_attribute: k8s.namespace.name
          action: insert
        - key: k8s.pod.name
          from_attribute: k8s.pod.name
          action: insert
        - key: k8s.container.name
          from_attribute: k8s.container.name
          action: insert
      attributes:
        actions:
        - key: constitutional_compliance
          value: "monitored"
          action: insert
        - key: trace_source
          value: "acgs-2"
          action: insert
      span:
        name:
          from_attributes: ["http.method", "http.route"]
          separator: " "
        include:
          match_type: regexp
          services: ["constitutional-.*", "groqcloud-.*", "auth-.*", "api-.*"]
      filter:
        traces:
          span:
          - 'attributes["constitutional_hash"] == "cdd01ef066bc6cf2"'
          - 'attributes["http.status_code"] != nil'
          - 'duration > 1000000'  # Only traces longer than 1ms
      probabilistic_sampler:
        sampling_percentage: 100
        hash_seed: 42
      tail_sampling:
        decision_wait: 10s
        num_traces: 100000
        expected_new_traces_per_sec: 1000
        policies:
        - name: constitutional_compliance
          type: string_attribute
          string_attribute:
            key: constitutional_hash
            values: ["cdd01ef066bc6cf2"]
        - name: errors
          type: status_code
          status_code:
            status_codes: [ERROR]
        - name: slow_requests
          type: latency
          latency:
            threshold_ms: 5
        - name: high_throughput_sampling
          type: probabilistic
          probabilistic:
            sampling_percentage: 10
            
    exporters:
      jaeger:
        endpoint: jaeger-collector.jaeger-system.svc.cluster.local:14250
        tls:
          insecure: true
        headers:
          constitutional-hash: "cdd01ef066bc6cf2"
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: acgs
        const_labels:
          constitutional_hash: "cdd01ef066bc6cf2"
          environment: "production"
          cluster: "acgs-cluster"
        metric_expiration: 180m
        resource_to_telemetry_conversion:
          enabled: true
      logging:
        loglevel: debug
        development: false
      otlp/jaeger:
        endpoint: jaeger-collector.jaeger-system.svc.cluster.local:4317
        tls:
          insecure: true
        headers:
          constitutional-hash: "cdd01ef066bc6cf2"
      elasticsearch:
        endpoints: ["http://elasticsearch.jaeger-system.svc.cluster.local:9200"]
        index: acgs-traces
        pipeline: acgs-trace-pipeline
        headers:
          constitutional-hash: "cdd01ef066bc6cf2"
        auth:
          authenticator: basicauth/elasticsearch
          
    service:
      extensions: [health_check, pprof, zpages, memory_ballast]
      pipelines:
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [memory_limiter, resource, attributes, span, filter, batch, tail_sampling]
          exporters: [jaeger, otlp/jaeger, elasticsearch, logging]
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, resource, attributes, batch]
          exporters: [prometheus, logging]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, attributes, batch]
          exporters: [elasticsearch, logging]
      telemetry:
        logs:
          level: "debug"
        metrics:
          level: "detailed"
          address: "0.0.0.0:8888"
          readers:
          - periodic:
              interval: 30s
              timeout: 10s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: acgs-system
  labels:
    app: otel-collector
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
        constitutional-hash: cdd01ef066bc6cf2
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8889"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: otel-collector
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.86.0
        command:
        - "/otelcol-contrib"
        - "--config=/etc/otel-collector-config.yaml"
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 14250
          name: jaeger-grpc
        - containerPort: 14268
          name: jaeger-http
        - containerPort: 6831
          name: jaeger-compact
          protocol: UDP
        - containerPort: 6832
          name: jaeger-binary
          protocol: UDP
        - containerPort: 9411
          name: zipkin
        - containerPort: 8889
          name: prometheus
        - containerPort: 8888
          name: metrics
        - containerPort: 13133
          name: health-check
        - containerPort: 55679
          name: zpages
        - containerPort: 1777
          name: pprof
        env:
        - name: CONSTITUTIONAL_HASH
          value: "cdd01ef066bc6cf2"
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "k8s.cluster.name=acgs-cluster,k8s.namespace.name=$(K8S_POD_NAMESPACE),k8s.pod.name=$(K8S_POD_NAME),k8s.node.name=$(K8S_NODE_NAME),constitutional_hash=cdd01ef066bc6cf2"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: otel-collector-config
          mountPath: /etc/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      volumes:
      - name: otel-collector-config
        configMap:
          name: otel-collector-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: acgs-system
  labels:
    app: otel-collector
    constitutional-hash: cdd01ef066bc6cf2
spec:
  type: ClusterIP
  ports:
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    name: otlp-http
  - port: 14250
    targetPort: 14250
    name: jaeger-grpc
  - port: 14268
    targetPort: 14268
    name: jaeger-http
  - port: 6831
    targetPort: 6831
    name: jaeger-compact
    protocol: UDP
  - port: 6832
    targetPort: 6832
    name: jaeger-binary
    protocol: UDP
  - port: 9411
    targetPort: 9411
    name: zipkin
  - port: 8889
    targetPort: 8889
    name: prometheus
  - port: 8888
    targetPort: 8888
    name: metrics
  - port: 13133
    targetPort: 13133
    name: health-check
  - port: 55679
    targetPort: 55679
    name: zpages
  - port: 1777
    targetPort: 1777
    name: pprof
  selector:
    app: otel-collector
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
  labels:
    constitutional-hash: cdd01ef066bc6cf2
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "services", "endpoints", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
  labels:
    constitutional-hash: cdd01ef066bc6cf2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
- kind: ServiceAccount
  name: otel-collector
  namespace: acgs-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-trace-pipeline-config
  namespace: acgs-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
data:
  pipeline-config.yaml: |
    # ACGS-2 Trace Processing Pipeline Configuration
    # Constitutional Hash: cdd01ef066bc6cf2
    
    trace_processors:
      - name: "constitutional_validator"
        type: "custom"
        config:
          validation_rules:
          - name: "constitutional_hash_present"
            condition: "attributes.constitutional_hash == 'cdd01ef066bc6cf2'"
            action: "tag"
            tag: "constitutional_compliant"
          - name: "service_identification"
            condition: "resource.service.name != nil"
            action: "enrich"
            attributes:
              service_tier: "acgs-core"
              environment: "production"
              
      - name: "performance_analyzer"
        type: "custom"
        config:
          latency_thresholds:
            p50: 1000000  # 1ms in nanoseconds
            p95: 3000000  # 3ms
            p99: 5000000  # 5ms
          throughput_thresholds:
            rps_minimum: 100
            rps_target: 1000
          alert_conditions:
          - name: "high_latency"
            condition: "duration > 5000000"
            severity: "warning"
            action: "tag"
            tag: "high_latency"
          - name: "error_rate"
            condition: "status.code == 'ERROR'"
            severity: "critical"
            action: "alert"
            
      - name: "constitutional_enricher"
        type: "custom"
        config:
          enrichment_rules:
          - add_attribute:
              key: "constitutional_compliance_status"
              value: "validated"
          - add_attribute:
              key: "acgs_version"
              value: "v1.0.0"
          - add_attribute:
              key: "compliance_framework"
              value: "constitutional_ai"
          - add_resource_attribute:
              key: "deployment_environment"
              value: "production"
              
      - name: "security_analyzer"
        type: "custom"
        config:
          security_checks:
          - name: "mutual_tls_validation"
            condition: "attributes.tls_version != nil"
            action: "tag"
            tag: "tls_secured"
          - name: "authentication_check"
            condition: "attributes.user_id != nil or attributes.service_account != nil"
            action: "tag"
            tag: "authenticated"
          - name: "authorization_check"
            condition: "attributes.authorized == true"
            action: "tag"
            tag: "authorized"
            
    sampling_strategies:
      default_strategy:
        type: "probabilistic"
        param: 1.0
        max_traces_per_second: 1000
        
      per_service_strategies:
      - service: "constitutional-core"
        type: "probabilistic"
        param: 1.0
        max_traces_per_second: 1000
        operation_strategies:
        - operation: "constitutional_validation"
          type: "probabilistic"
          param: 1.0
        - operation: "consensus_processing"
          type: "probabilistic"
          param: 1.0
          
      - service: "groqcloud-policy"
        type: "probabilistic"
        param: 1.0
        max_traces_per_second: 500
        operation_strategies:
        - operation: "policy_evaluation"
          type: "probabilistic"
          param: 1.0
        - operation: "model_inference"
          type: "probabilistic"
          param: 0.8
          
      - service: "auth-service"
        type: "probabilistic"
        param: 1.0
        max_traces_per_second: 200
        operation_strategies:
        - operation: "token_validation"
          type: "probabilistic"
          param: 1.0
        - operation: "user_authentication"
          type: "probabilistic"
          param: 1.0
          
      per_operation_strategies:
      - operation: "health_check"
        type: "probabilistic"
        param: 0.01
      - operation: "metrics_collection"
        type: "probabilistic"
        param: 0.1
      - operation: "error_handling"
        type: "probabilistic"
        param: 1.0
        
    retention_policies:
      default_ttl: "168h"  # 7 days
      
      service_specific_ttl:
        "constitutional-core": "720h"  # 30 days
        "groqcloud-policy": "720h"    # 30 days
        "auth-service": "720h"        # 30 days
        "api-gateway": "168h"         # 7 days
        "monitoring-service": "168h"  # 7 days
        
      tag_based_ttl:
        "error": "2160h"              # 90 days
        "high_latency": "720h"        # 30 days
        "constitutional_compliant": "720h"  # 30 days
        "security_violation": "2160h" # 90 days
        
    export_policies:
      elasticsearch:
        index_prefix: "acgs-traces"
        template_name: "acgs-trace-template"
        index_patterns: ["acgs-traces-*"]
        settings:
          number_of_shards: 3
          number_of_replicas: 1
          refresh_interval: "30s"
        mappings:
          properties:
            constitutional_hash:
              type: keyword
            trace_id:
              type: keyword
            span_id:
              type: keyword
            service_name:
              type: keyword
            operation_name:
              type: keyword
            start_time:
              type: date
            duration:
              type: long
            status_code:
              type: keyword
            constitutional_compliance_status:
              type: keyword
            performance_tier:
              type: keyword
              
      jaeger:
        batch_size: 1000
        timeout: "30s"
        retry_config:
          max_retries: 3
          initial_interval: "1s"
          max_interval: "30s"
          multiplier: 2.0