[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[project]
name = "acgs-pgp"
version = "3.0.0"
description = "ACGS-PGP: Advanced Constitutional Governance System with Pragmatic Governance Protocol"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.10"
authors = [
    { name = "ACGS Team", email = "info@soln.ai" },
    { name = "Martin Lyu", email = "info@soln.ai" },
]
keywords = [
    "acgs",
    "constitutional",
    "governance",
    "ai",
    "blockchain",
    "solana",
    "monorepo",
    "workspace"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core Framework
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "pydantic>=2.10.5",
    "pydantic-settings>=2.7.1",
    "httpx>=0.28.1",

    # Database & Storage
    "redis>=5.0.1",
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.7",

    # Authentication & Security
    "cryptography>=44.0.1",  # Security fix: updated to address OpenSSL vulnerabilities
    "pyjwt>=2.10.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.10",

    # Monitoring & Observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api==1.21.0",
    "opentelemetry-sdk==1.21.0",
    "opentelemetry-instrumentation-fastapi==0.42b0",

    # AI/ML Models & Frameworks
    "anthropic>=0.3.11",
    "openai>=1.3.0",
    "google-generativeai>=0.3.0",
    "torch>=2.4.0,<2.6.0",  # Security fix: use stable version without known vulnerabilities
    "transformers>=4.30.0",
    "numpy>=1.24.0,<=1.26.4",
    "scipy>=1.10.0",

    # NeMo-Skills moved to optional dependencies due to conflicts

    # Utilities & CLI
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.7",
    "rich>=13.6.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.0.0",

    # Data Processing
    "pandas>=2.0.0",
    "polars>=0.20.0",
    "pyarrow>=12.0.0",

    # Networking & Communication
    "websockets>=11.0.0",
    "aioredis>=2.0.0",
    "celery>=5.3.0",

    # Configuration & Validation
    "jsonschema>=4.17.0",
    "marshmallow>=3.19.0",
    "cerberus>=1.3.4",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.7.0",
    "pytest-faker>=2.0.0",
    "coverage>=7.3.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "ruff>=0.1.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.7.0",
    "pytest-faker>=2.0.0",
    "httpx>=0.28.1",
    "faker>=19.0.0",
]

# ML/AI specific dependencies
ml = [
    "scikit-learn>=1.3.0",
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0",
    "optuna>=3.3.0",
    "mlflow>=2.6.0",
    "wandb>=0.15.0",
    "tensorboard>=2.14.0",
]

# NVIDIA NeMo-Skills (disabled temporarily due to dependency conflicts)
# nemo = [
#     "nemo-skills @ git+https://github.com/NVIDIA/NeMo-Skills.git",
# ]

# Blockchain dependencies
blockchain = [
    "web3>=6.9.0",
    "eth-account>=0.9.0",
    "solana>=0.30.0",
    "solders>=0.18.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
]

# Production dependencies
prod = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.5",
]

# All dependencies for complete development environment
all = [
    "acgs-pgp[dev,test,ml,blockchain,docs,prod]"
]

[project.urls]
Homepage = "https://github.com/CA-git-com-co/ACGS"
Documentation = "https://github.com/CA-git-com-co/ACGS/tree/master/integrations/data-flywheel"
Repository = "https://github.com/CA-git-com-co/ACGS.git"
Issues = "https://github.com/CA-git-com-co/ACGS/issues"

[project.scripts]
acgs = "services.cli.main:app"
acgs-server = "services.main:main"
acgs-worker = "services.worker.main:main"
acgs-migrate = "services.database.migrate:main"

[tool.hatch.build.targets.wheel]
packages = ["services", "scripts", "tools"]



[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
    "elasticsearch.*",
    "pymongo.*",
    "motor.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --tb=short"
testpaths = [
    "tests",
    "services",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
    "constitutional: marks tests related to constitutional governance",
    "timeout: set a timeout for a test",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["services"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
