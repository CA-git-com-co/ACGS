[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project]
name = "acgs-pgp"
version = "3.0.0"
description = "ACGS-PGP: Advanced Constitutional Governance System with Pragmatic Governance Protocol"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.10"
keywords = [ "acgs", "constitutional", "governance", "ai", "blockchain", "solana", "monorepo", "workspace",]
classifiers = [ "Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries :: Python Modules",]

# Core runtime dependencies - essential for all services
dependencies = [
    # Core Web Framework
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "pydantic>=2.10.5",
    "pydantic-settings>=2.7.1",
    
    # Database and Storage
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    "redis>=5.0.1",
    
    # HTTP and Networking
    "httpx>=0.28.1",
    "aiohttp>=3.9.0",
    "aiofiles>=23.0.0",
    
    # Security and Authentication
    "cryptography>=45.0.4",
    "pyjwt[crypto]>=2.10.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    
    # Configuration and Environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.7",
    "rich>=13.6.0",
    "typer>=0.9.0",
    
    # Monitoring and Observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.34.1",
    "opentelemetry-sdk>=1.34.1",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    
    # Core Utilities
    "requests>=2.32.4",
    "urllib3>=2.5.0",
    "certifi>=2025.6.15",
    "setuptools>=80.9.0",
    
    # Additional Performance and Utilities
    "redis>=5.0.0",  # Use redis-py instead of aioredis for Python 3.12 compatibility
    "cachetools>=5.3.2",
    "orjson>=3.9.10",
    "msgpack>=1.0.7",
    
    # Async Support  
    "anyio>=4.1.0",
    "websockets>=12.0",
    
    # Validation and Parsing
    "email-validator>=2.1.0",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    
    # Monitoring Extensions
    "prometheus-fastapi-instrumentator>=6.1.0", 
    "structlog>=23.2.0",
]
dynamic = []
[[project.authors]]
name = "ACGS Team"
email = "info@soln.ai"

[[project.authors]]
name = "Martin Lyu"
email = "info@soln.ai"

[project.optional-dependencies]
# AI and Machine Learning models
ai = [
    "anthropic>=0.8.0",
    "openai>=1.3.0", 
    "groq>=0.4.0",
    "google-generativeai>=0.4.0",
    "torch>=2.7.1",
    "transformers>=4.35.0",
    "sentence-transformers>=3.3.1",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
]

# Development tools and quality assurance
dev = [
    "black>=23.11.0",
    "isort>=5.12.0", 
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "ipython>=8.17.2",
    "jupyter>=1.0.0",
]

# Testing framework and utilities
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.7.0", 
    "pytest-faker>=2.0.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.2",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "responses>=0.23.3",
    "freezegun>=1.2.2",
    "fakeredis>=2.18.0",
    "pytest-postgresql>=5.0.0",
]

# Performance testing and load testing
performance = [
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
]

# Multi-agent coordination and messaging
coordination = [
    "celery>=5.3.0",
    "kombu>=5.3.0",
    "nats-py>=2.9.0",
    "kafka-python>=2.0.2",
]

# Vector databases and search
vector = [
    "qdrant-client>=1.11.3",
]

# Advanced ML features (optional)
ml = [
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0", 
    "optuna>=3.3.0",
    "mlflow>=2.6.0",
    "wandb>=0.15.0",
    "tensorboard>=2.14.0",
]

# Constitutional AI and formal verification
constitutional = [
    "z3-solver>=4.12.2.0",
    "sympy>=1.12",
    "networkx>=3.2.1",
]

# File processing and media handling
media = [
    "pillow>=10.1.0",
    "python-magic>=0.4.27",
]

# Async testing frameworks  
async-test = [
    "trio>=0.23.1",
    "phonenumbers>=8.13.26",
]

# Blockchain integration (optional) 
blockchain = [
    "web3>=6.9.0",
    "eth-account>=0.9.0",
    "solana>=0.30.0",
    "solders>=0.18.0",
]

# Documentation generation
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0", 
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
]

# Production deployment
prod = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.5",
]

# Complete development environment
all = [
    "acgs-pgp[ai,dev,test,performance,coordination,vector,constitutional,media,async-test,docs]"
]

[project.urls]
Homepage = "https://github.com/CA-git-com-co/ACGS"
Documentation = "https://github.com/CA-git-com-co/ACGS/tree/master/integrations/data-flywheel"
Repository = "https://github.com/CA-git-com-co/ACGS.git"
Issues = "https://github.com/CA-git-com-co/ACGS/issues"

[project.scripts]
acgs = "services.cli.main:app"
acgs-server = "services.main:main"
acgs-worker = "services.worker.main:main"
acgs-migrate = "services.database.migrate:main"

[tool.black]
line-length = 88
target-version = [ "py310", "py311", "py312",]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | build\n  | dist\n)/\n"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true
[[tool.mypy.overrides]]
module = [ "celery.*", "kombu.*", "elasticsearch.*", "pymongo.*", "motor.*", "redis.*", "prometheus_client.*", "anthropic.*", "openai.*", "google.*", "groq.*", "torch.*", "transformers.*", "sentence_transformers.*", "sklearn.*", "xgboost.*", "lightgbm.*", "optuna.*", "mlflow.*", "wandb.*",]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [ "services.core.*", "services.shared.*",]
disallow_any_generics = true
disallow_untyped_defs = true

[tool.ruff]
target-version = "py310"
line-length = 88
preview = true
show-fixes = true
output-format = "grouped"
select = [ "E", "W", "F", "I", "B", "C4", "UP", "N", "S", "T20", "PT", "RET", "SIM", "ARG", "PTH", "ERA", "PL", "RUF", "A", "BLE", "C90", "DJ", "DTZ", "EM", "FBT", "G", "ICN", "INP", "ISC", "LOG", "PERF", "PIE", "Q", "RSE", "SLF", "SLOT", "TID", "TCH", "TRY", "FLY", "NPY", "PD", "FURB",]
ignore = [ "E501", "B008", "C901", "S101", "S603", "S607", "PLR0913", "PLR0915", "PLR2004", "RUF012", "FBT001", "FBT002", "EM101", "EM102", "TRY003", "G004", "DJ008",]

[tool.bandit]
exclude_dirs = [ "tests", "test_*", "*_test.py", "docs", "migrations", ".pytest_cache", "__pycache__",]
skips = [ "B101", "B601", "B603",]
tests = [ "B102", "B103", "B104", "B105", "B106", "B107", "B108", "B110", "B112", "B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B322", "B323", "B324", "B325", "B401", "B402", "B403", "B404", "B405", "B406", "B407", "B408", "B409", "B410", "B411", "B412", "B413", "B501", "B502", "B503", "B504", "B505", "B506", "B507", "B601", "B602", "B604", "B605", "B606", "B607", "B608", "B609", "B610", "B611", "B701", "B702", "B703",]
confidence = "HIGH"
severity = "MEDIUM"

[tool.uv]
index-strategy = "unsafe-best-match"
resolution = "highest"
compile-bytecode = true

[tool.acgs]
constitutional_hash = "cdd01ef066bc6cf2"
version = "2.0.0"
last_updated = "2025-07-02T20:21:18.940076+00:00"
dependency_manager = "uv"
security_scan_enabled = true
code_quality_validation = true
black_config_validated = true
isort_config_validated = true
mypy_config_validated = true

[tool.ruff.per-file-ignores]
"__init__.py" = [ "F401",]
"tests/*" = [ "B011", "S101", "ARG001", "PLR2004",]
"scripts/*" = [ "T20", "S603", "S607",]
"**/conftest.py" = [ "F401", "F403",]

[tool.ruff.isort]
known-first-party = [ "services", "scripts", "tools", "core",]
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[tool.hatch.metadata]
allow-direct-references = true

[tool.pytest.ini_options]
minversion = "7.4"
addopts = [ "-ra", "-q", "--strict-markers", "--strict-config", "--tb=short", "--maxfail=10", "--cov=services", "--cov=tests/shared", "--cov=infrastructure/monitoring", "--cov-report=term-missing", "--cov-report=html:test_reports/htmlcov", "--cov-report=xml:test_reports/coverage.xml", "--cov-report=json:test_reports/coverage.json", "--cov-fail-under=90", "--cov-branch", "--durations=10", "--junitxml=test_reports/junit.xml",]
testpaths = [ "tests", "services",]
python_files = [ "test_*.py", "*_test.py",]
python_classes = [ "Test*",]
python_functions = [ "test_*",]
markers = [ "slow: marks tests as slow (deselect with '-m \"not slow\"')", "integration: marks tests as integration tests", "unit: marks tests as unit tests", "e2e: marks tests as end-to-end tests", "performance: marks tests as performance tests", "stress: marks tests as stress tests", "security: marks tests as security tests", "benchmark: marks tests as benchmark tests", "constitutional: marks tests related to constitutional governance", "timeout: set a timeout for a test", "gpu: marks tests that require GPU", "network: marks tests that require network access", "database: marks tests that require database", "redis: marks tests that require Redis", "ci: marks tests that should run in CI", "local: marks tests that should only run locally", "smoke: marks smoke tests for quick validation", "regression: marks regression tests",]
filterwarnings = [ "ignore::DeprecationWarning", "ignore::PendingDeprecationWarning", "ignore::pytest.PytestUnraisableExceptionWarning", "ignore::UserWarning", "ignore::RuntimeWarning", "error::FutureWarning",]
asyncio_mode = "auto"
timeout = 300
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
cache_dir = ".pytest_cache"

[tool.coverage.run]
source = [ "services", "scripts", "core",]
branch = true
parallel = true
omit = [ "*/tests/*", "*/test_*", "*_test.py", "test_*.py", "*/__pycache__/*", "*/migrations/*", "*/node_modules/*", "*/venv/*", "*/.venv/*", "setup.py", "conftest.py", "*/conftest.py", "*/site-packages/*", "*/.tox/*", "*/.pytest_cache/*", "*/reports/coverage/htmlcov/*", "*/build/*", "*/dist/*", "*/docs/*",]
data_file = ".coverage"
context = "test"

[tool.coverage.report]
precision = 2
skip_covered = false
skip_empty = false
sort = "cover"
fail_under = 80
show_missing = true
exclude_lines = [ "pragma: no cover", "pragma: nocover", "def __repr__", "def __str__", "if self.debug:", "if settings.DEBUG", "if TYPE_CHECKING:", "raise AssertionError", "raise NotImplementedError", "raise ValueError", "if 0:", "if False:", "if __name__ == .__main__.:", "class .*\\bProtocol\\):", "@(abc\\.)?abstractmethod", "@overload", "except ImportError:", "except ModuleNotFoundError:", "\\.\\.\\.", "pass",]

[tool.coverage.html]
directory = "test_reports/htmlcov"
title = "ACGS-2 Test Coverage Report"
show_contexts = true

[tool.coverage.xml]
output = "test_reports/coverage.xml"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true
show_contexts = true

[tool.hatch.build.targets.wheel]
packages = [ "services", "scripts", "tools",]
