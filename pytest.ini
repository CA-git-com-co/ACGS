[tool:pytest]
# ACGS Test Configuration
# Constitutional Compliance Hash: cdd01ef066bc6cf2

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Exclude problematic standalone files from collection
norecursedirs = tools
ignore_glob = tools/test_security_middleware_standalone.py

# Async support
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Coverage configuration
addopts = 
    --strict-markers
    --strict-config
    --cov=services
    --cov=infrastructure
    --cov=tools
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --cov-branch
    -v
    --tb=short
    --durations=10

# Custom markers
markers =
    smoke: Quick smoke tests for basic functionality
    constitutional: Tests for constitutional compliance validation
    integration: Integration tests between services
    performance: Performance and load tests
    security: Security-focused tests
    slow: Tests that take more than 5 seconds
    unit: Unit tests for individual components
    e2e: End-to-end tests
    redis: Tests requiring Redis
    postgres: Tests requiring PostgreSQL
    auth: Authentication and authorization tests
    cache: Caching-related tests
    api: API endpoint tests

# Test environment
env = 
    TESTING = true
    CONSTITUTIONAL_HASH = cdd01ef066bc6cf2
    REDIS_URL = redis://localhost:6389/15
    DATABASE_URL = postgresql+asyncpg://test:test@localhost:5439/acgs_test
    JWT_SECRET_KEY = test-secret-key-for-testing-only
    LOG_LEVEL = WARNING

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:pydantic.*
    error::pytest.PytestUnraisableExceptionWarning

# Minimum version
minversion = 7.0

# Test timeout (in seconds)
timeout = 300

# Parallel execution
# Use with: pytest -n auto
# Requires pytest-xdist
