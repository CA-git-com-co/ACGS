# Pytest configuration for ACGS-PGP testing
[tool:pytest]

# Test discovery patterns
python_files = test_*.py *_test.py tests.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = 
    tests
    src/backend/auth_service/app/tests
    src/backend/ac_service/tests
    src/backend/integrity_service/tests
    src/backend/fv_service/tests
    src/backend/gs_service/tests
    src/backend/pgc_service/tests

# Minimum version
minversion = 6.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5
    -ra

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Slow running tests
    auth: Authentication related tests
    database: Database related tests
    api: API endpoint tests
    security: Security related tests
    performance: Performance tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    critical: Critical path tests
    phase1: Phase 1 feature tests
    phase2: Phase 2 feature tests  
    phase3: Phase 3 feature tests

# Asyncio configuration
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture configuration
log_capture = true
log_level = INFO

# Warning filters
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Environment variables for testing
env = 
    TESTING = true
    DATABASE_URL = postgresql+asyncpg://acgs_user:acgs_password@localhost:5433/acgs_test_db
    SECRET_KEY = test_secret_key_for_testing_only
    CSRF_SECRET_KEY = test_csrf_secret_key_for_testing_only
    ENVIRONMENT = testing
    BACKEND_CORS_ORIGINS = http://localhost:3000,http://localhost:3001

# Timeout configuration
timeout = 300
timeout_method = thread

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */.venv/*
    */node_modules/*
    */static/*
    */media/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
