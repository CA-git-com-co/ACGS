---
# ACGS-2 Optimized CI/CD Pipeline
# Constitutional Hash: cdd01ef066bc6cf2
# Consolidates: ci.yml, ci-uv.yml, unified-ci.yml, comprehensive-testing.yml

name: üîß ACGS-2 Optimized CI/CD

"on":
  push:
    branches: [main, develop, master]
    paths:
      - '**.py'
      - '**.yml'
      - '**.yaml'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - 'tests/**'
  pull_request:
    branches: [main, develop, master]
    paths:
      - '**.py'
      - '**.yml'
      - '**.yaml'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - integration-only

env:
  CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Pre-flight checks and validation
  preflight:
    name: üîç Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      services-changed: ${{ steps.changes.outputs.services }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      constitutional-hash: ${{ steps.constitutional.outputs.hash-valid }}

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            services:
              - 'services/**'
              - 'requirements*.txt'
              - 'pyproject.toml'
            docs:
              - 'docs/**'
              - '**.md'
              - '.github/workflows/**'

      - name: üèõÔ∏è Constitutional Hash Validation
        id: constitutional
        run: |
          echo "Validating constitutional hash: $CONSTITUTIONAL_HASH"
          if grep -r "$CONSTITUTIONAL_HASH" . \
             --include="*.py" --include="*.md" --include="*.yml" \
             >/dev/null 2>&1; then
            echo "‚úÖ Constitutional hash validation passed"
            echo "hash-valid=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Constitutional hash not found in codebase"
            echo "hash-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Code quality and linting
  code-quality:
    name: üßπ Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: preflight
    if: needs.preflight.outputs.services-changed == 'true'

    strategy:
      matrix:
        check: [ruff, mypy, black, isort]
      fail-fast: false

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy black isort
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: üîç Run ${{ matrix.check }}
        run: |
          case "${{ matrix.check }}" in
            ruff)
              ruff check . --output-format=github
              ;;
            mypy)
              mypy services/ --ignore-missing-imports \
                --no-strict-optional || true
              ;;
            black)
              black --check --diff services/ scripts/ tests/
              ;;
            isort)
              isort --check-only --diff services/ scripts/ tests/
              ;;
          esac

  # Unit and integration testing
  testing:
    name: üß™ Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: preflight
    if: needs.preflight.outputs.services-changed == 'true'

    strategy:
      matrix:
        test-group: [unit, integration, e2e]
        python-version: ['3.11', '3.12']
      fail-fast: false

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-xdist
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: üèÉ‚Äç‚ôÇÔ∏è Run ${{ matrix.test-group }} tests
        run: |
          case "${{ matrix.test-group }}" in
            unit)
              pytest tests/unit/ -v --cov=services \
                --cov-report=xml --cov-report=term-missing || true
              ;;
            integration)
              pytest tests/integration/ -v --cov=services \
                --cov-append --cov-report=xml || true
              ;;
            e2e)
              pytest tests/e2e/ -v --cov=services \
                --cov-append --cov-report=xml || true
              ;;
          esac
        continue-on-error: true

      - name: üì§ Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-group }}-py${{ matrix.python-version }}
          name: ${{ matrix.test-group }}-coverage
          fail_ci_if_error: false

  # Service-specific testing
  service-testing:
    name: üîß Service Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: preflight
    if: needs.preflight.outputs.services-changed == 'true'

    strategy:
      matrix:
        service:
          - 'constitutional-ai'
          - 'integrity'
          - 'formal-verification'
          - 'governance-synthesis'
          - 'multi-agent-coordination'
          - 'authentication'
      fail-fast: false

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üß™ Test ${{ matrix.service }} service
        run: |
          # Navigate to service directory
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform_services/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/platform_services/${{ matrix.service }}"
          else
            echo "‚ö†Ô∏è Service ${{ matrix.service }} not found, skipping"
            exit 0
          fi

          cd "$SERVICE_PATH"

          # Install service-specific dependencies
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

          # Run service tests
          if [ -d "tests" ]; then
            python -m pytest tests/ -v --cov=. \
              --cov-report=term-missing || \
              echo "Tests completed with issues"
          else
            echo "No tests found for ${{ matrix.service }}"
          fi
        continue-on-error: true

  # Docker build and validation
  docker-build:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [preflight, code-quality]
    if: needs.preflight.outputs.services-changed == 'true'

    strategy:
      matrix:
        service:
          - 'constitutional-ai'
          - 'integrity'
          - 'api-gateway'
          - 'authentication'
      fail-fast: false

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîß Build Docker image for ${{ matrix.service }}
        run: |
          # Look for Dockerfile in service directory
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ] && \
             [ -f "services/core/${{ matrix.service }}/Dockerfile" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform_services/${{ matrix.service }}" ] && \
               [ -f "services/platform_services/${{ matrix.service }}/Dockerfile" ]; then
            SERVICE_PATH="services/platform_services/${{ matrix.service }}"
          elif [ -f "infrastructure/docker/Dockerfile.${{ matrix.service }}" ]; then
            # Build from infrastructure directory
            docker build \
              -f infrastructure/docker/Dockerfile.${{ matrix.service }} \
              -t acgs-${{ matrix.service }}:test .
            echo "‚úÖ Built acgs-${{ matrix.service }}:test from infrastructure"
            exit 0
          else
            echo "‚ö†Ô∏è No Dockerfile found for ${{ matrix.service }}, skipping"
            exit 0
          fi

          # Build from service directory
          cd "$SERVICE_PATH"
          docker build -t acgs-${{ matrix.service }}:test .
          echo "‚úÖ Built acgs-${{ matrix.service }}:test"
        continue-on-error: true

  # Security scanning (lightweight)
  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: preflight
    if: needs.preflight.outputs.services-changed == 'true'

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: üì¶ Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: üîç Run security scans
        run: |
          echo "üîç Running Bandit security scan..."
          bandit -r . -f json -o bandit-results.json || true

          echo "üîç Running pip-audit vulnerability scan..."
          pip-audit --format=json --output=pip-audit-results.json || true

          echo "üîç Running Safety vulnerability scan..."
          safety check --json --output=safety-results.json || true

          # Check for critical issues
          CRITICAL_ISSUES=0
          if [ -f bandit-results.json ]; then
            HIGH_BANDIT=$(cat bandit-results.json | \
              jq '.results[] | select(.issue_severity == "HIGH") | .test_id' | \
              wc -l || echo "0")
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + HIGH_BANDIT))
          fi

          if [ "$CRITICAL_ISSUES" -gt "0" ]; then
            echo "‚ùå Found $CRITICAL_ISSUES critical security issues"
            exit 1
          else
            echo "‚úÖ No critical security issues found"
          fi
        continue-on-error: false

  # Final validation and reporting
  validation:
    name: ‚úÖ Final Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - preflight
      - code-quality
      - testing
      - service-testing
      - docker-build
      - security-check
    if: always()

    steps:
      - name: üîñ Checkout code
        uses: actions/checkout@v4

      - name: üìä Generate CI Summary
        run: |
          echo "# üîß ACGS-2 CI/CD Summary" > ci-summary.md
          echo "" >> ci-summary.md
          echo "**Constitutional Hash**: \`$CONSTITUTIONAL_HASH\`" >> ci-summary.md
          echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> ci-summary.md
          echo "" >> ci-summary.md
          echo "## üìã Job Results" >> ci-summary.md
          echo "" >> ci-summary.md
          echo "| Job | Status | Details |" >> ci-summary.md
          echo "|-----|--------|---------|" >> ci-summary.md

          # Job status checks
          PREFLIGHT_STATUS="${{ needs.preflight.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
          QUALITY_STATUS="${{ needs.code-quality.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
          TESTING_STATUS="${{ needs.testing.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
          SERVICE_STATUS="${{ needs.service-testing.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
          DOCKER_STATUS="${{ needs.docker-build.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"
          SECURITY_STATUS="${{ needs.security-check.result == 'success' && '‚úÖ PASS' || '‚ùå FAIL' }}"

          echo "| Pre-flight | $PREFLIGHT_STATUS | Constitutional hash validation |" >> ci-summary.md
          echo "| Code Quality | $QUALITY_STATUS | Ruff, MyPy, Black, isort |" >> ci-summary.md
          echo "| Testing | $TESTING_STATUS | Unit, integration, e2e tests |" >> ci-summary.md
          echo "| Service Testing | $SERVICE_STATUS | Individual service validation |" >> ci-summary.md
          echo "| Docker Build | $DOCKER_STATUS | Container build verification |" >> ci-summary.md
          echo "| Security | $SECURITY_STATUS | Security vulnerability scan |" >> ci-summary.md
          echo "" >> ci-summary.md

          # Determine overall status
          if [ "${{ needs.preflight.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "## ‚úÖ Overall Status: PASSED" >> ci-summary.md
            echo "" >> ci-summary.md
            echo "All critical checks passed. Ready for deployment." >> ci-summary.md
          else
            echo "## ‚ùå Overall Status: FAILED" >> ci-summary.md
            echo "" >> ci-summary.md
            echo "Critical issues found. Review failed jobs before proceeding." >> ci-summary.md
          fi

      - name: üì§ Upload CI Summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci-summary.md
          retention-days: 30

      - name: üìù Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('ci-summary.md', 'utf8');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Could not post CI summary:', error);
            }

      - name: üö® Fail on critical issues
        if: >
          needs.preflight.result != 'success' ||
          needs.security-check.result != 'success'
        run: |
          echo "‚ùå CI/CD pipeline failed due to critical issues"
          echo "Constitutional compliance: ${{ needs.preflight.result }}"
          echo "Security check: ${{ needs.security-check.result }}"
          exit 1