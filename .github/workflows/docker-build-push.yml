name: ACGS-1 Docker Build and Push

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Simple Docker build for services that have Dockerfiles
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build
    strategy:
      matrix:
        service: [auth, ac, integrity, fv, gs, pgc, ec, constitutional-trainer, dgm-service]
      fail-fast: false
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        id: dockerfile_check
        run: |
          echo "üîç Checking for Dockerfile in service: ${{ matrix.service }}"

          # Check various possible locations for Dockerfiles
          DOCKERFILE_FOUND=false

          # Check core services with proper service name mapping
          case "${{ matrix.service }}" in
            "auth")
              if [ -f "services/platform/authentication/auth_service/Dockerfile" ]; then
                echo "dockerfile_path=services/platform/authentication/auth_service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/platform/authentication/auth_service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "ac")
              if [ -f "services/core/constitutional-ai/ac_service/Dockerfile" ]; then
                echo "dockerfile_path=services/core/constitutional-ai/ac_service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/constitutional-ai/ac_service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "integrity")
              if [ -f "services/platform/integrity/integrity_service/Dockerfile" ]; then
                echo "dockerfile_path=services/platform/integrity/integrity_service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/platform/integrity/integrity_service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "fv")
              if [ -f "services/core/formal-verification/fv_service/Dockerfile" ]; then
                echo "dockerfile_path=services/core/formal-verification/fv_service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/formal-verification/fv_service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "gs")
              if [ -f "services/core/governance-synthesis/gs_service/Dockerfile" ]; then
                echo "dockerfile_path=services/core/governance-synthesis/gs_service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/governance-synthesis/gs_service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "pgc")
              if [ -f "services/core/policy-governance/pgc_service/Dockerfile" ]; then
                echo "dockerfile_path=services/core/policy-governance/pgc_service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/policy-governance/pgc_service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "ec")
              if [ -f "services/core/evolutionary-computation/Dockerfile" ]; then
                echo "dockerfile_path=services/core/evolutionary-computation/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/evolutionary-computation" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "constitutional-trainer")
              if [ -f "services/core/constitutional-trainer/Dockerfile" ]; then
                echo "dockerfile_path=services/core/constitutional-trainer/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/constitutional-trainer" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
            "dgm-service")
              if [ -f "services/core/dgm-service/Dockerfile" ]; then
                echo "dockerfile_path=services/core/dgm-service/Dockerfile" >> $GITHUB_OUTPUT
                echo "context=services/core/dgm-service" >> $GITHUB_OUTPUT
                DOCKERFILE_FOUND=true
              fi
              ;;
          esac

          # Fallback: Check core services
          if [ "$DOCKERFILE_FOUND" = false ] && [ -f "services/core/${{ matrix.service }}/Dockerfile" ]; then
            echo "dockerfile_path=services/core/${{ matrix.service }}/Dockerfile" >> $GITHUB_OUTPUT
            echo "context=services/core/${{ matrix.service }}" >> $GITHUB_OUTPUT
            DOCKERFILE_FOUND=true
          # Check platform services
          elif [ "$DOCKERFILE_FOUND" = false ] && [ -f "services/platform/${{ matrix.service }}/Dockerfile" ]; then
            echo "dockerfile_path=services/platform/${{ matrix.service }}/Dockerfile" >> $GITHUB_OUTPUT
            echo "context=services/platform/${{ matrix.service }}" >> $GITHUB_OUTPUT
            DOCKERFILE_FOUND=true
          # Check alternative naming
          elif [ -f "services/core/${{ matrix.service }}/${{ matrix.service }}_service/Dockerfile" ]; then
            echo "dockerfile_path=services/core/${{ matrix.service }}/${{ matrix.service }}_service/Dockerfile" >> $GITHUB_OUTPUT
            echo "context=services/core/${{ matrix.service }}/${{ matrix.service }}_service" >> $GITHUB_OUTPUT
            DOCKERFILE_FOUND=true
          # Check alternative platform naming  
          elif [ -f "services/platform/${{ matrix.service }}/${{ matrix.service }}_service/Dockerfile" ]; then
            echo "dockerfile_path=services/platform/${{ matrix.service }}/${{ matrix.service }}_service/Dockerfile" >> $GITHUB_OUTPUT
            echo "context=services/platform/${{ matrix.service }}/${{ matrix.service }}_service" >> $GITHUB_OUTPUT
            DOCKERFILE_FOUND=true
          fi

          if [ "$DOCKERFILE_FOUND" = true ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Dockerfile found for ${{ matrix.service }}"
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No Dockerfile found for ${{ matrix.service }}, skipping"
          fi

      - name: Set up Docker Buildx
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.dockerfile_check.outputs.context }}
          file: ${{ steps.dockerfile_check.outputs.dockerfile_path }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build summary
        if: always()
        run: |
          echo "üê≥ Docker Build Summary for ${{ matrix.service }}"
          echo "================================="
          if [ "${{ steps.dockerfile_check.outputs.dockerfile_exists }}" = "true" ]; then
            echo "‚úÖ Dockerfile found: ${{ steps.dockerfile_check.outputs.dockerfile_path }}"
            echo "üìÅ Build context: ${{ steps.dockerfile_check.outputs.context }}"
            if [ "${{ github.event_name }}" != "pull_request" ]; then
              echo "üì§ Image pushed: Yes"
            else
              echo "üì§ Image pushed: No (PR build)"
            fi
          else
            echo "‚ö†Ô∏è No Dockerfile found, skipped build"
          fi

  # Aggregate results
  docker-results:
    runs-on: ubuntu-latest
    name: Docker Build Results
    needs: docker-build
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "üê≥ Docker Build Pipeline Results"
          echo "==============================="
          echo "Build Status: ${{ needs.docker-build.result }}"
          echo ""
          if [ "${{ needs.docker-build.result }}" = "success" ]; then
            echo "‚úÖ All Docker builds completed successfully!"
          else
            echo "‚ö†Ô∏è Some Docker builds had issues, but pipeline completed"
          fi
