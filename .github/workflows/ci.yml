name: ACGS-1 Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM for comprehensive testing

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SOLANA_CLI_VERSION: 1.18.22
  ANCHOR_CLI_VERSION: 0.29.0
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  preflight:
    runs-on: ubuntu-latest
    name: Pre-flight Checks
    outputs:
      should_run_tests: ${{ steps.determine_changes.outputs.should_run }}
      changed_components: ${{ steps.determine_changes.outputs.components }}
      rust_changed: ${{ steps.determine_changes.outputs.rust_changed }}
      python_changed: ${{ steps.determine_changes.outputs.python_changed }}
      typescript_changed: ${{ steps.determine_changes.outputs.typescript_changed }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v46
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            blockchain/**
            services/**
            src/**
            tests/**
            scripts/**
            .github/**
          files_ignore: |
            docs/**
            README.md
            *.md

      - name: Determine components and test execution
        id: determine_changes
        run: |
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "components=all" >> $GITHUB_OUTPUT
          echo "rust_changed=false" >> $GITHUB_OUTPUT
          echo "python_changed=false" >> $GITHUB_OUTPUT
          echo "typescript_changed=false" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "rust_changed=true" >> $GITHUB_OUTPUT
            echo "python_changed=true" >> $GITHUB_OUTPUT
            echo "typescript_changed=true" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changed_files.outputs.any_changed }}" == "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            changed_files_list="${{ steps.changed_files.outputs.all_changed_files }}"

            # Check for Rust/Anchor changes
            if echo "$changed_files_list" | grep -E "(blockchain/|\.rs$|Cargo\.toml|Anchor\.toml)" > /dev/null; then
              echo "rust_changed=true" >> $GITHUB_OUTPUT
            fi

            # Check for Python changes
            if echo "$changed_files_list" | grep -E "(services/|src/backend/|\.py$|requirements.*\.txt)" > /dev/null; then
              echo "python_changed=true" >> $GITHUB_OUTPUT
            fi

            # Check for TypeScript/Node.js changes
            if echo "$changed_files_list" | grep -E "(\.ts$|\.js$|package\.json|tsconfig\.json)" > /dev/null; then
              echo "typescript_changed=true" >> $GITHUB_OUTPUT
            fi
          fi

  rust_build_test:
    runs-on: ubuntu-latest
    name: Rust/Anchor Build and Test
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.rust_changed == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.75.0
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_CLI_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: Install Anchor CLI
        run: |
          npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }}
          anchor --version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: blockchain/package-lock.json

      - name: Install Node.js dependencies
        working-directory: blockchain
        run: npm ci

      - name: Rust format check
        working-directory: blockchain
        run: cargo fmt --all -- --check

      - name: Rust clippy
        working-directory: blockchain
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build Anchor programs
        working-directory: blockchain
        run: |
          solana config set --url localhost
          anchor build

      - name: Run Anchor tests
        working-directory: blockchain
        run: |
          # Start local validator in background
          solana-test-validator --reset --quiet &
          VALIDATOR_PID=$!
          sleep 10

          # Run tests
          anchor test --skip-local-validator || TEST_RESULT=$?

          # Cleanup
          kill $VALIDATOR_PID || true

          # Exit with test result
          exit ${TEST_RESULT:-0}

  security_scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  python_code_quality:
    runs-on: ubuntu-latest
    name: Python Code Quality Analysis
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.python_changed == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pytest-cov bandit[toml] safety
          # Install test dependencies
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          # Install shared dependencies
          if [ -f "services/shared/requirements.txt" ]; then
            pip install -r services/shared/requirements.txt
          fi

      - name: Code formatting check
        run: |
          # Check Python code in services and src directories
          if [ -d "services" ]; then
            black --check --diff services/
            isort --check-only --diff services/
          fi
          if [ -d "src" ]; then
            black --check --diff src/
            isort --check-only --diff src/
          fi
          if [ -d "tests" ]; then
            black --check --diff tests/
            isort --check-only --diff tests/
          fi

      - name: Linting
        run: |
          # Lint Python code
          if [ -d "services" ]; then
            flake8 services/ --max-line-length=100 --extend-ignore=E203,W503 || true
          fi
          if [ -d "src" ]; then
            flake8 src/ --max-line-length=100 --extend-ignore=E203,W503 || true
          fi
          if [ -d "tests" ]; then
            flake8 tests/ --max-line-length=100 --extend-ignore=E203,W503 || true
          fi

      - name: Type checking
        run: |
          # Type check with mypy
          if [ -d "services" ]; then
            mypy services/ --ignore-missing-imports || true
          fi
          if [ -d "src" ]; then
            mypy src/ --ignore-missing-imports || true
          fi

      - name: Security analysis
        run: |
          # Create bandit config if it doesn't exist
          if [ ! -f "pyproject.toml" ] && [ ! -f ".bandit" ]; then
            echo "[tool.bandit]" > pyproject.toml
            echo "exclude_dirs = ['tests', 'venv', '.venv', 'target']" >> pyproject.toml
          fi
          # Run bandit on source code
          bandit -r . -f json -o bandit-report.json --exclude ./tests,./venv,./.venv,./target,./blockchain/target || true

      - name: Safety scan
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 14

  python_unit_tests:
    runs-on: ubuntu-latest
    name: Python Unit Tests
    needs: [preflight, python_code_quality]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.python_changed == 'true'
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        component: ['services/core', 'services/platform', 'src/backend', 'tests']
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install test dependencies
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          # Install shared dependencies
          if [ -f "services/shared/requirements.txt" ]; then
            pip install -r services/shared/requirements.txt
          fi
          # Install component-specific dependencies if they exist
          if [ -f "${{ matrix.component }}/requirements.txt" ]; then
            pip install -r ${{ matrix.component }}/requirements.txt
          fi

      - name: Run unit tests
        run: |
          # Run tests for the specific component
          if [ -d "${{ matrix.component }}" ]; then
            if [ -d "${{ matrix.component }}/tests" ]; then
              python -m pytest ${{ matrix.component }}/tests/ -v --cov=${{ matrix.component }} --cov-report=xml --cov-report=html || true
            elif [ "${{ matrix.component }}" == "tests" ]; then
              python -m pytest tests/unit/ -v --cov=services --cov=src --cov-report=xml --cov-report=html || true
            fi
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: coverage.xml
          flags: ${{ matrix.component }}-${{ matrix.python-version }}
          name: ${{ matrix.component }}-${{ matrix.python-version }}

  build_images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [preflight, python_unit_tests]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.python_changed == 'true'
    strategy:
      matrix:
        service: [
          'constitutional-ai',
          'governance-synthesis',
          'policy-governance',
          'formal-verification',
          'evolutionary-computation',
          'authentication',
          'integrity',
          'federated-evaluation',
          'research-platform'
        ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set service path
        id: service-path
        run: |
          case "${{ matrix.service }}" in
            "constitutional-ai")
              echo "context=services/core/constitutional-ai/ac_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/constitutional-ai/ac_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "governance-synthesis")
              echo "context=services/core/governance-synthesis/gs_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/governance-synthesis/gs_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "policy-governance")
              echo "context=services/core/policy-governance/pgc_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/policy-governance/pgc_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "formal-verification")
              echo "context=services/core/formal-verification/fv_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/formal-verification/fv_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "evolutionary-computation")
              echo "context=services/core/evolutionary-computation" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/evolutionary-computation/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "authentication")
              echo "context=services/platform/authentication/auth_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/platform/authentication/auth_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "integrity")
              echo "context=services/platform/integrity/integrity_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/platform/integrity/integrity_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "federated-evaluation")
              echo "context=services/research/federated-evaluation/federated_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/research/federated-evaluation/federated_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "research-platform")
              echo "context=services/research/research-platform/research_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/research/research-platform/research_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown service: ${{ matrix.service }}"
              exit 1
              ;;
          esac

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.service-path.outputs.context }}
          file: ${{ steps.service-path.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ... (Keep your other jobs as in your original file, or let me know if you want further improvements for those.)

  notify_results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs:
      - preflight
      - rust_build_test
      - security_scan
      - python_code_quality
      - python_unit_tests
      - build_images
    if: always()
    steps:
      - name: Notify on success
        if: success() && (needs.python_unit_tests.result == 'success' || needs.python_unit_tests.result == 'skipped') && (needs.rust_build_test.result == 'success' || needs.rust_build_test.result == 'skipped')
        run: |
          echo "✅ All tests passed successfully!"
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add Slack/email notification here

      - name: Notify on failure
        if: failure() || (cancelled() && needs.preflight.outputs.should_run_tests == 'true')
        run: |
          echo "❌ Some tests or steps failed or were cancelled. Check the logs for details."
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add failure notification here

      - name: Generate test report
        run: |
          echo "# ACGS-1 CI/CD Test Report" > test-report.md
          echo "Generated: $(date)" >> test-report.md
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Overall Status Summary" >> test-report.md
          echo "- Rust/Anchor Build: ${{ needs.rust_build_test.result }}" >> test-report.md
          echo "- Security Scan: ${{ needs.security_scan.result }}" >> test-report.md
          echo "- Python Code Quality: ${{ needs.python_code_quality.result }}" >> test-report.md
          echo "- Python Unit Tests: ${{ needs.python_unit_tests.result }}" >> test-report.md
          echo "- Build Docker Images: ${{ needs.build_images.result }}" >> test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          retention-days: 14
