name: ACGS CI/CD Pipeline
# Constitutional Hash: cdd01ef066bc6cf2

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *'

env:
  CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: acgs_test
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-test.txt ]; then
            pip install -r requirements-test.txt
          elif [ -f services/shared/requirements/requirements-test.txt ]; then
            pip install -r services/shared/requirements/requirements-test.txt
          else
            # Install common test dependencies
            pip install pytest pytest-cov pytest-asyncio pytest-mock coverage
          fi
      
      - name: Run unit tests
        env:
          CONSTITUTIONAL_HASH: ${{ env.CONSTITUTIONAL_HASH }}
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/acgs_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          if [ -d "tests/unit" ]; then
            python -m pytest tests/unit/ -v --cov=services --cov-report=xml --cov-report=term
          else
            echo "No unit tests directory found, skipping unit tests"
          fi
      
      - name: Run integration tests
        env:
          CONSTITUTIONAL_HASH: ${{ env.CONSTITUTIONAL_HASH }}
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/acgs_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          if [ -d "tests/integration" ]; then
            python -m pytest tests/integration/ -v --cov=services --cov-report=xml --cov-report=term
          else
            echo "No integration tests directory found, skipping integration tests"
          fi
      
      - name: Run security tests
        run: |
          if [ -d "tests/security" ]; then
            python -m pytest tests/security/ -v
          else
            echo "No security tests directory found, skipping security tests"
          fi
      
      - name: Run constitutional compliance tests
        run: |
          if [ -f "tests/policies/test_constitutional_policies.py" ]; then
            python tests/policies/test_constitutional_policies.py
          else
            echo "No constitutional compliance tests found, using validation script"
            python scripts/testing/validate_constitutional_compliance.py --quick-check
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        if: matrix.python-version == '3.11' && always()

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit
      
      - name: Run security scan
        run: |
          # Use existing security audit script if available
          if [ -f "scripts/security/external_security_audit.py" ]; then
            python scripts/security/external_security_audit.py
          else
            echo "Running basic security scans..."
            # Run pip-audit for dependency vulnerabilities
            pip-audit --format=json --output=security-report.json || echo "pip-audit completed with warnings"
            
            # Run bandit for code security issues
            if [ -d "services" ]; then
              bandit -r services/ -f json -o bandit-report.json || echo "bandit completed with warnings"
            fi
            
            # Run safety for known vulnerabilities
            safety check --json --output safety-report.json || echo "safety check completed with warnings"
          fi
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-report.json
            bandit-report.json
            safety-report.json
          retention-days: 30
        if: always()

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark
      
      - name: Run performance tests
        run: |
          # Use existing performance validation script if available
          if [ -f "scripts/testing/performance_analyzer.py" ]; then
            python scripts/testing/performance_analyzer.py --quick-benchmark
          elif [ -d "tests/performance" ]; then
            python -m pytest tests/performance/ -v --benchmark-only
          else
            echo "No performance tests found, skipping performance validation"
          fi
      
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            benchmark-results.json
            performance-report.json
          retention-days: 30
        if: always()
