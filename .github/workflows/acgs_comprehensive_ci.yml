name: ACGS Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  COVERAGE_TARGET: "80"

jobs:
  # Constitutional Compliance Validation
  constitutional-compliance:
    name: Constitutional Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Constitutional Hash
        run: |
          echo "Validating constitutional hash: $CONSTITUTIONAL_HASH"
          
          # Check that constitutional hash is present in all required files
          MISSING_FILES=()
          
          # Check Python files
          if ! grep -r "cdd01ef066bc6cf2" services/ --include="*.py" > /dev/null; then
            MISSING_FILES+=("Python services")
          fi
          
          # Check configuration files
          if ! grep -r "cdd01ef066bc6cf2" . --include="*.json" --include="*.yaml" --include="*.yml" > /dev/null; then
            MISSING_FILES+=("Configuration files")
          fi
          
          # Check documentation
          if ! grep -r "cdd01ef066bc6cf2" docs/ --include="*.md" > /dev/null; then
            MISSING_FILES+=("Documentation")
          fi
          
          if [ ${#MISSING_FILES[@]} -ne 0 ]; then
            echo "❌ Constitutional hash missing in: ${MISSING_FILES[*]}"
            exit 1
          fi
          
          echo "✅ Constitutional compliance validated"

  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy bandit safety
          pip install -e ".[dev,test]"

      - name: Run Ruff linting
        run: |
          echo "🔍 Running Ruff linting..."
          ruff check services/ tests/ scripts/ --output-format=github

      - name: Run Black formatting check
        run: |
          echo "🎨 Checking Black formatting..."
          black --check services/ tests/ scripts/

      - name: Run isort import sorting check
        run: |
          echo "📦 Checking import sorting..."
          isort --check-only services/ tests/ scripts/

      - name: Run MyPy type checking
        run: |
          echo "🔍 Running MyPy type checking..."
          mypy services/ --ignore-missing-imports

      - name: Run Bandit security analysis
        run: |
          echo "🔒 Running Bandit security analysis..."
          bandit -r services/ -f json -o bandit-report.json
          bandit -r services/ -f txt

      - name: Run Safety dependency check
        run: |
          echo "🛡️ Checking dependencies for security vulnerabilities..."
          safety check --json --output safety-report.json
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: [constitutional-compliance, code-quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: acgs_test
          POSTGRES_USER: acgs_test
          POSTGRES_PASSWORD: acgs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Set up test environment
        run: |
          export DATABASE_URL="postgresql+asyncpg://acgs_test:acgs_test@localhost:5432/acgs_test"
          export REDIS_URL="redis://localhost:6379/0"
          export CONSTITUTIONAL_HASH="${{ env.CONSTITUTIONAL_HASH }}"
          export JWT_SECRET_KEY="test-secret-key-for-ci"

      - name: Run unit tests with coverage
        run: |
          echo "🧪 Running unit tests with coverage..."
          python tests/run_acgs_comprehensive_tests.py \
            --unit \
            --coverage \
            --target-coverage ${{ env.COVERAGE_TARGET }} \
            --verbose \
            --output-dir test_reports

      - name: Generate coverage report
        run: |
          echo "📊 Generating coverage report..."
          pytest \
            --cov=services \
            --cov-report=html:test_reports/htmlcov \
            --cov-report=xml:test_reports/coverage.xml \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.COVERAGE_TARGET }} \
            tests/services/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: test_reports/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-reports
          path: test_reports/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: acgs_integration
          POSTGRES_USER: acgs_test
          POSTGRES_PASSWORD: acgs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Start ACGS services
        run: |
          echo "🚀 Starting ACGS services for integration testing..."
          export DATABASE_URL="postgresql+asyncpg://acgs_test:acgs_test@localhost:5432/acgs_integration"
          export REDIS_URL="redis://localhost:6379/1"
          export CONSTITUTIONAL_HASH="${{ env.CONSTITUTIONAL_HASH }}"
          
          # Start services in background
          docker-compose -f infrastructure/docker/docker-compose.test.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Verify services are healthy
          python scripts/health_check.py --timeout 60

      - name: Run integration tests
        run: |
          echo "🔗 Running integration tests..."
          python tests/run_acgs_comprehensive_tests.py \
            --integration \
            --verbose \
            --output-dir integration_reports

      - name: Upload integration test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-reports
          path: integration_reports/

      - name: Cleanup services
        if: always()
        run: |
          docker-compose -f infrastructure/docker/docker-compose.test.yml down -v

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run performance tests
        run: |
          echo "⚡ Running performance tests..."
          python tests/run_acgs_comprehensive_tests.py \
            --performance \
            --verbose \
            --output-dir performance_reports

      - name: Validate performance targets
        run: |
          echo "📈 Validating performance targets..."
          python scripts/validate_performance_targets.py \
            --report-file performance_reports/comprehensive_test_results.json \
            --p99-latency-target 5.0 \
            --throughput-target 100 \
            --cache-hit-rate-target 0.85

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-reports
          path: performance_reports/

  # Constitutional Compliance Tests
  constitutional-tests:
    name: Constitutional Compliance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run constitutional compliance tests
        run: |
          echo "⚖️ Running constitutional compliance tests..."
          python tests/run_acgs_comprehensive_tests.py \
            --constitutional \
            --verbose \
            --output-dir constitutional_reports

      - name: Validate constitutional hash coverage
        run: |
          echo "🔍 Validating constitutional hash coverage..."
          python scripts/validate_constitutional_compliance.py \
            --hash ${{ env.CONSTITUTIONAL_HASH }} \
            --coverage-target 100

      - name: Upload constitutional compliance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: constitutional-compliance-reports
          path: constitutional_reports/

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, constitutional-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          echo "🐳 Building and pushing Docker images..."
          
          # Build all service images
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ github.repository }}/acgs-services:${{ github.sha }} \
            --tag ghcr.io/${{ github.repository }}/acgs-services:latest \
            --push \
            -f infrastructure/docker/Dockerfile.acgs .

      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          
          # Update staging deployment with new image
          # This would typically involve updating Kubernetes manifests
          # or triggering a deployment pipeline
          
          echo "Constitutional Hash: ${{ env.CONSTITUTIONAL_HASH }}"
          echo "Image: ghcr.io/${{ github.repository }}/acgs-services:${{ github.sha }}"
          echo "✅ Staging deployment completed"

  # Notification and Reporting
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, constitutional-tests, deploy-staging]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.constitutional-tests.result == 'success' }}
        run: |
          echo "🎉 All tests passed successfully!"
          echo "Constitutional Hash: ${{ env.CONSTITUTIONAL_HASH }}"
          echo "Coverage Target: ${{ env.COVERAGE_TARGET }}%"

      - name: Notify failure
        if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.constitutional-tests.result == 'failure' }}
        run: |
          echo "❌ Some tests failed"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Constitutional Tests: ${{ needs.constitutional-tests.result }}"
          exit 1
