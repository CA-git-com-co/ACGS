name: ACGS-1 Security Automation

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan on Monday at 2 AM
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - code_analysis
          - dependency_scan
          - container_scan
          - infrastructure_scan

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Security Analysis
  code_security_analysis:
    runs-on: ubuntu-latest
    name: Code Security Analysis
    if: github.event.inputs.scan_type == 'code_analysis' || github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Run Bandit security analysis
        run: |
          echo "üîç Running Bandit security analysis..."

          # Create bandit configuration
          cat > .bandit << EOF
          [bandit]
          exclude_dirs = tests,venv,.venv,node_modules
          skips = B101,B601
          EOF

          # Run bandit on Python code
          bandit -r services/ -f json -o /tmp/bandit-report.json || true
          bandit -r services/ -f txt

          echo "‚úÖ Bandit analysis completed"

      - name: Run Safety dependency check
        run: |
          echo "üõ°Ô∏è Running Safety dependency check..."

          # Check for known security vulnerabilities in dependencies
          safety check --json --output /tmp/safety-report.json || true
          safety check

          echo "‚úÖ Safety check completed"

      - name: Run Semgrep analysis
        run: |
          echo "üîé Running Semgrep analysis..."

          # Run Semgrep with security rules
          semgrep --config=auto --json --output=/tmp/semgrep-report.json services/ || true
          semgrep --config=auto services/

          echo "‚úÖ Semgrep analysis completed"

      - name: Upload security analysis results
        uses: actions/upload-artifact@v4
        with:
          name: code-security-analysis
          path: |
            /tmp/bandit-report.json
            /tmp/safety-report.json
            /tmp/semgrep-report.json
          retention-days: 30

  # Dependency Vulnerability Scan
  dependency_vulnerability_scan:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Scan
    if: github.event.inputs.scan_type == 'dependency_scan' || github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install audit tools
        run: |
          npm install -g npm-audit-resolver
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run npm audit
        run: |
          echo "üì¶ Running npm audit..."

          # Find and audit all package.json files
          find . -name "package.json" -not -path "./node_modules/*" | while read package_file; do
            dir=$(dirname "$package_file")
            echo "Auditing $dir..."
            
            cd "$dir"
            if [ -f "package-lock.json" ]; then
              npm audit --audit-level=moderate --json > "/tmp/npm-audit-$(basename $dir).json" || true
              npm audit --audit-level=moderate
            fi
            cd - > /dev/null
          done

          echo "‚úÖ npm audit completed"

      - name: Run pip-audit
        run: |
          echo "üêç Running pip-audit..."

          # Find and audit all requirements files
          find . -name "requirements*.txt" -o -name "pyproject.toml" | while read req_file; do
            echo "Auditing $req_file..."
            pip-audit -r "$req_file" --format=json --output="/tmp/pip-audit-$(basename $req_file).json" || true
            pip-audit -r "$req_file"
          done

          echo "‚úÖ pip-audit completed"

      - name: Run Rust cargo audit
        run: |
          echo "ü¶Ä Running cargo audit..."

          # Install cargo-audit
          if command -v cargo >/dev/null 2>&1; then
            cargo install cargo-audit
            
            # Find and audit all Cargo.toml files
            find . -name "Cargo.toml" | while read cargo_file; do
              dir=$(dirname "$cargo_file")
              echo "Auditing $dir..."
              
              cd "$dir"
              cargo audit --json > "/tmp/cargo-audit-$(basename $dir).json" || true
              cargo audit
              cd - > /dev/null
            done
          else
            echo "Cargo not found, skipping Rust audit"
          fi

          echo "‚úÖ cargo audit completed"

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-vulnerability-scan
          path: /tmp/*audit*.json
          retention-days: 30

  # Container Security Scan
  container_security_scan:
    runs-on: ubuntu-latest
    name: Container Security Scan
    if: github.event.inputs.scan_type == 'container_scan' || github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Trivy
        run: |
          echo "üîß Installing Trivy with robust error handling..."
          
          # Install prerequisites
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          
          # Install Trivy with fallback methods
          install_trivy() {
            # Method 1: Official repository
            if timeout 30 wget -qO - --retry-connrefused --waitretry=2 https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - 2>/dev/null; then
              echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
              if sudo apt-get update && sudo apt-get install -y trivy; then
                echo "‚úÖ Trivy installed via official repository"
                return 0
              fi
            fi
            
            # Method 2: Direct binary download
            echo "üîÑ Trying direct binary download..."
            local version="0.44.1"
            local url="https://github.com/aquasecurity/trivy/releases/download/v${version}/trivy_${version}_Linux-64bit.tar.gz"
            
            if timeout 60 wget -q "$url" -O trivy.tar.gz; then
              if tar -xzf trivy.tar.gz && sudo mv trivy /usr/local/bin/; then
                echo "‚úÖ Trivy installed via direct download"
                return 0
              fi
            fi
            
            echo "‚ö†Ô∏è Trivy installation failed"
            return 1
          }
          
          install_trivy || echo "‚ö†Ô∏è Trivy installation failed, container scans will be skipped"

      - name: Build test images
        run: |
          echo "üèóÔ∏è Building test images for security scanning..."

          # Build images for each service
          SERVICES=("auth" "ac" "integrity" "fv" "gs" "pgc" "ec")

          for service in "${SERVICES[@]}"; do
            if [ -d "services/${service}_service" ]; then
              echo "Building $service service image..."
              docker build -t "acgs-${service}:test" "services/${service}_service/" || true
            fi
          done

          echo "‚úÖ Test images built"

      - name: Run Trivy container scans
        run: |
          echo "üîç Running Trivy container security scans..."

          mkdir -p /tmp/trivy-reports

          # Scan each built image
          SERVICES=("auth" "ac" "integrity" "fv" "gs" "pgc" "ec")

          for service in "${SERVICES[@]}"; do
            if docker image inspect "acgs-${service}:test" >/dev/null 2>&1; then
              echo "Scanning $service service image..."
              
              # Scan for vulnerabilities
              trivy image --format json --output "/tmp/trivy-reports/${service}-vulnerabilities.json" "acgs-${service}:test" || true
              
              # Scan for misconfigurations
              trivy config --format json --output "/tmp/trivy-reports/${service}-config.json" "services/${service}_service/" || true
              
              # Display summary
              trivy image --severity HIGH,CRITICAL "acgs-${service}:test"
            fi
          done

          echo "‚úÖ Trivy scans completed"

      - name: Run Docker Bench Security
        run: |
          echo "üê≥ Running Docker Bench Security..."

          # Download and run Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo ./docker-bench-security.sh -l /tmp/docker-bench-security.log

          echo "‚úÖ Docker Bench Security completed"

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-security-scan
          path: |
            /tmp/trivy-reports/
            /tmp/docker-bench-security.log
          retention-days: 30

  # Infrastructure Security Scan
  infrastructure_security_scan:
    runs-on: ubuntu-latest
    name: Infrastructure Security Scan
    if: github.event.inputs.scan_type == 'infrastructure_scan' || github.event.inputs.scan_type == 'comprehensive' || github.event.inputs.scan_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install infrastructure security tools
        run: |
          echo "üîß Installing infrastructure security tools..."
          
          # Install Checkov for Terraform/Kubernetes security
          pip install checkov --timeout 300 || echo "‚ö†Ô∏è Checkov installation failed, continuing..."

          # Install kube-score for Kubernetes security with robust error handling
          install_kube_score() {
            local url="https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz"
            
            for attempt in 1 2 3; do
              echo "üîÑ Downloading kube-score attempt $attempt/3..."
              
              if timeout 60 wget --retry-connrefused --waitretry=3 -q "$url" -O kube-score.tar.gz; then
                if tar -xzf kube-score.tar.gz && sudo mv kube-score /usr/local/bin/ 2>/dev/null; then
                  echo "‚úÖ kube-score installed successfully"
                  return 0
                fi
              fi
              
              [ $attempt -lt 3 ] && sleep 5
            done
            
            echo "‚ö†Ô∏è kube-score installation failed, continuing without it..."
            return 1
          }
          
          install_kube_score || true

      - name: Run Checkov on Terraform
        run: |
          echo "üèóÔ∏è Running Checkov on Terraform configurations..."

          if [ -d "infrastructure/terraform" ]; then
            checkov -d infrastructure/terraform --framework terraform --output json --output-file /tmp/checkov-terraform.json || true
            checkov -d infrastructure/terraform --framework terraform
          else
            echo "No Terraform configurations found"
          fi

          echo "‚úÖ Checkov Terraform scan completed"

      - name: Run Checkov on Kubernetes
        run: |
          echo "‚ò∏Ô∏è Running Checkov on Kubernetes configurations..."

          if [ -d "k8s" ]; then
            checkov -d k8s --framework kubernetes --output json --output-file /tmp/checkov-kubernetes.json || true
            checkov -d k8s --framework kubernetes
          else
            echo "No Kubernetes configurations found"
          fi

          echo "‚úÖ Checkov Kubernetes scan completed"

      - name: Run kube-score
        run: |
          echo "üéØ Running kube-score on Kubernetes manifests..."

          find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes)" | while read manifest; do
            echo "Scoring $manifest..."
            kube-score score "$manifest" --output-format json > "/tmp/kube-score-$(basename $manifest).json" || true
            kube-score score "$manifest"
          done

          echo "‚úÖ kube-score analysis completed"

      - name: Upload infrastructure scan results
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-security-scan
          path: |
            /tmp/checkov-*.json
            /tmp/kube-score-*.json
          retention-days: 30

  # Security Compliance Check
  security_compliance_check:
    runs-on: ubuntu-latest
    name: Security Compliance Check
    needs:
      [
        code_security_analysis,
        dependency_vulnerability_scan,
        container_security_scan,
        infrastructure_security_scan,
      ]
    if: always()
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all security scan results
        uses: actions/download-artifact@v4
        with:
          path: /tmp/security-results/

      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install jq

      - name: Analyze security results
        run: |
          echo "üìä Analyzing security scan results..."

          # Create security analysis script
          cat > /tmp/analyze_security.py << 'EOF'
          import json
          import os
          import glob
          from datetime import datetime

          def analyze_security_results():
              results_dir = "/tmp/security-results"
              
              # Initialize counters
              total_vulnerabilities = 0
              critical_vulnerabilities = 0
              high_vulnerabilities = 0
              medium_vulnerabilities = 0
              low_vulnerabilities = 0
              
              findings = []
              
              # Analyze all JSON result files
              for result_file in glob.glob(f"{results_dir}/**/*.json", recursive=True):
                  try:
                      with open(result_file, 'r') as f:
                          data = json.load(f)
                          
                      # Process different types of security reports
                      if 'bandit' in result_file:
                          # Bandit results
                          if 'results' in data:
                              for result in data['results']:
                                  severity = result.get('issue_severity', 'UNKNOWN')
                                  findings.append({
                                      'type': 'code_security',
                                      'severity': severity,
                                      'description': result.get('issue_text', ''),
                                      'file': result.get('filename', ''),
                                      'line': result.get('line_number', 0)
                                  })
                                  total_vulnerabilities += 1
                                  if severity == 'HIGH':
                                      high_vulnerabilities += 1
                                  elif severity == 'MEDIUM':
                                      medium_vulnerabilities += 1
                                  elif severity == 'LOW':
                                      low_vulnerabilities += 1
                      
                      elif 'trivy' in result_file:
                          # Trivy results
                          if 'Results' in data:
                              for result in data['Results']:
                                  if 'Vulnerabilities' in result:
                                      for vuln in result['Vulnerabilities']:
                                          severity = vuln.get('Severity', 'UNKNOWN')
                                          findings.append({
                                              'type': 'container_security',
                                              'severity': severity,
                                              'description': vuln.get('Description', ''),
                                              'package': vuln.get('PkgName', ''),
                                              'cve': vuln.get('VulnerabilityID', '')
                                          })
                                          total_vulnerabilities += 1
                                          if severity == 'CRITICAL':
                                              critical_vulnerabilities += 1
                                          elif severity == 'HIGH':
                                              high_vulnerabilities += 1
                                          elif severity == 'MEDIUM':
                                              medium_vulnerabilities += 1
                                          elif severity == 'LOW':
                                              low_vulnerabilities += 1
                      
                  except Exception as e:
                      print(f"Error processing {result_file}: {e}")
              
              # Generate summary report
              summary = {
                  "analysis_timestamp": datetime.utcnow().isoformat(),
                  "total_vulnerabilities": total_vulnerabilities,
                  "critical_vulnerabilities": critical_vulnerabilities,
                  "high_vulnerabilities": high_vulnerabilities,
                  "medium_vulnerabilities": medium_vulnerabilities,
                  "low_vulnerabilities": low_vulnerabilities,
                  "compliance_status": {
                      "critical_threshold_met": critical_vulnerabilities == 0,
                      "high_threshold_met": high_vulnerabilities <= 5,
                      "overall_compliant": critical_vulnerabilities == 0 and high_vulnerabilities <= 5
                  },
                  "findings": findings[:50]  # Limit to first 50 findings
              }
              
              # Save summary
              with open("/tmp/security-analysis-summary.json", "w") as f:
                  json.dump(summary, f, indent=2)
              
              print("Security Analysis Summary:")
              print(f"Total vulnerabilities: {total_vulnerabilities}")
              print(f"Critical: {critical_vulnerabilities}")
              print(f"High: {high_vulnerabilities}")
              print(f"Medium: {medium_vulnerabilities}")
              print(f"Low: {low_vulnerabilities}")
              print(f"Overall compliant: {summary['compliance_status']['overall_compliant']}")
              
              return summary['compliance_status']['overall_compliant']

          if __name__ == "__main__":
              compliant = analyze_security_results()
              exit(0 if compliant else 1)
          EOF

          python /tmp/analyze_security.py

          echo "‚úÖ Security analysis completed"

      - name: Generate security report
        run: |
          echo "üìã Generating security compliance report..."

          # Create security report
          cat > /tmp/security-report.md << EOF
          # ACGS-1 Security Compliance Report

          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          **Scan Type:** ${{ github.event.inputs.scan_type || 'comprehensive' }}

          ## Scan Results Summary

          - **Code Security Analysis:** ${{ needs.code_security_analysis.result }}
          - **Dependency Vulnerability Scan:** ${{ needs.dependency_vulnerability_scan.result }}
          - **Container Security Scan:** ${{ needs.container_security_scan.result }}
          - **Infrastructure Security Scan:** ${{ needs.infrastructure_security_scan.result }}

          ## Security Metrics

          Detailed security metrics are available in the analysis artifacts.

          ## Compliance Status

          - ‚úÖ Code security analysis completed
          - ‚úÖ Dependency vulnerabilities checked
          - ‚úÖ Container images scanned
          - ‚úÖ Infrastructure configurations validated

          ## Recommendations

          1. Review and remediate any critical or high-severity vulnerabilities
          2. Update dependencies with known security issues
          3. Implement security best practices in code
          4. Regular security scanning in CI/CD pipeline

          ## Next Steps

          1. Address identified security issues
          2. Update security policies and procedures
          3. Schedule regular security reviews
          4. Monitor security alerts and advisories
          EOF

          echo "‚úÖ Security report generated"

      - name: Upload security analysis
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: |
            /tmp/security-analysis-summary.json
            /tmp/security-report.md
          retention-days: 90

      - name: Security scan summary
        run: |
          echo "üîí Security Scan Summary"
          echo "======================="
          echo "Scan Type: ${{ github.event.inputs.scan_type || 'comprehensive' }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Results:"
          echo "- Code Security: ${{ needs.code_security_analysis.result }}"
          echo "- Dependencies: ${{ needs.dependency_vulnerability_scan.result }}"
          echo "- Containers: ${{ needs.container_security_scan.result }}"
          echo "- Infrastructure: ${{ needs.infrastructure_security_scan.result }}"
          echo ""
          echo "üõ°Ô∏è Detailed results available in artifacts"
