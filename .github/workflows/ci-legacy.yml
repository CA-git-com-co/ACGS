# Constitutional Hash: cdd01ef066bc6cf2
name: ACGS-1 Enterprise CI/CD Pipeline

# DISABLED: Replaced by unified-ci.yml to reduce GitHub Actions costs
on:
  workflow_dispatch: # Manual execution only
  # push:
  #   branches: [main, master]
  # pull_request:
  #   branches: [main, master]
  # schedule:
  #   - cron: '0 2 * * *' # Daily at 2 AM for comprehensive testing

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SOLANA_CLI_VERSION: 1.18.22
  ANCHOR_CLI_VERSION: 0.29.0
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  # Enterprise Performance Targets
  ENTERPRISE_BUILD_TARGET_MINUTES: 5
  ENTERPRISE_AVAILABILITY_TARGET: 99.5
  # Enhanced Caching Configuration
  CARGO_INCREMENTAL: 0 # Disabled for sccache compatibility
  CARGO_NET_RETRY: 10
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  # Enterprise Performance Monitoring Job
  performance_monitoring:
    runs-on: ubuntu-latest
    name: Performance Monitoring
    outputs:
      start_time: ${{ steps.timing.outputs.start_time }}
      pipeline_id: ${{ steps.timing.outputs.pipeline_id }}
    steps:
      - name: Initialize performance tracking
        id: timing
        run: |
          START_TIME=$(date +%s)
          PIPELINE_ID="${{ github.run_id }}-$(date +%s)"
          echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          echo "üöÄ Enterprise CI/CD Pipeline Started at $(date)"
          echo "üìä Performance Target: <${{ env.ENTERPRISE_BUILD_TARGET_MINUTES }} minutes"
          echo "üéØ Availability Target: >${{ env.ENTERPRISE_AVAILABILITY_TARGET }}%"

  # Enhanced Pre-flight with Infrastructure Validation
  preflight:
    runs-on: ubuntu-latest
    name: Pre-flight & Infrastructure Validation
    needs: performance_monitoring
    outputs:
      should_run_tests: ${{ steps.determine_changes.outputs.should_run }}
      changed_components: ${{ steps.determine_changes.outputs.components }}
      rust_changed: ${{ steps.determine_changes.outputs.rust_changed }}
      python_changed: ${{ steps.determine_changes.outputs.python_changed }}
      typescript_changed: ${{ steps.determine_changes.outputs.typescript_changed }}
      infrastructure_ready: ${{ steps.infrastructure_check.outputs.ready }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Infrastructure readiness check
        id: infrastructure_check
        run: |
          echo "üîß Validating CI/CD infrastructure readiness..."

          # Check GitHub Actions runner resources
          echo "Runner OS: $(uname -a)"
          echo "Available disk space: $(df -h / | tail -1 | awk '{print $4}')"
          echo "Available memory: $(free -h | grep '^Mem:' | awk '{print $7}')"
          echo "CPU cores: $(nproc)"

          # Validate network connectivity with HTTP-based tests
          echo "üåê Testing GitHub connectivity..."
          if timeout 10 curl -sSf https://api.github.com/zen > /dev/null; then
            echo "‚úÖ GitHub connectivity verified"
          else
            echo "‚ùå GitHub connectivity failed"
            exit 1
          fi

          echo "üåê Testing Crates.io connectivity..."
          if timeout 10 curl -sSf https://crates.io/api/v1/crates > /dev/null; then
            echo "‚úÖ Crates.io connectivity verified"
          else
            echo "‚ùå Crates.io connectivity failed"
            exit 1
          fi

          echo "ready=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Infrastructure validation completed successfully"

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v46
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            blockchain/**
            services/**
            src/**
            tests/**
            scripts/**
            .github/**
          files_ignore: |
            docs/**
            README.md
            *.md

      - name: Determine components and test execution
        id: determine_changes
        run: |
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "components=all" >> $GITHUB_OUTPUT
          echo "rust_changed=false" >> $GITHUB_OUTPUT
          echo "python_changed=false" >> $GITHUB_OUTPUT
          echo "typescript_changed=false" >> $GITHUB_OUTPUT

          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "rust_changed=true" >> $GITHUB_OUTPUT
            echo "python_changed=true" >> $GITHUB_OUTPUT
            echo "typescript_changed=true" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changed_files.outputs.any_changed }}" == "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            changed_files_list="${{ steps.changed_files.outputs.all_changed_files }}"

            # Check for Rust/Anchor changes
            if echo "$changed_files_list" | grep -E "(blockchain/|\.rs$|Cargo\.toml|Anchor\.toml)" > /dev/null; then
              echo "rust_changed=true" >> $GITHUB_OUTPUT
            fi

            # Check for Python changes
            if echo "$changed_files_list" | grep -E "(services/|src/backend/|\.py$|requirements.*\.txt)" > /dev/null; then
              echo "python_changed=true" >> $GITHUB_OUTPUT
            fi

            # Check for TypeScript/Node.js changes
            if echo "$changed_files_list" | grep -E "(\.ts$|\.js$|package\.json|tsconfig\.json)" > /dev/null; then
              echo "typescript_changed=true" >> $GITHUB_OUTPUT
            fi
          fi

  # Enterprise Toolchain Setup (Shared across jobs for performance)
  toolchain_setup:
    runs-on: ubuntu-latest
    name: Enterprise Toolchain Setup
    needs: [performance_monitoring, preflight]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.infrastructure_ready == 'true'
    outputs:
      rust_cache_key: ${{ steps.cache_keys.outputs.rust_key }}
      node_cache_key: ${{ steps.cache_keys.outputs.node_key }}
      toolchain_ready: ${{ steps.validation.outputs.ready }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Generate cache keys
        id: cache_keys
        run: |
          # Enhanced cache key generation for better hit rates
          RUST_KEY="${{ runner.os }}-enterprise-rust-${{ env.SOLANA_CLI_VERSION }}-${{ env.ANCHOR_CLI_VERSION }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', 'blockchain/Anchor.toml') }}"
          NODE_KEY="${{ runner.os }}-enterprise-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}"
          echo "rust_key=$RUST_KEY" >> $GITHUB_OUTPUT
          echo "node_key=$NODE_KEY" >> $GITHUB_OUTPUT
          echo "üîë Generated cache keys for enterprise toolchain"

      - name: Install Rust with enhanced configuration
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0
          components: rustfmt, clippy

      - name: Enterprise Rust dependency caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ steps.cache_keys.outputs.rust_key }}
          restore-keys: |
            ${{ runner.os }}-enterprise-rust-${{ env.SOLANA_CLI_VERSION }}-${{ env.ANCHOR_CLI_VERSION }}-
            ${{ runner.os }}-enterprise-rust-${{ env.SOLANA_CLI_VERSION }}-
            ${{ runner.os }}-enterprise-rust-

      - name: Enterprise Solana CLI installation with caching
        run: |
          echo "üîß Installing Solana CLI v${{ env.SOLANA_CLI_VERSION }} with enterprise caching..."

          # Check if Solana CLI is already cached
          if [ -f "$HOME/.local/share/solana/install/active_release/bin/solana" ]; then
            echo "‚úÖ Solana CLI found in cache, verifying version..."
            export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
            if solana --version | grep -q "${{ env.SOLANA_CLI_VERSION }}"; then
              echo "‚úÖ Cached Solana CLI version matches target"
              echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
              exit 0
            else
              echo "‚ö†Ô∏è Cached version mismatch, reinstalling..."
            fi
          fi

          # Enhanced installation with circuit breaker pattern
          install_solana_with_circuit_breaker() {
            local max_attempts=3
            local backoff_base=5

            for attempt in $(seq 1 $max_attempts); do
              echo "üîÑ Installation attempt $attempt/$max_attempts"

              # Primary method: Official installer
              if timeout 180 sh -c 'timeout 300 curl -sSfL https://release.solana.com/v${{ env.SOLANA_CLI_VERSION }}/install | sh'; then
                echo "‚úÖ Primary installation successful on attempt $attempt"
                return 0
              fi

              # Fallback method: Direct download
              local temp_dir=$(mktemp -d)
              cd "$temp_dir"
              local url="https://github.com/solana-labs/solana/releases/download/v${{ env.SOLANA_CLI_VERSION }}/solana-release-x86_64-unknown-linux-gnu.tar.bz2"

              if timeout 120 wget -q --retry-connrefused --waitretry=5 -O solana.tar.bz2 "$url" && \
                 tar -xjf solana.tar.bz2 && \
                 mkdir -p "$HOME/.local/share/solana/install/active_release" && \
                 cp -r solana-release/* "$HOME/.local/share/solana/install/active_release/" && \
                 chmod +x "$HOME/.local/share/solana/install/active_release/bin/"*; then
                echo "‚úÖ Fallback installation successful on attempt $attempt"
                cd - && rm -rf "$temp_dir"
                return 0
              fi

              cd - && rm -rf "$temp_dir"

              if [ $attempt -lt $max_attempts ]; then
                local wait_time=$((backoff_base * attempt))
                echo "‚ö†Ô∏è Attempt $attempt failed, waiting ${wait_time}s before retry..."
                sleep $wait_time
              fi
            done

            echo "‚ùå All installation attempts failed"
            return 1
          }

          if install_solana_with_circuit_breaker; then
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
            export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
            solana --version
            echo "‚úÖ Solana CLI installation completed successfully"
          else
            echo "‚ùå Solana CLI installation failed"
            exit 1
          fi

      - name: Enterprise Anchor CLI installation
        run: |
          echo "üîß Installing Anchor CLI v${{ env.ANCHOR_CLI_VERSION }}..."

          # Check if Anchor CLI is cached
          if command -v anchor >/dev/null 2>&1; then
            if anchor --version | grep -q "${{ env.ANCHOR_CLI_VERSION }}"; then
              echo "‚úÖ Anchor CLI already installed with correct version"
              exit 0
            fi
          fi

          # Install with retry logic
          for attempt in 1 2 3; do
            echo "üîÑ Anchor CLI installation attempt $attempt/3"
            if npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }}; then
              echo "‚úÖ Anchor CLI installed successfully"
              anchor --version
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Anchor CLI installation failed after 3 attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Attempt $attempt failed, retrying..."
              sleep 10
            fi
          done

      - name: Set up Node.js with enterprise caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: blockchain/package-lock.json

      - name: Toolchain validation
        id: validation
        run: |
          echo "üîç Validating enterprise toolchain installation..."

          # Validate Rust
          if rustc --version && cargo --version; then
            echo "‚úÖ Rust toolchain validated"
          else
            echo "‚ùå Rust toolchain validation failed"
            exit 1
          fi

          # Validate Solana CLI
          if solana --version | grep -q "${{ env.SOLANA_CLI_VERSION }}"; then
            echo "‚úÖ Solana CLI validated"
          else
            echo "‚ùå Solana CLI validation failed"
            exit 1
          fi

          # Validate Anchor CLI
          if anchor --version | grep -q "${{ env.ANCHOR_CLI_VERSION }}"; then
            echo "‚úÖ Anchor CLI validated"
          else
            echo "‚ùå Anchor CLI validation failed"
            exit 1
          fi

          # Validate Node.js
          if node --version | grep -q "v${{ env.NODE_VERSION }}"; then
            echo "‚úÖ Node.js validated"
          else
            echo "‚ùå Node.js validation failed"
            exit 1
          fi

          echo "ready=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All enterprise toolchain components validated successfully"

  # Parallel Job 1: Rust Code Quality & Build
  rust_quality_build:
    runs-on: ubuntu-latest
    name: Rust Quality & Build (Parallel)
    needs: [preflight, toolchain_setup]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.rust_changed == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0
          components: rustfmt, clippy

      - name: Restore enterprise Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ needs.toolchain_setup.outputs.rust_cache_key }}
          restore-keys: |
            ${{ runner.os }}-enterprise-rust-${{ env.SOLANA_CLI_VERSION }}-${{ env.ANCHOR_CLI_VERSION }}-
            ${{ runner.os }}-enterprise-rust-${{ env.SOLANA_CLI_VERSION }}-
            ${{ runner.os }}-enterprise-rust-

      - name: Parallel Rust quality checks
        working-directory: blockchain
        run: |
          echo "üîç Running parallel Rust quality checks..."

          # Run format check in background
          (cargo fmt --all -- --check && echo "‚úÖ Format check passed") &
          FORMAT_PID=$!

          # Run clippy in background
          (cargo clippy --all-targets --all-features -- -D warnings && echo "‚úÖ Clippy check passed") &
          CLIPPY_PID=$!

          # Wait for both to complete
          wait $FORMAT_PID
          FORMAT_RESULT=$?

          wait $CLIPPY_PID
          CLIPPY_RESULT=$?

          if [ $FORMAT_RESULT -eq 0 ] && [ $CLIPPY_RESULT -eq 0 ]; then
            echo "‚úÖ All Rust quality checks passed"
          else
            echo "‚ùå Some Rust quality checks failed"
            exit 1
          fi

      - name: Enterprise Anchor build with optimization
        working-directory: blockchain
        run: |
          echo "üèóÔ∏è Building Anchor programs with enterprise optimizations..."

          # Configure Solana for local development
          solana config set --url localhost

          # Build with optimizations for faster subsequent builds
          RUST_LOG=error anchor build --skip-lint

          echo "‚úÖ Anchor build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: anchor-build-artifacts
          path: |
            blockchain/target/deploy/
            blockchain/target/idl/
          retention-days: 7

  # Parallel Job 2: Anchor Testing with Infrastructure Automation
  anchor_testing:
    runs-on: ubuntu-latest
    name: Anchor Testing (Parallel)
    needs: [preflight, toolchain_setup, rust_quality_build]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.rust_changed == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0

      - name: Restore enterprise Rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
          key: ${{ needs.toolchain_setup.outputs.rust_cache_key }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: anchor-build-artifacts
          path: blockchain/target/

      - name: Enterprise Solana test environment setup
        run: |
          echo "üîß Setting up enterprise Solana test environment..."

          # Install Solana CLI (cached from toolchain_setup)
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Create test keypair with proper permissions
          mkdir -p "$HOME/.config/solana"
          if [ ! -f "$HOME/.config/solana/id.json" ]; then
            solana-keygen new --no-bip39-passphrase --silent --outfile "$HOME/.config/solana/id.json"
            echo "‚úÖ Test keypair created"
          else
            echo "‚úÖ Test keypair already exists"
          fi

          # Validate keypair
          if solana-keygen verify "$HOME/.config/solana/id.json" > /dev/null 2>&1; then
            echo "‚úÖ Keypair validation successful"
          else
            echo "‚ùå Keypair validation failed"
            exit 1
          fi

          # Configure Solana CLI
          solana config set --url localhost --keypair "$HOME/.config/solana/id.json"

          echo "‚úÖ Enterprise test environment setup completed"

      - name: Install Anchor CLI and Node.js dependencies
        run: |
          # Install Anchor CLI
          npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }}

          # Install Node.js dependencies
          cd blockchain && npm ci

      - name: Enterprise Anchor testing with reliability improvements
        working-directory: blockchain
        run: |
          echo "üß™ Running enterprise Anchor tests with reliability improvements..."

          # Start local validator with enhanced configuration
          echo "üöÄ Starting Solana test validator..."
          solana-test-validator \
            --reset \
            --quiet \
            --ledger /tmp/test-ledger \
            --bind-address 127.0.0.1 \
            --rpc-port 8899 \
            --faucet-port 9900 &
          VALIDATOR_PID=$!

          # Enhanced validator readiness check
          echo "‚è≥ Waiting for validator to be ready..."
          for i in {1..30}; do
            if solana cluster-version >/dev/null 2>&1; then
              echo "‚úÖ Validator is ready after ${i} seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Validator failed to start within 30 seconds"
              kill $VALIDATOR_PID || true
              exit 1
            fi
            sleep 1
          done

          # Airdrop SOL for testing
          solana airdrop 10 --url localhost || echo "‚ö†Ô∏è Airdrop failed, continuing..."

          # Run tests with proper error handling
          echo "üß™ Executing Anchor tests..."
          TEST_RESULT=0
          anchor test --skip-local-validator || TEST_RESULT=$?

          # Enhanced cleanup
          echo "üßπ Cleaning up test environment..."
          kill $VALIDATOR_PID || true
          sleep 2
          pkill -f "solana-test-validator" || true
          rm -rf /tmp/test-ledger || true

          # Report results
          if [ $TEST_RESULT -eq 0 ]; then
            echo "‚úÖ All Anchor tests passed successfully"
          else
            echo "‚ùå Some Anchor tests failed (exit code: $TEST_RESULT)"
            exit $TEST_RESULT
          fi

  security_scan:
    runs-on: ubuntu-latest
    name: Enhanced Security Scanning
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust for security tools
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0
          components: rustfmt, clippy

      - name: Install security tools with enhanced compatibility
        run: |
          echo "üîß Installing security tools for comprehensive scanning..."

          # Enhanced cargo-audit installation with retry logic
          install_cargo_audit() {
            echo "Installing cargo-audit v0.21.1 for Rust 1.81.0 compatibility..."
            for attempt in 1 2 3; do
              echo "Attempt $attempt/3: Installing cargo-audit..."
              if cargo install cargo-audit --version 0.21.1 --locked; then
                echo "‚úÖ cargo-audit installed successfully on attempt $attempt"
                return 0
              else
                if [ $attempt -eq 3 ]; then
                  echo "‚ùå Failed to install cargo-audit after 3 attempts"
                  return 1
                else
                  echo "‚ö†Ô∏è Attempt $attempt failed, retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
          }

          # Enhanced cargo-deny installation
          install_cargo_deny() {
            echo "Installing cargo-deny for enhanced security scanning..."
            for attempt in 1 2 3; do
              echo "Attempt $attempt/3: Installing cargo-deny..."
              if cargo install cargo-deny --version 0.17.0 --locked; then
                echo "‚úÖ cargo-deny installed successfully on attempt $attempt"
                return 0
              else
                if [ $attempt -eq 3 ]; then
                  echo "‚ùå Failed to install cargo-deny after 3 attempts"
                  return 1
                else
                  echo "‚ö†Ô∏è Attempt $attempt failed, retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
          }

          # Install tools with error handling
          if ! install_cargo_audit; then
            echo "‚ö†Ô∏è cargo-audit installation failed, continuing without it"
          fi

          if ! install_cargo_deny; then
            echo "‚ö†Ô∏è cargo-deny installation failed, continuing without it"
          fi

          # Verify installations
          echo "‚úÖ Verifying installed security tools:"
          if command -v cargo-audit >/dev/null 2>&1; then
            cargo audit --version
          else
            echo "‚ö†Ô∏è cargo-audit not available"
          fi

          if command -v cargo-deny >/dev/null 2>&1; then
            cargo deny --version
          else
            echo "‚ö†Ô∏è cargo-deny not available"
          fi

      - name: Run comprehensive Rust security audit
        run: |
          echo "üîí Running comprehensive Rust security audit..."

          # Run cargo audit on blockchain if available
          if command -v cargo-audit >/dev/null 2>&1 && [ -d "blockchain" ] && [ -f "blockchain/Cargo.lock" ]; then
            echo "Running cargo audit on blockchain..."
            cd blockchain

            # Create audit configuration if missing
            if [ ! -f "audit.toml" ]; then
              echo "Creating audit.toml configuration..."
              cat > audit.toml << 'EOF'
          [advisories]
          ignore = [
              "RUSTSEC-2021-0145", # atty unsound read (CLI only, not runtime)
              "RUSTSEC-2023-0033", # borsh ZST issue (doesn't affect Solana usage)
              "RUSTSEC-2024-0375", # atty unmaintained (CLI only)
              "RUSTSEC-2024-0388", # derivative unmaintained (compile-time only)
              "RUSTSEC-2024-0436", # paste unmaintained (compile-time only)
              "RUSTSEC-2024-0344", # curve25519-dalek timing attack (Solana SDK v1.18.26 dependency)
          ]
          EOF
            fi

            # Run audit with proper error handling
            if cargo audit; then
              echo "‚úÖ Blockchain cargo audit passed"
            else
              echo "‚ö†Ô∏è Blockchain cargo audit found issues, checking if they're ignored..."
            fi
            cd ..
          else
            echo "‚ö†Ô∏è cargo-audit not available or no blockchain directory found"
          fi

          # Run cargo deny if available
          if command -v cargo-deny >/dev/null 2>&1 && [ -d "blockchain" ] && [ -f "blockchain/deny.toml" ]; then
            echo "Running cargo deny on blockchain..."
            cd blockchain
            cargo deny check || echo "‚ö†Ô∏è cargo deny found issues"
            cd ..
          else
            echo "‚ö†Ô∏è cargo-deny not available or no deny.toml found"
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  python_code_quality:
    runs-on: ubuntu-latest
    name: Python Code Quality Analysis
    needs: preflight
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.python_changed == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pytest-cov bandit[toml] safety
          # Install test dependencies
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          # Install shared dependencies
          if [ -f "services/shared/requirements.txt" ]; then
            pip install -r services/shared/requirements.txt
          fi

      - name: Code formatting check
        run: |
          # Check Python code in services and src directories
          if [ -d "services" ]; then
            black --check --diff services/
            isort --check-only --diff services/
          fi
          if [ -d "src" ]; then
            black --check --diff src/
            isort --check-only --diff src/
          fi
          if [ -d "tests" ]; then
            black --check --diff tests/
            isort --check-only --diff tests/
          fi

      - name: Linting
        continue-on-error: true
        run: |
          # Lint Python code
          if [ -d "services" ]; then
            flake8 services/ --max-line-length=100 --extend-ignore=E203,W503 || true
          fi
          if [ -d "src" ]; then
            flake8 src/ --max-line-length=100 --extend-ignore=E203,W503 || true
          fi
          if [ -d "tests" ]; then
            flake8 tests/ --max-line-length=100 --extend-ignore=E203,W503 || true
          fi

      - name: Type checking
        continue-on-error: true
        run: |
          # Type check with mypy
          if [ -d "services" ]; then
            mypy services/ --ignore-missing-imports || true
          fi
          if [ -d "src" ]; then
            mypy src/ --ignore-missing-imports || true
          fi

      - name: Security analysis
        continue-on-error: true
        run: |
          # Create bandit config if it doesn't exist
          if [ ! -f "pyproject.toml" ] && [ ! -f ".bandit" ]; then
            echo "[tool.bandit]" > pyproject.toml
            echo "exclude_dirs = ['tests', 'venv', '.venv', 'target']" >> pyproject.toml
          fi
          # Run bandit on source code
          bandit -r . -f json -o bandit-report.json --exclude ./tests,./venv,./.venv,./target,./blockchain/target || true

      - name: Safety scan
        continue-on-error: true
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 14

  python_unit_tests:
    runs-on: ubuntu-latest
    name: Python Unit Tests
    needs: [preflight, python_code_quality]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.python_changed == 'true'
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        component: ['services/core', 'services/platform', 'src/backend', 'tests']
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install test dependencies
          if [ -f "requirements-test.txt" ]; then
            pip install -r requirements-test.txt
          fi
          # Install shared dependencies
          if [ -f "services/shared/requirements.txt" ]; then
            pip install -r services/shared/requirements.txt
          fi
          # Install component-specific dependencies if they exist
          if [ -f "${{ matrix.component }}/requirements.txt" ]; then
            pip install -r ${{ matrix.component }}/requirements.txt
          fi

      - name: Run unit tests
        run: |
          # Run tests for the specific component
          if [ -d "${{ matrix.component }}" ]; then
            if [ -d "${{ matrix.component }}/tests" ]; then
              python -m pytest ${{ matrix.component }}/tests/ -v --cov=${{ matrix.component }} --cov-report=xml --cov-report=html || true
            elif [ "${{ matrix.component }}" == "tests" ]; then
              python -m pytest tests/unit/ -v --cov=services --cov=src --cov-report=xml --cov-report=html || true
            fi
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: coverage.xml
          flags: ${{ matrix.component }}-${{ matrix.python-version }}
          name: ${{ matrix.component }}-${{ matrix.python-version }}

  build_images:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [preflight, python_unit_tests]
    if: needs.preflight.outputs.should_run_tests == 'true' && needs.preflight.outputs.python_changed == 'true'
    strategy:
      matrix:
        service:
          [
            'constitutional-ai',
            'governance-synthesis',
            'policy-governance',
            'formal-verification',
            'evolutionary-computation',
            'authentication',
            'integrity',
            'federated-evaluation',
            'research-platform',
          ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set service path
        id: service-path
        run: |
          case "${{ matrix.service }}" in
            "constitutional-ai")
              echo "context=services/core/constitutional-ai/ac_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/constitutional-ai/ac_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "governance-synthesis")
              echo "context=services/core/governance-synthesis/gs_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/governance-synthesis/gs_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "policy-governance")
              echo "context=services/core/policy-governance/pgc_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/policy-governance/pgc_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "formal-verification")
              echo "context=services/core/formal-verification/fv_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/formal-verification/fv_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "evolutionary-computation")
              echo "context=services/core/evolutionary-computation" >> $GITHUB_OUTPUT
              echo "dockerfile=services/core/evolutionary-computation/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "authentication")
              echo "context=services/platform/authentication/auth_service" >> $GITHUB_OUTPUT  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
              echo "dockerfile=services/platform/authentication/auth_service/Dockerfile" >> $GITHUB_OUTPUT  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
              ;;
            "integrity")
              echo "context=services/platform/integrity/integrity_service" >> $GITHUB_OUTPUT  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
              echo "dockerfile=services/platform/integrity/integrity_service/Dockerfile" >> $GITHUB_OUTPUT  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
              ;;
            "federated-evaluation")
              echo "context=services/research/federated-evaluation/federated_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/research/federated-evaluation/federated_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            "research-platform")
              echo "context=services/research/research-platform/research_service" >> $GITHUB_OUTPUT
              echo "dockerfile=services/research/research-platform/research_service/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown service: ${{ matrix.service }}"
              exit 1
              ;;
          esac

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.service-path.outputs.context }}
          file: ${{ steps.service-path.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ... (Keep your other jobs as in your original file, or let me know if you want further improvements for those.)

  notify_results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs:
      - preflight
      - rust_quality_build
      - anchor_testing
      - security_scan
      - python_code_quality
      - python_unit_tests
      - build_images
    if: always()
    steps:
      - name: Notify on success
        if: success() && (needs.python_unit_tests.result == 'success' || needs.python_unit_tests.result == 'skipped') && (needs.rust_quality_build.result == 'success' || needs.rust_quality_build.result == 'skipped') && (needs.anchor_testing.result == 'success' || needs.anchor_testing.result == 'skipped')
        run: |
          echo "‚úÖ All tests passed successfully!"
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add Slack/email notification here

      - name: Notify on failure
        if: failure() || (cancelled() && needs.preflight.outputs.should_run_tests == 'true')
        run: |
          echo "‚ùå Some tests or steps failed or were cancelled. Check the logs for details."
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Add failure notification here

      - name: Generate test report
        run: |
          echo "# ACGS-1 CI/CD Test Report" > test-report.md
          echo "Generated: $(date)" >> test-report.md
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Overall Status Summary" >> test-report.md
          echo "- Rust Quality & Build: ${{ needs.rust_quality_build.result }}" >> test-report.md
          echo "- Anchor Testing: ${{ needs.anchor_testing.result }}" >> test-report.md
          echo "- Security Scan: ${{ needs.security_scan.result }}" >> test-report.md
          echo "- Python Code Quality: ${{ needs.python_code_quality.result }}" >> test-report.md
          echo "- Python Unit Tests: ${{ needs.python_unit_tests.result }}" >> test-report.md
          echo "- Build Docker Images: ${{ needs.build_images.result }}" >> test-report.md

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          retention-days: 14
