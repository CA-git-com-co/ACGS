# ACGS-2 Release Pipeline
# Constitutional Hash: cdd01ef066bc6cf2

name: 🚀 ACGS-2 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  # Validate release readiness
  release-validation:
    name: 🏛️ Release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-pre-release: ${{ steps.version.outputs.is-pre-release }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
          IS_PRE_RELEASE="${{ inputs.pre_release }}"
        else
          VERSION="${{ github.ref_name }}"
          IS_PRE_RELEASE="false"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-pre-release=$IS_PRE_RELEASE" >> $GITHUB_OUTPUT
        
        echo "🏷️ Release Version: $VERSION"
        echo "🏷️ Pre-release: $IS_PRE_RELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha"
          exit 1
        fi
        
        echo "✅ Version format validated: $VERSION"
        
    - name: Constitutional compliance check
      run: |
        echo "🏛️ Validating constitutional compliance for release..."
        
        # Verify constitutional hash in all critical files
        FILES_WITH_HASH=$(grep -r "$CONSTITUTIONAL_HASH" services/core/ --include="*.py" | wc -l)
        
        if [ "$FILES_WITH_HASH" -lt 5 ]; then
          echo "❌ Insufficient constitutional hash coverage"
          exit 1
        fi
        
        echo "✅ Constitutional compliance validated for release"
        
    - name: Check for breaking changes
      run: |
        echo "🔍 Checking for breaking changes..."
        
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "📋 Comparing with previous tag: $PREVIOUS_TAG"
          
          # Check for breaking changes in API endpoints
          CHANGED_APIS=$(git diff $PREVIOUS_TAG..HEAD -- services/core/*/main.py | grep -E "^[+-].*@app\.(get|post|put|delete)" | wc -l)
          
          if [ "$CHANGED_APIS" -gt 0 ]; then
            echo "⚠️ API changes detected - ensure backward compatibility"
            git diff $PREVIOUS_TAG..HEAD -- services/core/*/main.py | grep -E "^[+-].*@app\.(get|post|put|delete)" | head -10
          fi
        else
          echo "ℹ️ No previous tags found - initial release"
        fi

  # Build release artifacts
  build-release:
    name: 🔨 Build Release Artifacts
    runs-on: ubuntu-latest
    needs: release-validation
    strategy:
      matrix:
        service:
        - name: constitutional-core
          path: constitutional-ai
        - name: auth-service
          path: auth-service
        - name: monitoring-service
          path: monitoring-service
        - name: audit-service
          path: audit-service
        - name: gdpr-compliance
          path: gdpr-compliance
        - name: alerting-service
          path: alerting-service
        - name: api-gateway
          path: api-gateway
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.service.name }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.release-validation.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-validation.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.release-validation.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          SERVICE_NAME=${{ matrix.service.name }}
          SERVICE_PATH=${{ matrix.service.path }}
        annotations: |
          constitutional.hash=${{ env.CONSTITUTIONAL_HASH }}
          release.version=${{ needs.release-validation.outputs.version }}
          release.timestamp=${{ github.event.head_commit.timestamp }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ matrix.service.name }}:${{ needs.release-validation.outputs.version }}
        format: spdx-json
        output-file: sbom-${{ matrix.service.name }}.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.service.name }}
        path: sbom-${{ matrix.service.name }}.spdx.json
        retention-days: 90

  # Security scan for release
  release-security-scan:
    name: 🔒 Release Security Scan
    runs-on: ubuntu-latest
    needs: [release-validation, build-release]
    strategy:
      matrix:
        service: [auth-service, monitoring-service, audit-service]
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ matrix.service }}:${{ needs.release-validation.outputs.version }}
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}-release.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-${{ matrix.service }}-release.sarif'
        
    - name: Fail on critical vulnerabilities
      run: |
        # Check if critical vulnerabilities were found
        CRITICAL_COUNT=$(jq '.runs[0].results | length' trivy-${{ matrix.service }}-release.sarif)
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found in ${{ matrix.service }}"
          echo "Cannot proceed with release until vulnerabilities are fixed"
          exit 1
        fi
        
        echo "✅ No critical vulnerabilities found in ${{ matrix.service }}"

  # Generate release notes
  generate-release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: release-validation
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: notes
      run: |
        VERSION="${{ needs.release-validation.outputs.version }}"
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        echo "# ACGS-2 Release $VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "**Constitutional Hash**: \`$CONSTITUTIONAL_HASH\`" >> release_notes.md
        echo "**Release Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 🔄 Changes Since $PREVIOUS_TAG" >> release_notes.md
          echo "" >> release_notes.md
          
          # Features
          FEATURES=$(git log $PREVIOUS_TAG..HEAD --oneline | grep -i "feat\|feature" | head -10)
          if [ -n "$FEATURES" ]; then
            echo "### ✨ New Features" >> release_notes.md
            echo "$FEATURES" | sed 's/^/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Bug fixes
          FIXES=$(git log $PREVIOUS_TAG..HEAD --oneline | grep -i "fix\|bug" | head -10)
          if [ -n "$FIXES" ]; then
            echo "### 🐛 Bug Fixes" >> release_notes.md
            echo "$FIXES" | sed 's/^/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Security updates
          SECURITY=$(git log $PREVIOUS_TAG..HEAD --oneline | grep -i "security\|sec\|vuln" | head -5)
          if [ -n "$SECURITY" ]; then
            echo "### 🔒 Security Updates" >> release_notes.md
            echo "$SECURITY" | sed 's/^/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Constitutional changes
          CONSTITUTIONAL=$(git log $PREVIOUS_TAG..HEAD --oneline | grep -i "constitutional\|compliance" | head -5)
          if [ -n "$CONSTITUTIONAL" ]; then
            echo "### ⚖️ Constitutional Changes" >> release_notes.md
            echo "$CONSTITUTIONAL" | sed 's/^/- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
        fi
        
        # Service versions
        echo "## 📦 Service Versions" >> release_notes.md
        echo "" >> release_notes.md
        echo "| Service | Version | Constitutional Hash |" >> release_notes.md
        echo "|---------|---------|-------------------|" >> release_notes.md
        echo "| Constitutional Core | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "| Auth Service | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "| Monitoring Service | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "| Audit Service | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "| GDPR Compliance | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "| Alerting Service | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "| API Gateway | $VERSION | \`$CONSTITUTIONAL_HASH\` |" >> release_notes.md
        echo "" >> release_notes.md
        
        # Deployment information
        echo "## 🚀 Deployment Information" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Docker Images" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Pull all service images" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/constitutional-core:$VERSION" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/auth-service:$VERSION" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/monitoring-service:$VERSION" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/audit-service:$VERSION" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/gdpr-compliance:$VERSION" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/alerting-service:$VERSION" >> release_notes.md
        echo "docker pull ghcr.io/${{ github.repository_owner }}/api-gateway:$VERSION" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### Kubernetes Deployment" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Deploy using Helm" >> release_notes.md
        echo "helm upgrade --install acgs-2 ./deployment/helm/acgs-system \\" >> release_notes.md
        echo "  --set image.tag=$VERSION \\" >> release_notes.md
        echo "  --set constitutional.hash=$CONSTITUTIONAL_HASH" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Or deploy using kubectl" >> release_notes.md
        echo "./deployment/scripts/deploy.sh -t $VERSION -e production" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        
        # Constitutional compliance
        echo "## ⚖️ Constitutional Compliance" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Hash Validation**: All services enforce constitutional hash \`$CONSTITUTIONAL_HASH\`" >> release_notes.md
        echo "- **Performance Targets**: P99 latency <5ms, throughput >100 RPS" >> release_notes.md
        echo "- **Security Standards**: Zero-trust architecture with audit trails" >> release_notes.md
        echo "- **Compliance Monitoring**: 100% constitutional hash validation" >> release_notes.md
        echo "" >> release_notes.md
        
        # Breaking changes warning
        if [[ "$VERSION" =~ ^v[0-9]+\.0\.0$ ]]; then
          echo "## ⚠️ Breaking Changes" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is a major version release and may contain breaking changes." >> release_notes.md
          echo "Please review the migration guide before upgrading." >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Security notice
        echo "## 🔒 Security Notice" >> release_notes.md
        echo "" >> release_notes.md
        echo "This release has been scanned for vulnerabilities and constitutional compliance." >> release_notes.md
        echo "All container images are signed and include Software Bill of Materials (SBOM)." >> release_notes.md
        echo "" >> release_notes.md
        
        echo "---" >> release_notes.md
        echo "**Full Changelog**: [\`$PREVIOUS_TAG...$VERSION\`](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION)" >> release_notes.md
        
        # Set output
        NOTES_CONTENT=$(cat release_notes.md)
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md
        retention-days: 90

  # Create GitHub release
  create-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [
      release-validation,
      build-release,
      release-security-scan,
      generate-release-notes
    ]
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.release-validation.outputs.version }}
        name: "ACGS-2 ${{ needs.release-validation.outputs.version }}"
        body: ${{ needs.generate-release-notes.outputs.release-notes }}
        prerelease: ${{ needs.release-validation.outputs.is-pre-release }}
        files: |
          artifacts/sbom-*/sbom-*.spdx.json
          artifacts/release-notes/release_notes.md
        generate_release_notes: false
        
    - name: Update latest release pointer
      if: needs.release-validation.outputs.is-pre-release == 'false'
      run: |
        echo "🏷️ Updating latest release pointer to ${{ needs.release-validation.outputs.version }}"

  # Deploy to production (for stable releases)
  deploy-production:
    name: 🏭 Production Deployment
    runs-on: ubuntu-latest
    needs: [create-release, release-validation]
    if: needs.release-validation.outputs.is-pre-release == 'false' && (inputs.environment == 'production' || github.event_name == 'push')
    environment: production
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        kubectl config current-context
        
    - name: Deploy to production
      run: |
        echo "🏭 Deploying ACGS-2 ${{ needs.release-validation.outputs.version }} to production"
        
        cd deployment
        export ENVIRONMENT=production
        export NAMESPACE=acgs-system
        export REGISTRY=${{ env.REGISTRY }}
        export TAG=${{ needs.release-validation.outputs.version }}
        export DOMAIN=acgs.example.com
        export SKIP_CONFIRMATION=true
        export BUILD_IMAGES=false
        export RUN_TESTS=true
        
        ./scripts/deploy.sh
        
    - name: Verify production deployment
      run: |
        echo "🔍 Verifying production deployment..."
        
        # Wait for all deployments to be ready
        kubectl wait --for=condition=available --timeout=600s deployment --all -n acgs-system
        
        # Verify constitutional compliance
        SERVICES=("auth-service:8013" "monitoring-service:8014" "audit-service:8015")
        
        for service_config in "${SERVICES[@]}"; do
          IFS=':' read -r service port <<< "$service_config"
          
          kubectl port-forward "service/$service" "$port:$port" -n acgs-system &
          PID=$!
          sleep 5
          
          # Constitutional compliance check
          RESPONSE=$(curl -s "http://localhost:$port/health" || echo "{}")
          HASH=$(echo "$RESPONSE" | jq -r '.constitutional_hash // empty')
          
          if [[ "$HASH" != "$CONSTITUTIONAL_HASH" ]]; then
            echo "❌ Constitutional compliance failed for $service"
            exit 1
          fi
          
          kill $PID 2>/dev/null || true
          sleep 2
          
          echo "✅ $service constitutional compliance verified"
        done
        
        echo "🎉 Production deployment successful!"
        echo "Constitutional Hash: $CONSTITUTIONAL_HASH"
        echo "Release Version: ${{ needs.release-validation.outputs.version }}"

  # Notification
  release-notification:
    name: 📢 Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()
    steps:
    - name: Success notification
      if: needs.create-release.result == 'success'
      run: |
        echo "🎉 ACGS-2 Release ${{ needs.release-validation.outputs.version }} Published Successfully!"
        echo "🏛️ Constitutional Hash: $CONSTITUTIONAL_HASH"
        echo "📦 Container Images: Available at ghcr.io/${{ github.repository_owner }}"
        echo "🚀 Production Status: ${{ needs.deploy-production.result }}"
        
        # Add notification to Slack/Discord/Teams here if configured
        
    - name: Failure notification
      if: needs.create-release.result == 'failure'
      run: |
        echo "❌ ACGS-2 Release ${{ needs.release-validation.outputs.version }} Failed!"
        echo "🏛️ Constitutional Hash: $CONSTITUTIONAL_HASH"
        echo "🔧 Check workflow logs for details"
        
        # Add failure notification here if configured