# Constitutional Hash: cdd01ef066bc6cf2
# Runner Migration: 2025-01-11 - Migrated to GitHub-hosted for better performance
name: ACGS-2 Enterprise Quality Gates

on:
  pull_request:
    branches:
      - main
      - develop
      - master
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'tests/**'
      - '.github/workflows/quality-gates.yml'
  push:
    branches:
      - main
      - develop
      - master
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'tests/**'
      - '.github/workflows/quality-gates.yml'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD: 90
  ENTERPRISE_QUALITY_STANDARD: true

jobs:
  quality-gates:
    runs-on: ubuntu-latest  # Migrated from self-hosted for better performance and cost
    timeout-minutes: 30
    name: Enterprise Quality Gates Validation
    outputs:
      coverage_score: ${{ steps.coverage.outputs.score }}
      quality_passed: ${{ steps.quality_summary.outputs.passed }}
      security_passed: ${{ steps.security.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies with enterprise requirements
        run: |
          echo "üîß Installing enterprise-grade dependencies..."
          python -m pip install --upgrade pip
          pip install -e .[dev,test]
          pip install pytest-cov coverage[toml] pytest-xdist
          echo "‚úÖ Dependencies installed successfully"

      - name: Enterprise test coverage validation
        id: coverage
        run: |
          echo "üìä Running enterprise test coverage validation (‚â•${{ env.COVERAGE_THRESHOLD }}%)..."

          # Run tests with coverage
          python -m pytest \
            --cov=services \
            --cov=scripts \
            --cov=core \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=json \
            --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
            --maxfail=5 \
            --tb=short \
            -v

          # Extract coverage score
          COVERAGE_SCORE=$(python -c "
          import json
          try:
              with open('coverage.json', 'r') as f:
                  data = json.load(f)
              score = round(data['totals']['percent_covered'], 2)
              print(score)
          except:
              print('0.0')
          ")

          echo "score=$COVERAGE_SCORE" >> $GITHUB_OUTPUT
          echo "Coverage Score: $COVERAGE_SCORE%"

          if (( $(echo "$COVERAGE_SCORE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE_SCORE% below enterprise threshold ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          else
            echo "‚úÖ Coverage $COVERAGE_SCORE% meets enterprise threshold"
          fi

      - name: Enterprise security quality gate
        id: security
        run: |
          echo "üîí Running enterprise security validation..."

          # Security audit with strict requirements
          if [ -f "scripts/security/external_security_audit.py" ]; then
            python scripts/security/external_security_audit.py --strict
          else
            echo "‚ö†Ô∏è Security audit script not found, running alternative checks..."
            bandit -r services/ scripts/ -f json -o bandit-report.json
            safety check --json --output safety-report.json
          fi

          echo "passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Security validation completed"

      - name: Enterprise performance quality gate
        run: |
          echo "‚ö° Running enterprise performance validation..."

          # Performance tests with strict thresholds
          python -m pytest tests/performance/ \
            -v \
            --tb=short \
            -m performance \
            --maxfail=3 \
            --timeout=300 || echo "‚ö†Ô∏è Performance tests completed with warnings"

          echo "‚úÖ Performance validation completed"

      - name: Enterprise code quality gate
        run: |
          echo "üîç Running enterprise code quality validation..."

          # Use ruff for modern linting
          ruff check services/ scripts/ tests/ --output-format=github

          # Format checking
          ruff format --check services/ scripts/ tests/

          echo "‚úÖ Code quality validation completed"

      - name: Enterprise type checking quality gate
        run: |
          echo "üìù Running enterprise type checking validation..."

          mypy services/ scripts/ \
            --ignore-missing-imports \
            --strict-optional \
            --warn-redundant-casts \
            --warn-unused-ignores \
            --show-error-codes

          echo "‚úÖ Type checking validation completed"

      - name: Enterprise dependency vulnerability check
        run: |
          echo "üõ°Ô∏è Running enterprise dependency vulnerability check..."

          # Install pip-audit if not available
          pip install pip-audit

          # Run vulnerability scan with strict policy
          pip-audit \
            --requirement requirements.txt \
            --format=json \
            --output=audit-report.json \
            --strict

          echo "‚úÖ Dependency vulnerability check completed"

      - name: Constitutional compliance validation
        run: |
          echo "üèõÔ∏è Running constitutional compliance validation..."

          if [ -f "scripts/validate_constitutional_compliance.py" ]; then
            python scripts/validate_constitutional_compliance.py --strict
          else
            echo "‚ö†Ô∏è Constitutional compliance script not found"
          fi

          echo "‚úÖ Constitutional compliance validation completed"

      - name: Generate enterprise quality report
        run: |
          echo "üìã Generating enterprise quality report..."

          if [ -f "scripts/cicd/generate_quality_report.py" ]; then
            python scripts/cicd/generate_quality_report.py --enterprise
          else
            echo "‚ö†Ô∏è Quality report generator not found, creating basic report..."
            cat > quality-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "coverage_score": "${{ steps.coverage.outputs.score }}",
            "coverage_threshold": "${{ env.COVERAGE_THRESHOLD }}",
            "security_passed": "${{ steps.security.outputs.passed }}",
            "enterprise_standard": "${{ env.ENTERPRISE_QUALITY_STANDARD }}"
          }
          EOF
          fi

          echo "‚úÖ Enterprise quality report generated"

      - name: Quality gates summary
        id: quality_summary
        run: |
          echo "üìä Enterprise Quality Gates Summary"
          echo "=================================="
          echo "Coverage Score: ${{ steps.coverage.outputs.score }}%"
          echo "Coverage Threshold: ${{ env.COVERAGE_THRESHOLD }}%"
          echo "Security Validation: ${{ steps.security.outputs.passed }}"
          echo ""

          # Determine overall pass/fail
          COVERAGE_OK=$(echo "${{ steps.coverage.outputs.score }} >= ${{ env.COVERAGE_THRESHOLD }}" | bc -l)
          SECURITY_OK="${{ steps.security.outputs.passed }}"

          if [ "$COVERAGE_OK" = "1" ] && [ "$SECURITY_OK" = "true" ]; then
            echo "‚úÖ ALL ENTERPRISE QUALITY GATES PASSED"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå ENTERPRISE QUALITY GATES FAILED"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload quality artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: enterprise-quality-reports
          path: |
            coverage.xml
            coverage.json
            htmlcov/
            bandit-report.json
            safety-report.json
            audit-report.json
            quality-report.json
          retention-days: 30

      - name: Comment PR with quality results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.score }}';
            const threshold = '${{ env.COVERAGE_THRESHOLD }}';
            const passed = '${{ steps.quality_summary.outputs.passed }}';

            const status = passed === 'true' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const emoji = passed === 'true' ? 'üéâ' : '‚ö†Ô∏è';

            const body = `## ${emoji} Enterprise Quality Gates ${status}

            ### Coverage Report
            - **Current Coverage:** ${coverage}%
            - **Required Threshold:** ${threshold}%
            - **Status:** ${coverage >= threshold ? '‚úÖ PASSED' : '‚ùå FAILED'}

            ### Quality Checks
            - **Security Validation:** ${steps.security.outputs.passed === 'true' ? '‚úÖ PASSED' : '‚ùå FAILED'}
            - **Code Quality:** ‚úÖ PASSED
            - **Type Checking:** ‚úÖ PASSED
            - **Dependency Security:** ‚úÖ PASSED

            ${passed === 'false' ? '‚ö†Ô∏è **This PR cannot be merged until all quality gates pass.**' : 'üéâ **All quality gates passed! This PR is ready for review.**'}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
