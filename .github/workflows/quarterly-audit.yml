name: ACGS Quarterly Documentation Audit

on:
  # Run quarterly on the 15th of Jan, Apr, Jul, Oct at 2 AM UTC
  schedule:
    - cron: '0 2 15 1,4,7,10 *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of audit to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - infrastructure
          - api
          - links
          - performance
          - compliance

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  CONSTITUTIONAL_HASH: 'cdd01ef066bc6cf2'

jobs:
  quarterly_audit:
    runs-on: ubuntu-latest
    name: Quarterly Documentation Audit
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup audit environment
        run: |
          echo "üîß Setting up audit environment..."
          
          # Create audit reports directory
          mkdir -p audit_reports
          
          # Install required tools
          npm install -g markdown-link-check
          
          # Set audit metadata
          echo "AUDIT_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          echo "AUDIT_QUARTER=Q$((($(date +%-m)-1)/3+1))_$(date +%Y)" >> $GITHUB_ENV
          echo "AUDIT_TIMESTAMP=$(date)" >> $GITHUB_ENV

      - name: Run comprehensive quarterly audit
        id: audit
        run: |
          echo "üöÄ Starting ACGS Quarterly Documentation Audit..."
          echo "Constitutional Hash: $CONSTITUTIONAL_HASH"
          echo "Audit Quarter: $AUDIT_QUARTER"
          
          # Make audit script executable
          chmod +x tools/audit/quarterly_audit.sh
          
          # Run the audit and capture results
          if ./tools/audit/quarterly_audit.sh > audit_output.log 2>&1; then
            echo "audit_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Quarterly audit completed successfully"
          else
            echo "audit_status=failure" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Quarterly audit completed with issues"
          fi
          
          # Extract key metrics from audit report
          AUDIT_REPORT="audit_reports/quarterly_audit_${AUDIT_QUARTER}_${AUDIT_DATE}.md"
          
          if [ -f "$AUDIT_REPORT" ]; then
            # Extract overall score
            OVERALL_SCORE=$(grep "Overall Score" "$AUDIT_REPORT" | grep -o "[0-9]*\/[0-9]*" | head -1 || echo "0/0")
            OVERALL_PERCENTAGE=$(grep "Overall Score" "$AUDIT_REPORT" | grep -o "([0-9]*%)" | tr -d "()" || echo "0%")
            
            echo "overall_score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
            echo "overall_percentage=$OVERALL_PERCENTAGE" >> $GITHUB_OUTPUT
            
            # Extract status
            if grep -q "EXCELLENT" "$AUDIT_REPORT"; then
              echo "audit_grade=EXCELLENT" >> $GITHUB_OUTPUT
              echo "status_emoji=üü¢" >> $GITHUB_OUTPUT
            elif grep -q "GOOD" "$AUDIT_REPORT"; then
              echo "audit_grade=GOOD" >> $GITHUB_OUTPUT
              echo "status_emoji=üü°" >> $GITHUB_OUTPUT
            elif grep -q "NEEDS IMPROVEMENT" "$AUDIT_REPORT"; then
              echo "audit_grade=NEEDS IMPROVEMENT" >> $GITHUB_OUTPUT
              echo "status_emoji=üü†" >> $GITHUB_OUTPUT
            else
              echo "audit_grade=CRITICAL" >> $GITHUB_OUTPUT
              echo "status_emoji=üî¥" >> $GITHUB_OUTPUT
            fi
          else
            echo "overall_score=0/0" >> $GITHUB_OUTPUT
            echo "overall_percentage=0%" >> $GITHUB_OUTPUT
            echo "audit_grade=ERROR" >> $GITHUB_OUTPUT
            echo "status_emoji=‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: quarterly-audit-report-${{ env.AUDIT_QUARTER }}
          path: |
            audit_reports/
            audit_output.log
          retention-days: 365

      - name: Create audit summary issue
        uses: actions/github-script@v7
        with:
          script: |
            const auditQuarter = process.env.AUDIT_QUARTER;
            const auditDate = process.env.AUDIT_TIMESTAMP;
            const constitutionalHash = process.env.CONSTITUTIONAL_HASH;
            const overallScore = '${{ steps.audit.outputs.overall_score }}';
            const overallPercentage = '${{ steps.audit.outputs.overall_percentage }}';
            const auditGrade = '${{ steps.audit.outputs.audit_grade }}';
            const statusEmoji = '${{ steps.audit.outputs.status_emoji }}';
            const auditStatus = '${{ steps.audit.outputs.audit_status }}';
            
            const issueTitle = `${statusEmoji} Quarterly Documentation Audit ${auditQuarter} - ${auditGrade}`;
            
            const issueBody = `# ACGS Quarterly Documentation Audit Report
            
            **Audit Period**: ${auditQuarter}  
            **Audit Date**: ${auditDate}  
            **Constitutional Hash**: \`${constitutionalHash}\`  
            **Overall Score**: ${overallScore} (${overallPercentage})  
            **Grade**: ${statusEmoji} **${auditGrade}**
            
            ## Quick Summary
            
            This automated quarterly audit has been completed for the ACGS documentation system. The audit covers:
            
            - ‚úÖ Infrastructure documentation alignment
            - ‚úÖ Service API documentation accuracy  
            - ‚úÖ Cross-reference validation
            - ‚úÖ Performance metrics consistency
            - ‚úÖ Constitutional compliance verification
            
            ## Results Overview
            
            | Category | Status |
            |----------|--------|
            | **Overall Status** | ${statusEmoji} ${auditGrade} |
            | **Overall Score** | ${overallScore} (${overallPercentage}) |
            | **Constitutional Hash** | \`${constitutionalHash}\` ‚úÖ |
            | **Audit Status** | ${auditStatus === 'success' ? '‚úÖ Completed Successfully' : '‚ö†Ô∏è Completed with Issues'} |
            
            ## Next Steps
            
            ${auditStatus === 'success' ? 
              'üéâ **Excellent work!** The documentation audit passed with flying colors. No immediate action required.' :
              'üìã **Action Required**: Please review the detailed audit report and address the identified issues.'
            }
            
            ### Immediate Actions Required
            
            ${auditGrade === 'CRITICAL' ? 
              'üö® **CRITICAL**: Immediate attention required for constitutional compliance and documentation accuracy.' :
              auditGrade === 'NEEDS IMPROVEMENT' ?
              '‚ö†Ô∏è **IMPROVEMENT NEEDED**: Several documentation issues need to be addressed.' :
              '‚úÖ **MAINTENANCE**: Regular maintenance and minor improvements recommended.'
            }
            
            ## Detailed Report
            
            üìä **Download the complete audit report** from the [GitHub Actions artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).
            
            The detailed report includes:
            - Infrastructure alignment analysis
            - Service API documentation review
            - Link validation results
            - Performance metrics consistency check
            - Constitutional compliance verification
            - Specific recommendations and action items
            
            ## Constitutional Compliance
            
            ${auditGrade === 'EXCELLENT' || auditGrade === 'GOOD' ?
              '‚úÖ **Constitutional compliance verified** - Hash `' + constitutionalHash + '` is properly maintained across all documentation.' :
              '‚ùå **Constitutional compliance issues detected** - Hash `' + constitutionalHash + '` may be missing from some documentation files.'
            }
            
            ## Follow-up Actions
            
            - [ ] Review detailed audit report
            - [ ] Address critical issues (if any)
            - [ ] Update documentation as recommended
            - [ ] Verify constitutional hash compliance
            - [ ] Schedule next quarterly audit review
            
            ---
            
            **Automated Audit**: This issue was created automatically by the ACGS Quarterly Documentation Audit workflow.  
            **Next Audit**: Scheduled for next quarter (${new Date(Date.now() + 90*24*60*60*1000).toISOString().split('T')[0]})  
            **Constitutional Hash**: \`${constitutionalHash}\` ‚úÖ
            `;
            
            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: [
                'documentation',
                'quarterly-audit',
                'constitutional-compliance',
                auditStatus === 'success' ? 'audit-passed' : 'audit-issues',
                auditGrade.toLowerCase().replace(' ', '-')
              ]
            });
            
            console.log(`Created audit summary issue: ${issue.data.html_url}`);

      - name: Send Slack notification
        if: always()
        run: |
          # This would integrate with Slack webhook if configured
          echo "üì¢ Quarterly audit completed: ${{ steps.audit.outputs.audit_grade }}"
          echo "Score: ${{ steps.audit.outputs.overall_score }} (${{ steps.audit.outputs.overall_percentage }})"
          echo "Constitutional Hash: $CONSTITUTIONAL_HASH ‚úÖ"
          
          # Example Slack webhook call (uncomment and configure webhook URL)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data "{\"text\":\"${{ steps.audit.outputs.status_emoji }} ACGS Quarterly Audit $AUDIT_QUARTER: ${{ steps.audit.outputs.audit_grade }} (${{ steps.audit.outputs.overall_percentage }})\\nConstitutional Hash: \`$CONSTITUTIONAL_HASH\` ‚úÖ\"}" \
          #   $SLACK_WEBHOOK_URL

      - name: Update audit tracking
        run: |
          echo "üìä Updating audit tracking metrics..."
          
          # Create or update audit tracking file
          TRACKING_FILE="audit_reports/audit_tracking.json"
          
          if [ ! -f "$TRACKING_FILE" ]; then
            echo '{"audits": []}' > "$TRACKING_FILE"
          fi
          
          # Add current audit results
          AUDIT_ENTRY=$(cat << EOF
          {
            "quarter": "$AUDIT_QUARTER",
            "date": "$AUDIT_TIMESTAMP",
            "overall_score": "${{ steps.audit.outputs.overall_score }}",
            "overall_percentage": "${{ steps.audit.outputs.overall_percentage }}",
            "grade": "${{ steps.audit.outputs.audit_grade }}",
            "status": "${{ steps.audit.outputs.audit_status }}",
            "constitutional_hash": "$CONSTITUTIONAL_HASH",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          )
          
          # Update tracking file (simplified - in production, use jq for proper JSON manipulation)
          echo "Audit entry created for tracking: $AUDIT_ENTRY"

      - name: Audit completion summary
        run: |
          echo "üéØ ACGS Quarterly Documentation Audit Summary"
          echo "=============================================="
          echo "Quarter: $AUDIT_QUARTER"
          echo "Date: $AUDIT_TIMESTAMP"
          echo "Overall Score: ${{ steps.audit.outputs.overall_score }} (${{ steps.audit.outputs.overall_percentage }})"
          echo "Grade: ${{ steps.audit.outputs.status_emoji }} ${{ steps.audit.outputs.audit_grade }}"
          echo "Status: ${{ steps.audit.outputs.audit_status }}"
          echo "Constitutional Hash: $CONSTITUTIONAL_HASH ‚úÖ"
          echo ""
          echo "üìä Detailed report available in artifacts"
          echo "üìã Summary issue created for tracking"
          echo "üîÑ Next audit scheduled for next quarter"
          echo ""
          
          if [ "${{ steps.audit.outputs.audit_status }}" = "success" ]; then
            echo "‚úÖ Audit completed successfully - no immediate action required"
          else
            echo "‚ö†Ô∏è Audit completed with issues - please review and address findings"
          fi
