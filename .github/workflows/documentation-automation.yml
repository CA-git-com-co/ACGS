name: ACGS-1 Documentation Automation

on:
  push:
    branches: [main, master, develop]
    paths:
      - 'docs/**'
      - 'README.md'
      - '**/*.py'
      - '**/*.rs'
      - '**/*.js'
      - '**/*.ts'
  pull_request:
    branches: [main, master, develop]
    paths:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:
    inputs:
      doc_type:
        description: 'Type of documentation to generate'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - architecture
          - deployment
          - user_guide

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # API Documentation Generation
  api_documentation:
    runs-on: ubuntu-latest
    name: API Documentation Generation
    if: github.event.inputs.doc_type == 'api' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme sphinxcontrib-openapi pydantic fastapi

      - name: Install Node.js dependencies
        run: |
          npm install -g @apidevtools/swagger-parser redoc-cli

      - name: Generate Python API documentation
        run: |
          echo "📚 Generating Python API documentation..."

          # Create docs directory structure
          mkdir -p docs/api/python

          # Generate Sphinx documentation
          sphinx-quickstart -q -p "ACGS-1 API" -a "ACGS Team" -v "1.0" --ext-autodoc --ext-viewcode docs/api/python

          # Configure Sphinx
          cat >> docs/api/python/conf.py << EOF

          import os
          import sys
          sys.path.insert(0, os.path.abspath('../../../'))

          extensions.extend([
              'sphinx.ext.autodoc',
              'sphinx.ext.viewcode',
              'sphinx.ext.napoleon',
              'sphinxcontrib.openapi'
          ])

          html_theme = 'sphinx_rtd_theme'
          EOF

          # Generate API docs
          cd docs/api/python
          sphinx-apidoc -o . ../../../services/
          make html
          cd ../../..

          echo "✅ Python API documentation generated"

      - name: Generate OpenAPI documentation
        run: |
          echo "📖 Generating OpenAPI documentation..."

          mkdir -p docs/api/openapi

          # Extract OpenAPI specs from FastAPI services
          find services -name "main.py" | while read service_main; do
            service_name=$(dirname "$service_main" | xargs basename)
            echo "Extracting OpenAPI spec for $service_name..."
            
            # This would extract OpenAPI spec from FastAPI app
            # python extract_openapi.py "$service_main" > "docs/api/openapi/${service_name}-openapi.json"
          done

          echo "✅ OpenAPI documentation generated"

      - name: Upload API documentation
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: docs/api/
          retention-days: 30

  # Architecture Documentation
  architecture_documentation:
    runs-on: ubuntu-latest
    name: Architecture Documentation
    if: github.event.inputs.doc_type == 'architecture' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install documentation tools
        run: |
          npm install -g @mermaid-js/mermaid-cli
          npm install -g madge

      - name: Generate architecture diagrams
        run: |
          echo "🏗️ Generating architecture diagrams..."

          mkdir -p docs/architecture/diagrams

          # Create system architecture diagram
          cat > docs/architecture/diagrams/system-architecture.mmd << EOF
          graph TB
              subgraph "ACGS-1 Constitutional Governance System"
                  subgraph "Frontend Layer"
                      UI[Constitutional UI]
                      API_GW[API Gateway]
                  end
                  
                  subgraph "Core Services"
                      AUTH[Authentication Service]
                      AC[Constitutional AI Service]
                      INT[Integrity Service]
                      FV[Formal Verification Service]
                      GS[Governance Synthesis Service]
                      PGC[Policy Governance Compiler]
                      EC[Evolutionary Computation Service]
                  end
                  
                  subgraph "Data Layer"
                      DB[(PostgreSQL)]
                      CACHE[(Redis)]
                      S3[(S3 Storage)]
                  end
                  
                  subgraph "Blockchain Layer"
                      SOL[Solana Network]
                      SMART[Smart Contracts]
                  end
              end
              
              UI --> API_GW
              API_GW --> AUTH
              API_GW --> AC
              API_GW --> INT
              API_GW --> FV
              API_GW --> GS
              API_GW --> PGC
              API_GW --> EC
              
              AUTH --> DB
              AC --> DB
              INT --> DB
              FV --> DB
              GS --> DB
              PGC --> DB
              EC --> DB
              
              AC --> CACHE
              GS --> CACHE
              
              INT --> S3
              PGC --> S3
              
              AC --> SOL
              INT --> SMART
          EOF

          # Generate diagram images
          mmdc -i docs/architecture/diagrams/system-architecture.mmd -o docs/architecture/diagrams/system-architecture.png

          echo "✅ Architecture diagrams generated"

      - name: Generate dependency graphs
        run: |
          echo "🔗 Generating dependency graphs..."

          # Generate dependency graphs for services
          find services -name "package.json" | while read package_file; do
            service_dir=$(dirname "$package_file")
            service_name=$(basename "$service_dir")
            
            echo "Generating dependency graph for $service_name..."
            cd "$service_dir"
            madge --image "../../../docs/architecture/diagrams/${service_name}-dependencies.png" .
            cd - > /dev/null
          done

          echo "✅ Dependency graphs generated"

      - name: Upload architecture documentation
        uses: actions/upload-artifact@v4
        with:
          name: architecture-documentation
          path: docs/architecture/
          retention-days: 30

  # Deployment Documentation
  deployment_documentation:
    runs-on: ubuntu-latest
    name: Deployment Documentation
    if: github.event.inputs.doc_type == 'deployment' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Generate deployment documentation
        run: |
          echo "🚀 Generating deployment documentation..."

          mkdir -p docs/deployment/generated

          # Generate environment-specific deployment guides
          for env in development staging production; do
            cat > "docs/deployment/generated/${env}-deployment.md" << EOF
          # ACGS-1 ${env^} Deployment Guide

          This document provides step-by-step instructions for deploying ACGS-1 to the ${env} environment.

          ## Prerequisites

          - Docker and Docker Compose
          - Kubernetes cluster (for staging/production)
          - Terraform (for infrastructure)
          - Required environment variables

          ## Environment Configuration

          \`\`\`bash
          # Set environment
          export ENVIRONMENT=${env}

          # Load environment-specific variables
          source config/environments/${env}.env
          \`\`\`

          ## Infrastructure Deployment

          \`\`\`bash
          # Deploy infrastructure
          ./scripts/terraform/deploy-infrastructure.sh apply --environment ${env}
          \`\`\`

          ## Application Deployment

          \`\`\`bash
          # Deploy application
          ./scripts/deploy.sh --environment ${env}
          \`\`\`

          ## Verification

          \`\`\`bash
          # Run health checks
          ./scripts/health-check.sh --environment ${env}
          \`\`\`

          ## Troubleshooting

          Common issues and solutions for ${env} deployments.

          EOF
          done

          echo "✅ Deployment documentation generated"

      - name: Upload deployment documentation
        uses: actions/upload-artifact@v4
        with:
          name: deployment-documentation
          path: docs/deployment/
          retention-days: 30

  # User Guide Documentation
  user_guide_documentation:
    runs-on: ubuntu-latest
    name: User Guide Documentation
    if: github.event.inputs.doc_type == 'user_guide' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == ''
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

      - name: Generate user guide
        run: |
          echo "👥 Generating user guide documentation..."

          # Create MkDocs configuration
          cat > mkdocs.yml << EOF
          site_name: ACGS-1 Constitutional Governance System
          site_description: User Guide for ACGS-1 Constitutional Governance System
          site_author: ACGS Development Team

          theme:
            name: material
            palette:
              primary: blue
              accent: light blue
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - search.highlight

          plugins:
            - search
            - mermaid2

          nav:
            - Home: index.md
            - Getting Started:
              - Overview: getting-started/overview.md
              - Installation: getting-started/installation.md
              - Quick Start: getting-started/quick-start.md
            - User Guide:
              - Constitutional Documents: user-guide/constitutional-documents.md
              - Governance Proposals: user-guide/governance-proposals.md
              - Voting System: user-guide/voting-system.md
              - Policy Management: user-guide/policy-management.md
            - API Reference:
              - Authentication: api/authentication.md
              - Constitutional AI: api/constitutional-ai.md
              - Governance: api/governance.md
            - Administration:
              - Deployment: admin/deployment.md
              - Monitoring: admin/monitoring.md
              - Troubleshooting: admin/troubleshooting.md

          markdown_extensions:
            - admonition
            - codehilite
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:mermaid2.fence_mermaid
          EOF

          # Create documentation structure
          mkdir -p docs/{getting-started,user-guide,api,admin}

          # Generate index page
          cat > docs/index.md << EOF
          # ACGS-1 Constitutional Governance System

          Welcome to the ACGS-1 Constitutional Governance System documentation.

          ## What is ACGS-1?

          ACGS-1 is a comprehensive constitutional governance system that combines:

          - **Constitutional AI** for intelligent governance
          - **Formal Verification** for policy validation
          - **Blockchain Integration** for transparency
          - **Democratic Processes** for stakeholder participation

          ## Quick Links

          - [Getting Started](getting-started/overview.md)
          - [User Guide](user-guide/constitutional-documents.md)
          - [API Reference](api/authentication.md)
          - [Administration](admin/deployment.md)

          ## System Architecture

          \`\`\`mermaid
          graph TB
              A[Citizens] --> B[Constitutional UI]
              B --> C[API Gateway]
              C --> D[Constitutional AI]
              C --> E[Governance Services]
              D --> F[Blockchain]
              E --> F
          \`\`\`
          EOF

          # Build documentation
          mkdocs build

          echo "✅ User guide documentation generated"

      - name: Upload user guide documentation
        uses: actions/upload-artifact@v4
        with:
          name: user-guide-documentation
          path: site/
          retention-days: 30

  # Documentation Site Deployment
  deploy_documentation:
    runs-on: ubuntu-latest
    name: Deploy Documentation Site
    needs:
      [
        api_documentation,
        architecture_documentation,
        deployment_documentation,
        user_guide_documentation,
      ]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == '')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download all documentation artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/docs/

      - name: Combine documentation
        run: |
          echo "📚 Combining all documentation..."

          mkdir -p public

          # Copy user guide as main site
          if [ -d "/tmp/docs/user-guide-documentation" ]; then
            cp -r /tmp/docs/user-guide-documentation/* public/
          fi

          # Add API documentation
          if [ -d "/tmp/docs/api-documentation" ]; then
            mkdir -p public/api-docs
            cp -r /tmp/docs/api-documentation/* public/api-docs/
          fi

          # Add architecture documentation
          if [ -d "/tmp/docs/architecture-documentation" ]; then
            mkdir -p public/architecture
            cp -r /tmp/docs/architecture-documentation/* public/architecture/
          fi

          # Add deployment documentation
          if [ -d "/tmp/docs/deployment-documentation" ]; then
            mkdir -p public/deployment
            cp -r /tmp/docs/deployment-documentation/* public/deployment/
          fi

          # Create index page if it doesn't exist
          if [ ! -f "public/index.html" ]; then
            cat > public/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>ACGS-1 Documentation</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #2c3e50; }
                  .section { margin: 20px 0; }
                  a { color: #3498db; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>ACGS-1 Constitutional Governance System Documentation</h1>
              
              <div class="section">
                  <h2>Available Documentation</h2>
                  <ul>
                      <li><a href="api-docs/">API Documentation</a></li>
                      <li><a href="architecture/">Architecture Documentation</a></li>
                      <li><a href="deployment/">Deployment Documentation</a></li>
                  </ul>
              </div>
              
              <div class="section">
                  <p>Generated on: $(date)</p>
                  <p>Commit: ${{ github.sha }}</p>
              </div>
          </body>
          </html>
          EOF
          fi

          echo "✅ Documentation combined"

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Documentation Quality Check
  documentation_quality_check:
    runs-on: ubuntu-latest
    name: Documentation Quality Check
    needs:
      [
        api_documentation,
        architecture_documentation,
        deployment_documentation,
        user_guide_documentation,
      ]
    if: always()
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install documentation linters
        run: |
          npm install -g markdownlint-cli
          pip install doc8

      - name: Lint Markdown files
        run: |
          echo "📝 Linting Markdown files..."

          # Create markdownlint config
          cat > .markdownlint.json << EOF
          {
            "MD013": { "line_length": 120 },
            "MD033": false,
            "MD041": false
          }
          EOF

          # Lint all markdown files
          markdownlint docs/ README.md || true

          echo "✅ Markdown linting completed"

      - name: Check documentation coverage
        run: |
          echo "📊 Checking documentation coverage..."

          # Count documented vs undocumented files
          TOTAL_FILES=$(find services -name "*.py" -o -name "*.js" -o -name "*.ts" | wc -l)
          DOCUMENTED_FILES=$(find docs -name "*.md" | wc -l)

          COVERAGE=$((DOCUMENTED_FILES * 100 / TOTAL_FILES))

          echo "Documentation coverage: $COVERAGE%"
          echo "Total files: $TOTAL_FILES"
          echo "Documented files: $DOCUMENTED_FILES"

          if [ $COVERAGE -lt 50 ]; then
            echo "⚠️ Documentation coverage is below 50%"
          else
            echo "✅ Documentation coverage is acceptable"
          fi

      - name: Documentation summary
        run: |
          echo "📋 Documentation Generation Summary"
          echo "=================================="
          echo "API Documentation: ${{ needs.api_documentation.result }}"
          echo "Architecture Documentation: ${{ needs.architecture_documentation.result }}"
          echo "Deployment Documentation: ${{ needs.deployment_documentation.result }}"
          echo "User Guide Documentation: ${{ needs.user_guide_documentation.result }}"
          echo ""
          echo "📚 Documentation site available at GitHub Pages"
