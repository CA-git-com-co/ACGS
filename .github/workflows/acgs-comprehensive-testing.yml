name: ACGS Comprehensive Testing Pipeline
# Constitutional Hash: cdd01ef066bc6cf2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # === CONSTITUTIONAL COMPLIANCE VALIDATION ===
  constitutional-compliance:
    name: Constitutional Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Validate constitutional hash presence
      run: |
        echo "Validating constitutional hash in all files..."
        python -c "
        import os
        import sys
        
        constitutional_hash = 'cdd01ef066bc6cf2'
        violations = []
        
        for root, dirs, files in os.walk('.'):
            # Skip hidden directories and common ignore patterns
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
            
            for file in files:
                if file.endswith(('.py', '.md', '.yml', '.yaml', '.json')):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                            if constitutional_hash not in content:
                                violations.append(filepath)
                    except:
                        pass
        
        if violations:
            print(f'Constitutional hash missing in {len(violations)} files:')
            for v in violations[:10]:  # Show first 10
                print(f'  - {v}')
            if len(violations) > 10:
                print(f'  ... and {len(violations) - 10} more')
            sys.exit(1)
        else:
            print(f'Constitutional hash validation passed for all files')
        "
    
    - name: Run constitutional compliance tests
      run: |
        pytest -xvs -m constitutional --tb=short
        
    - name: Upload constitutional compliance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: constitutional-compliance-report
        path: |
          htmlcov/
          coverage.xml
          constitutional-compliance-*.json

  # === UNIT TESTS ===
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        service: 
          - constitutional-ai
          - integrity
          - formal-verification
          - governance-synthesis
          - policy-governance
          - evolutionary-computation
          - code-analysis
          - authentication
          - api-gateway
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Start test infrastructure
      run: |
        docker-compose -f docker-compose.test.yml up -d postgres redis
        sleep 10
    
    - name: Run database migrations
      run: |
        cd services/shared
        alembic upgrade head
    
    - name: Run unit tests for ${{ matrix.service }}
      run: |
        pytest -xvs services/core/${{ matrix.service }}/tests/ \
               services/platform_services/${{ matrix.service }}/tests/ \
               -m "unit and not slow" \
               --cov=services/core/${{ matrix.service }} \
               --cov=services/platform_services/${{ matrix.service }} \
               --cov-report=xml:coverage-${{ matrix.service }}.xml \
               --tb=short
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.service }}
        path: coverage-${{ matrix.service }}.xml
    
    - name: Stop test infrastructure
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down

  # === INTEGRATION TESTS ===
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: acgs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6389:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run database migrations
      run: |
        cd services/shared
        alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
    
    - name: Start ACGS services
      run: |
        # Start core services in background
        python services/core/constitutional-ai/main.py &
        python services/core/integrity/main.py &
        python services/platform_services/authentication/main.py &
        sleep 15
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
        REDIS_URL: redis://localhost:6389/0
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    
    - name: Run integration tests
      run: |
        pytest -xvs -m integration \
               --tb=short \
               --cov=services \
               --cov-report=xml:coverage-integration.xml
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
        REDIS_URL: redis://localhost:6389/0
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          coverage-integration.xml
          integration-test-*.json

  # === PERFORMANCE TESTS ===
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: acgs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6389:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run database migrations
      run: |
        cd services/shared
        alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
    
    - name: Start ACGS services for performance testing
      run: |
        python services/core/constitutional-ai/main.py &
        python services/core/integrity/main.py &
        python services/platform_services/authentication/main.py &
        sleep 20
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
        REDIS_URL: redis://localhost:6389/0
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    
    - name: Run performance tests
      run: |
        pytest -xvs -m performance \
               --tb=short \
               --timeout=300
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
        REDIS_URL: redis://localhost:6389/0
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    
    - name: Validate performance targets
      run: |
        python -c "
        import json
        import sys
        
        # Load performance test results
        try:
            with open('performance-test-results.json', 'r') as f:
                results = json.load(f)
            
            failed_targets = []
            
            for service, metrics in results.items():
                if not metrics.get('meets_all_targets', False):
                    failed_targets.append(f'{service}: {metrics.get(\"failure_reason\", \"Unknown\")}')
            
            if failed_targets:
                print('Performance targets not met:')
                for failure in failed_targets:
                    print(f'  - {failure}')
                sys.exit(1)
            else:
                print('All performance targets met successfully')
        except FileNotFoundError:
            print('Performance test results not found')
            sys.exit(1)
        "
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          performance-test-*.json
          performance-reports/

  # === MULTI-TENANT TESTS ===
  multi-tenant-tests:
    name: Multi-Tenant Validation
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: acgs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5439:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6389:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run database migrations
      run: |
        cd services/shared
        alembic upgrade head
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
    
    - name: Start ACGS services
      run: |
        python services/core/constitutional-ai/main.py &
        python services/platform_services/authentication/main.py &
        sleep 15
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
        REDIS_URL: redis://localhost:6389/0
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    
    - name: Run multi-tenant tests
      run: |
        pytest -xvs -m multi_tenant \
               --tb=short
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5439/acgs_test
        REDIS_URL: redis://localhost:6389/0
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    
    - name: Upload multi-tenant test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: multi-tenant-test-results
        path: multi-tenant-*.json

  # === COMPREHENSIVE TEST REPORT ===
  test-report:
    name: Generate Comprehensive Test Report
    runs-on: ubuntu-latest
    needs: [constitutional-compliance, unit-tests, integration-tests, performance-tests, multi-tenant-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jinja2 matplotlib seaborn pandas
    
    - name: Generate comprehensive test report
      run: |
        python scripts/generate_test_report.py \
               --constitutional-compliance constitutional-compliance-report/ \
               --unit-tests coverage-*/ \
               --integration-tests integration-test-results/ \
               --performance-tests performance-test-results/ \
               --multi-tenant-tests multi-tenant-test-results/ \
               --output comprehensive-test-report.html
    
    - name: Upload comprehensive test report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: |
          comprehensive-test-report.html
          test-summary.json
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = JSON.parse(fs.readFileSync('test-summary.json', 'utf8'));
            
            const comment = `
            ## 🧪 ACGS Comprehensive Test Results
            **Constitutional Hash**: \`${summary.constitutional_hash}\`
            
            ### 📊 Test Summary
            - **Constitutional Compliance**: ${summary.constitutional_compliance.passed ? '✅' : '❌'} (${summary.constitutional_compliance.compliance_rate}%)
            - **Unit Tests**: ${summary.unit_tests.success_rate}% (${summary.unit_tests.passed}/${summary.unit_tests.total})
            - **Integration Tests**: ${summary.integration_tests.success_rate}% (${summary.integration_tests.passed}/${summary.integration_tests.total})
            - **Performance Tests**: ${summary.performance_tests.targets_met ? '✅' : '❌'} (P99: ${summary.performance_tests.p99_latency}ms, RPS: ${summary.performance_tests.rps})
            - **Multi-Tenant Tests**: ${summary.multi_tenant_tests.success_rate}% (${summary.multi_tenant_tests.violations} violations)
            
            ### 🎯 Overall Status
            ${summary.overall_status === 'PASS' ? '✅ All tests passed' : '❌ Some tests failed'}
            
            **Coverage**: ${summary.overall_coverage}%
            **Production Ready**: ${summary.production_ready ? 'Yes' : 'No'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read test summary:', error);
          }

  # === DEPLOYMENT GATE ===
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [constitutional-compliance, unit-tests, integration-tests, performance-tests, multi-tenant-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Validate all tests passed
      run: |
        echo "Validating deployment readiness..."
        
        # Check if all required jobs passed
        if [[ "${{ needs.constitutional-compliance.result }}" != "success" ]]; then
          echo "❌ Constitutional compliance tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
          echo "❌ Performance tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.multi-tenant-tests.result }}" != "success" ]]; then
          echo "❌ Multi-tenant tests failed"
          exit 1
        fi
        
        echo "✅ All tests passed - deployment approved"
        echo "🚀 ACGS is ready for production deployment"
    
    - name: Trigger deployment
      if: success()
      run: |
        echo "Triggering production deployment..."
        # This would trigger actual deployment pipeline
        echo "Constitutional Hash: ${{ env.CONSTITUTIONAL_HASH }}"
        echo "Deployment approved at $(date)"
