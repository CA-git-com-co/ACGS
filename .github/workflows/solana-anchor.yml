name: Solana Anchor Programs CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'blockchain/**'
      - 'quantumagi_core/**'
      - '.github/workflows/solana-anchor.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'blockchain/**'
      - 'quantumagi_core/**'
      - '.github/workflows/solana-anchor.yml'
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM for comprehensive blockchain testing

permissions:
  contents: read
  security-events: write

env:
  SOLANA_CLI_VERSION: 1.18.22
  ANCHOR_CLI_VERSION: 0.29.0
  NODE_VERSION: '18'
  RUST_TOOLCHAIN: 1.81.0

jobs:
  anchor-test:
    runs-on: ubuntu-latest
    name: Anchor Program Tests
    strategy:
      matrix:
        project: ['blockchain']
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check if project exists
        id: check_project
        run: |
          if [ -d "${{ matrix.project }}" ] && [ -f "${{ matrix.project }}/Anchor.toml" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Warning: Project ${{ matrix.project }} does not exist or has no Anchor.toml"
          fi

      - name: Install Rust
        if: steps.check_project.outputs.exists == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        if: steps.check_project.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ matrix.project }}/target/
          key: ${{ runner.os }}-cargo-${{ matrix.project }}-${{ hashFiles(format('{0}/**/Cargo.lock', matrix.project)) }}
          restore-keys: ${{ runner.os }}-cargo-${{ matrix.project }}-

      - name: Install Solana CLI with enhanced fallback strategy
        if: steps.check_project.outputs.exists == 'true'
        run: |
          echo "üîß Installing Solana CLI v${{ env.SOLANA_CLI_VERSION }} with enhanced fallback strategy..."

          # Enhanced primary installation method with better error detection
          install_solana_primary() {
            echo "Attempting primary installation method..."
            local temp_script=$(mktemp)

            # Download install script with timeout and error checking
            if timeout 60 curl -sSfL --retry 3 --retry-delay 5 "https://release.solana.com/v${{ env.SOLANA_CLI_VERSION }}/install" -o "$temp_script"; then
              echo "Install script downloaded successfully"
              chmod +x "$temp_script"

              # Execute with timeout and proper error handling
              if timeout 300 bash "$temp_script"; then
                rm -f "$temp_script"
                return 0
              else
                echo "Primary installation script execution failed with exit code $?"
                rm -f "$temp_script"
                return 1
              fi
            else
              echo "Failed to download install script (curl error: $?)"
              rm -f "$temp_script"
              return 1
            fi
          }

          # Enhanced fallback installation method
          install_solana_fallback() {
            echo "Primary method failed, trying enhanced fallback installation..."
            local temp_dir=$(mktemp -d)
            cd "$temp_dir"

            # Try multiple download sources
            SOLANA_RELEASE_URL="https://github.com/solana-labs/solana/releases/download/v${{ env.SOLANA_CLI_VERSION }}/solana-release-x86_64-unknown-linux-gnu.tar.bz2"

            echo "Downloading from GitHub releases..."
            if timeout 120 wget --retry-connrefused --waitretry=5 --read-timeout=20 --timeout=15 -t 3 -O solana-release.tar.bz2 "$SOLANA_RELEASE_URL"; then
              echo "Download successful, extracting..."
              if tar -xjf solana-release.tar.bz2; then
                echo "Extraction successful, installing..."
                mkdir -p "$HOME/.local/share/solana/install/active_release"
                cp -r solana-release/* "$HOME/.local/share/solana/install/active_release/"
                chmod +x "$HOME/.local/share/solana/install/active_release/bin/"*
                cd - && rm -rf "$temp_dir"
                return 0
              else
                echo "Failed to extract archive"
                cd - && rm -rf "$temp_dir"
                return 1
              fi
            else
              echo "Failed to download from GitHub releases"
              cd - && rm -rf "$temp_dir"
              return 1
            fi
          }

          # Alternative installation using package manager
          install_solana_alternative() {
            echo "Trying alternative installation via package manager..."
            # Install dependencies
            sudo apt-get update -qq
            sudo apt-get install -y build-essential pkg-config libudev-dev

            # Try installing via cargo if available
            if command -v cargo >/dev/null 2>&1; then
              echo "Installing Solana CLI via cargo..."
              cargo install solana-cli --version ${{ env.SOLANA_CLI_VERSION }} --root "$HOME/.local/share/solana/install/active_release"
              return $?
            else
              echo "Cargo not available for alternative installation"
              return 1
            fi
          }

          # Try installation methods in order
          if install_solana_primary; then
            echo "‚úÖ Primary installation successful"
          elif install_solana_fallback; then
            echo "‚úÖ Fallback installation successful"
          elif install_solana_alternative; then
            echo "‚úÖ Alternative installation successful"
          else
            echo "‚ùå All installation methods failed"
            exit 1
          fi

          # Configure PATH and verify installation
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Enhanced verification with retry
          echo "Verifying Solana CLI installation..."
          for attempt in 1 2 3; do
            if solana --version; then
              echo "‚úÖ Solana CLI v$(solana --version | head -n1) installed and verified successfully"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Solana CLI installation verification failed after 3 attempts"
                echo "PATH: $PATH"
                echo "Solana binary location:"
                find "$HOME/.local/share/solana" -name "solana" -type f 2>/dev/null || echo "No solana binary found"
                exit 1
              else
                echo "‚ö†Ô∏è Verification attempt $attempt failed, retrying..."
                sleep 5
              fi
            fi
          done

      - name: Install Anchor CLI with retry logic
        if: steps.check_project.outputs.exists == 'true'
        run: |
          echo "üîß Installing Anchor CLI v${{ env.ANCHOR_CLI_VERSION }} with retry logic..."

          install_anchor() {
            npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }}
          }

          # Retry logic for Anchor CLI installation
          for attempt in 1 2 3; do
            echo "Attempt $attempt/3: Installing Anchor CLI..."
            if install_anchor; then
              echo "‚úÖ Anchor CLI installed successfully on attempt $attempt"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install Anchor CLI after 3 attempts"
                exit 1
              else
                echo "‚ö†Ô∏è Attempt $attempt failed, retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done

          # Verify installation
          if anchor --version; then
            echo "‚úÖ Anchor CLI verification successful"
          else
            echo "‚ùå Anchor CLI verification failed"
            exit 1
          fi

      - name: Set up Node.js
        if: steps.check_project.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install Node.js dependencies
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        run: |
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Rust format check
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        run: cargo fmt --all -- --check

      - name: Rust clippy
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build Anchor programs with strict compilation
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        env:
          RUSTFLAGS: "-Dwarnings -Dclippy::all -Dclippy::pedantic"
        run: |
          solana config set --url localhost
          anchor build

      - name: Run Anchor tests
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ${{ matrix.project }}
        run: |
          # Start local validator in background
          solana-test-validator --reset --quiet &
          VALIDATOR_PID=$!
          sleep 15
          
          # Wait for validator to be ready
          timeout 30 bash -c 'until solana cluster-version; do sleep 1; done'
          
          # Run comprehensive test suite
          echo "Running comprehensive test suite..."
          if [ -f scripts/run_comprehensive_tests.sh ]; then
            chmod +x scripts/run_comprehensive_tests.sh
            ./scripts/run_comprehensive_tests.sh || TEST_RESULT=$?
          else
            anchor test --skip-local-validator || TEST_RESULT=$?
          fi
          
          # Cleanup
          kill $VALIDATOR_PID || true
          
          # Exit with test result
          exit ${TEST_RESULT:-0}

      - name: Upload test results
        if: always() && steps.check_project.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: anchor-test-results-${{ matrix.project }}
          path: |
            ${{ matrix.project }}/target/
            ${{ matrix.project }}/test-ledger/
          retention-days: 7

  security-audit:
    runs-on: ubuntu-latest
    name: Rust Security Audit
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Install security tools with enhanced compatibility
        run: |
          echo "üîß Installing security tools for Rust ${{ env.RUST_TOOLCHAIN }}..."

          # Get Rust version for conditional installation
          RUST_VERSION="${{ env.RUST_TOOLCHAIN }}"
          echo "Using Rust toolchain: $RUST_VERSION"

          # Enhanced cargo-audit installation with retry logic
          install_cargo_audit() {
            echo "Installing cargo-audit v0.21.1 for Rust 1.81.0 compatibility..."
            for attempt in 1 2 3; do
              echo "Attempt $attempt/3: Installing cargo-audit..."
              if cargo install cargo-audit --version 0.21.1 --locked; then
                echo "‚úÖ cargo-audit installed successfully on attempt $attempt"
                return 0
              else
                if [ $attempt -eq 3 ]; then
                  echo "‚ùå Failed to install cargo-audit after 3 attempts"
                  return 1
                else
                  echo "‚ö†Ô∏è Attempt $attempt failed, retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
          }

          # Enhanced cargo-deny installation with version compatibility
          install_cargo_deny() {
            echo "Installing cargo-deny for enhanced security scanning..."
            for attempt in 1 2 3; do
              echo "Attempt $attempt/3: Installing cargo-deny..."
              if [[ "$RUST_VERSION" < "1.85.0" ]]; then
                echo "Installing cargo-deny v0.17.0 for Rust < 1.85.0"
                if cargo install cargo-deny --version 0.17.0 --locked; then
                  echo "‚úÖ cargo-deny installed successfully on attempt $attempt"
                  return 0
                fi
              else
                echo "Installing latest cargo-deny for Rust >= 1.85.0"
                if cargo install cargo-deny --locked; then
                  echo "‚úÖ cargo-deny installed successfully on attempt $attempt"
                  return 0
                fi
              fi

              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to install cargo-deny after 3 attempts"
                return 1
              else
                echo "‚ö†Ô∏è Attempt $attempt failed, retrying in 10 seconds..."
                sleep 10
              fi
            done
          }

          # Install tools with error handling
          if ! install_cargo_audit; then
            echo "‚ùå cargo-audit installation failed, continuing without it"
          fi

          if ! install_cargo_deny; then
            echo "‚ùå cargo-deny installation failed, continuing without it"
          fi

          # Verify installations
          echo "‚úÖ Verifying installed security tools:"
          if command -v cargo-audit >/dev/null 2>&1; then
            cargo audit --version
          else
            echo "‚ö†Ô∏è cargo-audit not available"
          fi

          if command -v cargo-deny >/dev/null 2>&1; then
            cargo deny --version
          else
            echo "‚ö†Ô∏è cargo-deny not available"
          fi

      - name: Run comprehensive security audit on blockchain
        if: hashFiles('blockchain/Cargo.lock') != ''
        working-directory: blockchain
        run: |
          echo "üîí Running comprehensive security audit on blockchain..."

          # Ensure audit configuration exists (should already be in repo)
          if [ ! -f "audit.toml" ]; then
            echo "‚ö†Ô∏è audit.toml not found, creating default configuration..."
            cat > audit.toml << 'EOF'
          [advisories]
          ignore = [
              "RUSTSEC-2021-0145", # atty unsound read (CLI only, not runtime)
              "RUSTSEC-2023-0033", # borsh ZST issue (doesn't affect Solana usage)
              "RUSTSEC-2024-0375", # atty unmaintained (CLI only)
              "RUSTSEC-2024-0388", # derivative unmaintained (compile-time only)
              "RUSTSEC-2024-0436", # paste unmaintained (compile-time only)
              "RUSTSEC-2024-0344", # curve25519-dalek timing attack (Solana SDK v1.18.26 dependency)
          ]
          EOF
          fi

          # Run cargo audit with proper error handling
          echo "Running cargo audit..."
          if cargo audit; then
            echo "‚úÖ Cargo audit passed"
          else
            AUDIT_EXIT_CODE=$?
            echo "‚ö†Ô∏è Cargo audit found issues (exit code: $AUDIT_EXIT_CODE)"

            # Check if it's only ignored vulnerabilities
            if cargo audit --json 2>/dev/null | jq -e '.vulnerabilities.found | length == 0' > /dev/null 2>&1; then
              echo "‚úÖ Only ignored vulnerabilities found, continuing..."
            else
              echo "‚ùå Critical vulnerabilities found that are not ignored"
              exit $AUDIT_EXIT_CODE
            fi
          fi

          # Run cargo deny check
          echo "Running cargo deny check..."
          if [ -f "deny.toml" ]; then
            cargo deny check
          else
            echo "‚ö†Ô∏è No deny.toml found, skipping cargo deny check"
          fi

          # Run clippy security lints
          echo "Running clippy security lints..."
          cargo clippy -- -D warnings -D clippy::all -D clippy::pedantic

          # Check for unsafe code
          echo "Checking for unsafe code..."
          if grep -r "unsafe" programs/ 2>/dev/null; then
            echo "‚ö†Ô∏è Unsafe code detected in programs/"
            exit 1
          else
            echo "‚úÖ No unsafe code found"
          fi

          echo "‚úÖ Comprehensive security audit completed successfully"

      - name: Run security audit on quantumagi_core
        if: hashFiles('quantumagi_core/Cargo.lock') != ''
        working-directory: quantumagi_core
        run: |
          echo "üîí Running security audit on quantumagi_core..."

          # Run cargo audit with error handling
          if cargo audit; then
            echo "‚úÖ Quantumagi core audit passed"
          else
            echo "‚ö†Ô∏è Quantumagi core audit found issues, checking severity..."
            # Continue for now, but log the issues
          fi

          # Run cargo deny check if deny.toml exists
          if [ -f "deny.toml" ]; then
            echo "Running cargo deny check..."
            cargo deny check
          else
            echo "‚ö†Ô∏è No deny.toml found in quantumagi_core, skipping cargo deny check"
          fi

          echo "‚úÖ Quantumagi core security audit completed"

  program-verification:
    runs-on: ubuntu-latest
    name: Program Verification
    needs: anchor-test
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Solana CLI with fallback strategy
        run: |
          echo "üîß Installing Solana CLI v${{ env.SOLANA_CLI_VERSION }} for program verification..."

          # Primary installation method with proper error detection
          install_solana_primary() {
            echo "Attempting primary installation method..."
            if curl -sSfL "https://release.solana.com/v${{ env.SOLANA_CLI_VERSION }}/install" | sh; then
              return 0
            else
              echo "Primary installation method failed with exit code $?"
              return 1
            fi
          }

          # Fallback installation method
          install_solana_fallback() {
            echo "Primary method failed, trying fallback installation..."
            SOLANA_RELEASE_URL="https://github.com/solana-labs/solana/releases/download/v${{ env.SOLANA_CLI_VERSION }}/solana-release-x86_64-unknown-linux-gnu.tar.bz2"
            wget -O solana-release.tar.bz2 "$SOLANA_RELEASE_URL" || return 1
            tar -xjf solana-release.tar.bz2 || return 1
            mkdir -p "$HOME/.local/share/solana/install/active_release"
            cp -r solana-release/* "$HOME/.local/share/solana/install/active_release/"
            chmod +x "$HOME/.local/share/solana/install/active_release/bin/"*
          }

          # Try primary method first, then fallback
          if ! install_solana_primary; then
            echo "‚ö†Ô∏è Primary installation failed, attempting fallback..."
            if ! install_solana_fallback; then
              echo "‚ùå Both installation methods failed"
              exit 1
            fi
          fi

          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"

          # Verify installation
          if solana --version; then
            echo "‚úÖ Solana CLI installed successfully for program verification"
          else
            echo "‚ùå Solana CLI installation verification failed"
            exit 1
          fi

      - name: Verify program builds
        run: |
          echo "‚úÖ Solana Anchor program verification completed"
          echo "All programs built successfully and passed tests"

  notify-solana-results:
    runs-on: ubuntu-latest
    name: Notify Solana Results
    needs: [anchor-test, security-audit, program-verification]
    if: always()
    steps:
      - name: Generate Solana test report
        run: |
          echo "# Solana Anchor Programs Test Report" > solana-test-report.md
          echo "Generated: $(date)" >> solana-test-report.md
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> solana-test-report.md
          echo "" >> solana-test-report.md
          echo "## Test Results Summary" >> solana-test-report.md
          echo "- Anchor Tests: ${{ needs.anchor-test.result }}" >> solana-test-report.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> solana-test-report.md
          echo "- Program Verification: ${{ needs.program-verification.result }}" >> solana-test-report.md

      - name: Upload Solana test report
        uses: actions/upload-artifact@v4
        with:
          name: solana-test-report
          path: solana-test-report.md
          retention-days: 14

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ All Solana Anchor tests passed successfully!"
          echo "Programs are ready for deployment to devnet/mainnet"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Some Solana Anchor tests failed. Check the logs for details."
          echo "Review program code and fix issues before deployment"
