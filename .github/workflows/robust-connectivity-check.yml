name: Robust Connectivity Check (Disabled - Use Fixed Connectivity Check)

# This workflow is disabled in favor of the simpler fixed-connectivity-check.yml
# which provides the same functionality with better reliability
on:
  # Disabled to prevent duplicate connectivity checks
  workflow_dispatch:

jobs:
  connectivity-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Network Diagnostics
        run: |
          echo "🔍 Running network diagnostics..."
          echo "📋 DNS Configuration:"
          cat /etc/resolv.conf || echo "⚠️ Could not read DNS configuration"
          echo ""
          echo "🛣️ Network Routes:"
          ip route show || echo "⚠️ Could not display network routes"
          echo ""
          echo "🌐 Network Interfaces:"
          ip addr show || echo "⚠️ Could not display network interfaces"

      - name: Test DNS Resolution
        run: |
          echo "🔍 Testing DNS resolution..."
          dns_success=0
          dns_total=0
          
          for domain in github.com api.github.com raw.githubusercontent.com; do
            echo "Testing $domain..."
            ((dns_total++))
            if timeout 10 nslookup "$domain" >/dev/null 2>&1; then
              echo "✅ $domain resolved successfully"
              ((dns_success++))
            else
              echo "⚠️ Failed to resolve $domain (continuing)"
            fi
          done
          
          echo "📊 DNS Resolution Results: $dns_success/$dns_total domains resolved"
          # Continue regardless of DNS resolution issues

      - name: Test HTTP Connectivity (with retries)
        run: |
          echo "🌐 Testing HTTP connectivity with retries..."

          test_connectivity() {
            local url="$1"
            local name="$2"
            local max_attempts=2
            local delay=3
            
            for attempt in $(seq 1 $max_attempts); do
              echo "Attempt $attempt/$max_attempts for $name..."
              
              if timeout 15 curl -s --max-time 10 --connect-timeout 5 --head "$url" >/dev/null 2>&1; then
                echo "✅ $name connectivity successful"
                return 0
              elif [ $attempt -lt $max_attempts ]; then
                echo "⏳ Retrying in $delay seconds..."
                sleep $delay
              fi
            done
            
            echo "⚠️ $name connectivity failed after $max_attempts attempts (continuing)"
            return 1
          }

          # Test multiple endpoints
          success_count=0
          total_tests=0

          # Test GitHub main site
          ((total_tests++))
          if test_connectivity "https://github.com" "GitHub main site"; then
            ((success_count++))
          fi

          # Test GitHub API
          ((total_tests++))
          if test_connectivity "https://api.github.com" "GitHub API"; then
            ((success_count++))
          fi

          # Test GitHub raw content
          ((total_tests++))
          if test_connectivity "https://raw.githubusercontent.com" "GitHub raw content"; then
            ((success_count++))
          fi

          echo "📊 Connectivity Results: $success_count/$total_tests tests passed"

          # Set threshold for acceptable connectivity
          threshold=1
          if [ $success_count -ge $threshold ]; then
            echo "🎉 Connectivity check passed! ($success_count/$total_tests tests successful)"
            echo "CONNECTIVITY_STATUS=success" >> $GITHUB_ENV
          else
            echo "⚠️ Connectivity check had issues, but treating as non-blocking"
            echo "📊 Results: $success_count/$total_tests tests passed"
            echo "💡 Network issues are common in CI environments and won't block the pipeline"
            echo "CONNECTIVITY_STATUS=degraded" >> $GITHUB_ENV
          fi

      - name: Test GitHub API Functionality
        run: |
          echo "🔌 Testing GitHub API functionality..."

          api_success=0
          api_total=2

          # Test public API endpoint
          if response=$(timeout 15 curl -s --max-time 10 --connect-timeout 5 "https://api.github.com/zen" 2>/dev/null); then
            echo "✅ GitHub API response: $response"
            ((api_success++))
          else
            echo "⚠️ GitHub API zen endpoint test failed (continuing)"
          fi

          # Test rate limit endpoint
          if timeout 15 curl -s --max-time 10 --connect-timeout 5 "https://api.github.com/rate_limit" >/dev/null 2>&1; then
            echo "✅ GitHub API rate limit endpoint accessible"
            ((api_success++))
          else
            echo "⚠️ GitHub API rate limit endpoint not accessible (continuing)"
          fi

          echo "📊 GitHub API Results: $api_success/$api_total endpoints accessible"
          echo "✅ GitHub API functionality test completed"

      - name: Alternative Connectivity Test
        if: env.CONNECTIVITY_STATUS == 'degraded'
        run: |
          echo "🔧 Running alternative connectivity tests..."

          # Test if general internet works
          if timeout 15 curl -s --max-time 10 --connect-timeout 5 --head "https://httpbin.org/status/200" >/dev/null 2>&1; then
            echo "✅ General internet connectivity works"
            echo "⚠️ Issue appears to be specific to GitHub (non-blocking)"
          else
            echo "⚠️ General internet connectivity issues detected (non-blocking)"
          fi

          # Try different DNS servers
          echo "🔍 Testing with different DNS servers..."
          dns_alt_success=0
          for dns in "8.8.8.8" "1.1.1.1"; do
            echo "Testing with DNS server $dns..."
            if timeout 10 nslookup github.com "$dns" >/dev/null 2>&1; then
              echo "✅ DNS resolution works with $dns"
              ((dns_alt_success++))
            else
              echo "⚠️ DNS resolution failed with $dns (continuing)"
            fi
          done
          
          echo "📊 Alternative DNS Results: $dns_alt_success/2 servers working"

      - name: Final Status Report
        if: always()
        run: |
          echo "📋 Final Connectivity Status Report"
          echo "=================================="
          echo "Runner: ${{ runner.os }}"
          echo "Timestamp: $(date)"
          echo "Connectivity Status: ${CONNECTIVITY_STATUS:-unknown}"
          echo ""
          echo "📊 Summary:"
          echo "- This test validates network connectivity for CI/CD operations"
          echo "- All connectivity issues are treated as non-blocking warnings"
          echo "- The CI/CD pipeline will continue regardless of network conditions"
          echo ""
          echo "GitHub Actions Runner IP:"
          timeout 10 curl -s --max-time 5 "https://httpbin.org/ip" 2>/dev/null || echo "Could not determine IP (non-blocking)"
          echo ""
          echo "✅ Connectivity check completed successfully (non-blocking design)"
