name: Constitutional Compliance Monitoring
# Constitutional Hash: cdd01ef066bc6cf2

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      target_compliance:
        description: 'Target compliance percentage'
        required: false
        default: '95'
        type: string

env:
  CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  MIN_COMPLIANCE_THRESHOLD: 90
  TARGET_COMPLIANCE: 95

jobs:
  constitutional-compliance-check:
    name: Constitutional Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found"
        # Install any additional dependencies for compliance validation
        pip install pathlib json datetime
    
    - name: Run Constitutional Compliance Validation
      id: compliance_check
      run: |
        echo "üéØ Running Constitutional Compliance Validation"
        echo "Constitutional Hash: $CONSTITUTIONAL_HASH"
        echo "Target Compliance: ${{ github.event.inputs.target_compliance || env.TARGET_COMPLIANCE }}%"
        
        # Run the compliance validator
        python scripts/reorganization/constitutional_compliance_validator.py
        
        # Extract compliance percentage from the latest report
        LATEST_REPORT=$(ls -t reports/constitutional_compliance_report_*.json | head -1)
        if [ -f "$LATEST_REPORT" ]; then
          COMPLIANCE_RATE=$(python -c "
import json
with open('$LATEST_REPORT', 'r') as f:
    data = json.load(f)
print(f\"{data['summary']['overall_compliance_rate']:.1f}\")
")
          echo "compliance_rate=$COMPLIANCE_RATE" >> $GITHUB_OUTPUT
          echo "report_file=$LATEST_REPORT" >> $GITHUB_OUTPUT
          echo "‚úÖ Current compliance rate: $COMPLIANCE_RATE%"
        else
          echo "‚ùå No compliance report found"
          exit 1
        fi
    
    - name: Check Compliance Threshold
      run: |
        COMPLIANCE_RATE="${{ steps.compliance_check.outputs.compliance_rate }}"
        TARGET="${{ github.event.inputs.target_compliance || env.TARGET_COMPLIANCE }}"
        MIN_THRESHOLD="$MIN_COMPLIANCE_THRESHOLD"
        
        echo "üìä Compliance Analysis:"
        echo "  Current: $COMPLIANCE_RATE%"
        echo "  Target: $TARGET%"
        echo "  Minimum: $MIN_THRESHOLD%"
        
        # Check if compliance meets minimum threshold
        if (( $(echo "$COMPLIANCE_RATE < $MIN_THRESHOLD" | bc -l) )); then
          echo "‚ùå CRITICAL: Compliance rate $COMPLIANCE_RATE% is below minimum threshold $MIN_THRESHOLD%"
          echo "::error::Constitutional compliance below minimum threshold"
          exit 1
        elif (( $(echo "$COMPLIANCE_RATE < $TARGET" | bc -l) )); then
          echo "‚ö†Ô∏è  WARNING: Compliance rate $COMPLIANCE_RATE% is below target $TARGET%"
          echo "::warning::Constitutional compliance below target"
        else
          echo "‚úÖ SUCCESS: Compliance rate $COMPLIANCE_RATE% meets target $TARGET%"
        fi
    
    - name: Generate Compliance Summary
      run: |
        COMPLIANCE_RATE="${{ steps.compliance_check.outputs.compliance_rate }}"
        REPORT_FILE="${{ steps.compliance_check.outputs.report_file }}"
        
        echo "# Constitutional Compliance Report" > compliance_summary.md
        echo "**Constitutional Hash**: \`$CONSTITUTIONAL_HASH\`" >> compliance_summary.md
        echo "" >> compliance_summary.md
        echo "## Summary" >> compliance_summary.md
        echo "- **Overall Compliance**: $COMPLIANCE_RATE%" >> compliance_summary.md
        echo "- **Target**: ${{ github.event.inputs.target_compliance || env.TARGET_COMPLIANCE }}%" >> compliance_summary.md
        echo "- **Minimum Threshold**: $MIN_COMPLIANCE_THRESHOLD%" >> compliance_summary.md
        echo "- **Report Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> compliance_summary.md
        echo "" >> compliance_summary.md
        
        # Extract detailed metrics from the report
        python -c "
import json
with open('$REPORT_FILE', 'r') as f:
    data = json.load(f)
summary = data['summary']
print(f\"- **Hash Compliance**: {summary['hash_compliance_rate']:.1f}%\")
print(f\"- **Performance Compliance**: {summary['performance_compliance_rate']:.1f}%\")
print(f\"- **Status Compliance**: {summary['status_compliance_rate']:.1f}%\")
print(f\"- **Files Validated**: {summary['total_files']}\")
print()
print(\"## Distribution\")
dist = summary['compliance_distribution']
for level, count in dist.items():
    percentage = (count / summary['total_files']) * 100
    print(f\"- **{level}**: {count} files ({percentage:.1f}%)\")
" >> compliance_summary.md
        
        echo "" >> compliance_summary.md
        echo "## Performance Targets" >> compliance_summary.md
        echo "- **P99 Latency**: <5ms (constitutional requirement)" >> compliance_summary.md
        echo "- **Throughput**: >100 RPS (minimum operational standard)" >> compliance_summary.md
        echo "- **Cache Hit Rate**: >85% (efficiency requirement)" >> compliance_summary.md
        echo "- **Constitutional Compliance**: 100% (hash: $CONSTITUTIONAL_HASH)" >> compliance_summary.md
        
        cat compliance_summary.md
    
    - name: Upload Compliance Report
      uses: actions/upload-artifact@v3
      with:
        name: constitutional-compliance-report
        path: |
          ${{ steps.compliance_check.outputs.report_file }}
          compliance_summary.md
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('compliance_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üèõÔ∏è Constitutional Compliance Check\n\n${summary}\n\n---\n**Constitutional Hash**: \`${{ env.CONSTITUTIONAL_HASH }}\``
          });
    
    - name: Update Compliance Badge
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        COMPLIANCE_RATE="${{ steps.compliance_check.outputs.compliance_rate }}"
        
        # Determine badge color based on compliance rate
        if (( $(echo "$COMPLIANCE_RATE >= 95" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COMPLIANCE_RATE >= 90" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COMPLIANCE_RATE >= 80" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COMPLIANCE_RATE >= 70" | bc -l) )); then
          COLOR="orange"
        else
          COLOR="red"
        fi
        
        echo "üìõ Updating compliance badge: $COMPLIANCE_RATE% ($COLOR)"
        
        # Create badge URL
        BADGE_URL="https://img.shields.io/badge/Constitutional%20Compliance-$COMPLIANCE_RATE%25-$COLOR?style=flat-square&logo=shield"
        echo "Badge URL: $BADGE_URL"
        
        # Store badge info for potential README update
        echo "compliance_badge_url=$BADGE_URL" >> $GITHUB_ENV
