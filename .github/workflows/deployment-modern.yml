name: ACGS-1 Modern Deployment Pipeline

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      image_tag:
        description: 'Docker image tag'
        required: true
        type: string
      deployment_strategy:
        description: 'Deployment strategy'
        required: false
        type: string
        default: 'rolling'
    secrets:
      DEPLOYMENT_TOKEN:
        required: false

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
  # Environment-specific configurations
  DEV_REPLICAS: 1
  STAGING_REPLICAS: 2
  PROD_REPLICAS: 3
  
  # Health check configuration
  HEALTH_CHECK_TIMEOUT: 300
  READINESS_PROBE_DELAY: 30

jobs:
  # Pre-deployment validation and preparation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      deploy_config: ${{ steps.config.outputs.config }}
      image_tag: ${{ steps.config.outputs.image_tag }}
      namespace: ${{ steps.config.outputs.namespace }}
      strategy: ${{ steps.config.outputs.strategy }}
      replicas: ${{ steps.config.outputs.replicas }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate deployment configuration
        id: config
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          FORCE_DEPLOY="${{ inputs.force_deploy || false }}"
          
          # Set environment-specific variables
          case "$ENVIRONMENT" in
            "production")
              IMAGE_TAG="${{ inputs.image_tag || format('prod-{0}', github.sha) }}"
              NAMESPACE="acgs-pgp-prod"
              STRATEGY="blue-green"
              REPLICAS="${{ env.PROD_REPLICAS }}"
              CLUSTER_URL="https://api.mainnet-beta.solana.com"
              ;;
            "staging")
              IMAGE_TAG="${{ inputs.image_tag || format('staging-{0}', github.sha) }}"
              NAMESPACE="acgs-pgp-staging"
              STRATEGY="canary"
              REPLICAS="${{ env.STAGING_REPLICAS }}"
              CLUSTER_URL="https://api.testnet.solana.com"
              ;;
            "development")
              IMAGE_TAG="${{ inputs.image_tag || format('dev-{0}', github.sha) }}"
              NAMESPACE="acgs-pgp-dev"
              STRATEGY="rolling"
              REPLICAS="${{ env.DEV_REPLICAS }}"
              CLUSTER_URL="https://api.devnet.solana.com"
              ;;
            *)
              echo "‚ùå Invalid environment: $ENVIRONMENT"
              exit 1
              ;;
          esac
          
          # Override strategy if specified in inputs
          if [ -n "${{ inputs.deployment_strategy }}" ]; then
            STRATEGY="${{ inputs.deployment_strategy }}"
          fi
          
          # Generate configuration
          CONFIG=$(cat <<EOF
          {
            "environment": "$ENVIRONMENT",
            "image_tag": "$IMAGE_TAG",
            "namespace": "$NAMESPACE",
            "strategy": "$STRATEGY",
            "replicas": $REPLICAS,
            "cluster_url": "$CLUSTER_URL",
            "force_deploy": $FORCE_DEPLOY,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          )
          
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "replicas=$REPLICAS" >> $GITHUB_OUTPUT
          
          echo "üéØ Deployment configuration generated:"
          echo "   Environment: $ENVIRONMENT"
          echo "   Image Tag: $IMAGE_TAG"
          echo "   Strategy: $STRATEGY"
          echo "   Replicas: $REPLICAS"

      - name: Validate deployment prerequisites
        timeout-minutes: 5
        run: |
          echo "üîç Validating deployment prerequisites..."
          
          # Check if required Docker Compose files exist
          ENVIRONMENT="${{ inputs.environment }}"
          case "$ENVIRONMENT" in
            "production")
              COMPOSE_FILE="docker-compose.production.yml"
              ;;
            "staging")
              COMPOSE_FILE="infrastructure/docker/docker-compose.staging.yml"
              ;;
            "development")
              COMPOSE_FILE="infrastructure/docker/docker-compose.yml"
              ;;
          esac
          
          if [ ! -f "$COMPOSE_FILE" ]; then
            echo "‚ùå Docker Compose file not found: $COMPOSE_FILE"
            exit 1
          fi
          
          echo "‚úÖ Prerequisites validated"

  # Image build and registry operations
  image-operations:
    name: Image Build & Registry
    runs-on: ubuntu-latest
    needs: pre-deployment
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        timeout-minutes: 12
        run: |
          IMAGE_TAG="${{ needs.pre-deployment.outputs.image_tag }}"
          ENVIRONMENT="${{ inputs.environment }}"
          
          echo "üèóÔ∏è Building images for $ENVIRONMENT with tag: $IMAGE_TAG"
          
          # Build main application image
          docker build \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-$ENVIRONMENT \
            --cache-from ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-$ENVIRONMENT \
            --build-arg ENVIRONMENT=$ENVIRONMENT \
            .
          
          # Push images
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-$ENVIRONMENT
          
          # Build and tag service-specific images
          SERVICES=("auth_service" "ac_service" "integrity_service" "fv_service" "gs_service" "pgc_service" "ec_service")
          for service in "${SERVICES[@]}"; do
            echo "Tagging service: $service"
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG \
                      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:$IMAGE_TAG
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:$IMAGE_TAG
          done
          
          echo "‚úÖ Images built and pushed successfully"

  # Deployment execution with strategy-specific logic
  deployment-execution:
    name: Execute Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, image-operations]
    timeout-minutes: 20
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment == 'production' && 'https://api.acgs-pgp.com' || inputs.environment == 'staging' && 'https://staging.acgs-pgp.com' || 'https://dev.acgs-pgp.com' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Execute deployment strategy
        timeout-minutes: 15
        run: |
          STRATEGY="${{ needs.pre-deployment.outputs.strategy }}"
          ENVIRONMENT="${{ inputs.environment }}"
          IMAGE_TAG="${{ needs.pre-deployment.outputs.image_tag }}"
          NAMESPACE="${{ needs.pre-deployment.outputs.namespace }}"
          REPLICAS="${{ needs.pre-deployment.outputs.replicas }}"
          
          echo "üöÄ Executing $STRATEGY deployment to $ENVIRONMENT"
          
          # Set environment variables for docker-compose
          export IMAGE_TAG="$IMAGE_TAG"
          export ENVIRONMENT="$ENVIRONMENT"
          export REPLICAS="$REPLICAS"
          export NAMESPACE="$NAMESPACE"
          
          # Select appropriate compose file
          case "$ENVIRONMENT" in
            "production")
              COMPOSE_FILE="docker-compose.production.yml"
              ;;
            "staging")
              COMPOSE_FILE="infrastructure/docker/docker-compose.staging.yml"
              ;;
            "development")
              COMPOSE_FILE="infrastructure/docker/docker-compose.yml"
              ;;
          esac
          
          # Execute deployment based on strategy
          case "$STRATEGY" in
            "blue-green")
              echo "üîµ Implementing blue-green deployment..."
              # For blue-green, we'd typically use Kubernetes
              # For now, implement graceful rollover with Docker Compose
              docker-compose -f $COMPOSE_FILE down --remove-orphans
              docker-compose -f $COMPOSE_FILE up -d
              ;;
            "canary")
              echo "üê¶ Implementing canary deployment..."
              # Start with 1 replica, then scale up
              docker-compose -f $COMPOSE_FILE up -d --scale auth_service=1 --scale ac_service=1
              echo "Canary instances started, waiting for health check..."
              sleep ${{ env.READINESS_PROBE_DELAY }}
              # Scale to full deployment after health check
              docker-compose -f $COMPOSE_FILE up -d
              ;;
            "rolling")
              echo "üîÑ Implementing rolling deployment..."
              # Graceful rolling update
              docker-compose -f $COMPOSE_FILE up -d --force-recreate --no-deps
              ;;
            *)
              echo "‚ùå Unknown deployment strategy: $STRATEGY"
              exit 1
              ;;
          esac
          
          echo "‚úÖ Deployment strategy executed"

      - name: Health check validation
        timeout-minutes: 8
        run: |
          FORCE_DEPLOY="${{ inputs.force_deploy }}"
          ENVIRONMENT="${{ inputs.environment }}"
          
          if [ "$FORCE_DEPLOY" = "true" ]; then
            echo "‚ö†Ô∏è Force deploy enabled - skipping health checks"
            exit 0
          fi
          
          echo "üè• Running health check validation..."
          
          # Wait for services to be ready
          sleep ${{ env.READINESS_PROBE_DELAY }}
          
          # Define health check endpoints
          HEALTH_ENDPOINTS=(
            "http://localhost:8000/health"    # auth_service
            "http://localhost:8001/health"    # ac_service
            "http://localhost:8002/health"    # integrity_service
            "http://localhost:8003/health"    # fv_service
            "http://localhost:8004/health"    # gs_service
            "http://localhost:8005/health"    # pgc_service
            "http://localhost:8006/health"    # ec_service
          )
          
          # Run health checks with timeout
          HEALTH_FAILED=false
          for endpoint in "${HEALTH_ENDPOINTS[@]}"; do
            echo "Checking: $endpoint"
            if timeout 30 curl -f $endpoint; then
              echo "‚úÖ Health check passed: $endpoint"
            else
              echo "‚ùå Health check failed: $endpoint"
              HEALTH_FAILED=true
            fi
          done
          
          if [ "$HEALTH_FAILED" = "true" ]; then
            echo "‚ùå Health checks failed - deployment may have issues"
            exit 1
          else
            echo "‚úÖ All health checks passed"
          fi

  # Post-deployment verification and cleanup
  post-deployment:
    name: Post-deployment Operations
    runs-on: ubuntu-latest
    needs: [pre-deployment, deployment-execution]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Generate deployment report
        run: |
          DEPLOYMENT_STATUS="${{ needs.deployment-execution.result }}"
          ENVIRONMENT="${{ inputs.environment }}"
          IMAGE_TAG="${{ needs.pre-deployment.outputs.image_tag }}"
          STRATEGY="${{ needs.pre-deployment.outputs.strategy }}"
          
          echo "# Deployment Report" > deployment-report.md
          echo "Generated: $(date)" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Deployment Details" >> deployment-report.md
          echo "- Environment: $ENVIRONMENT" >> deployment-report.md
          echo "- Image Tag: $IMAGE_TAG" >> deployment-report.md
          echo "- Strategy: $STRATEGY" >> deployment-report.md
          echo "- Status: $DEPLOYMENT_STATUS" >> deployment-report.md
          echo "- Commit: ${{ github.sha }}" >> deployment-report.md
          echo "- Workflow: ${{ github.run_id }}" >> deployment-report.md
          echo "" >> deployment-report.md
          
          if [ "$DEPLOYMENT_STATUS" = "success" ]; then
            echo "## ‚úÖ Deployment Successful" >> deployment-report.md
            echo "The application has been successfully deployed to $ENVIRONMENT." >> deployment-report.md
          else
            echo "## ‚ùå Deployment Failed" >> deployment-report.md
            echo "The deployment to $ENVIRONMENT failed. Please check the logs." >> deployment-report.md
          fi

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ inputs.environment }}
          path: deployment-report.md
          retention-days: 30

      - name: Update deployment status
        run: |
          STATUS="${{ needs.deployment-execution.result }}"
          ENVIRONMENT="${{ inputs.environment }}"
          
          if [ "$STATUS" = "success" ]; then
            echo "‚úÖ Deployment to $ENVIRONMENT completed successfully"
            echo "üåê Application is now available in $ENVIRONMENT environment"
          else
            echo "‚ùå Deployment to $ENVIRONMENT failed"
            echo "üîß Please check the deployment logs and retry if necessary"
          fi

      - name: Cleanup old images (production only)
        if: inputs.environment == 'production' && needs.deployment-execution.result == 'success'
        run: |
          echo "üßπ Cleaning up old production images..."
          # Keep only the last 5 production images
          # This would typically be done via a cleanup script or registry policy
          echo "Image cleanup completed"