name: ACGS CI/CD with UV

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "18"
  NODE_VERSION_BLOCKCHAIN: "20"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Python services with UV
  python-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [constitutional-ai, governance-synthesis, policy-governance]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up UV cache
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Install dependencies with UV
      run: |
        uv sync --frozen
        echo "UV_ACTIVE=1" >> $GITHUB_ENV

    - name: Lint with UV
      run: |
        source .venv/bin/activate

        # Check if service directory exists and has Python files
        if [ -d "services/core/${{ matrix.service }}" ] && find services/core/${{ matrix.service }} -name "*.py" | grep -q .; then
          echo "Linting services/core/${{ matrix.service }}"
          uv run black --check services/core/${{ matrix.service }} || echo "Black check failed for ${{ matrix.service }}"
          uv run isort --check-only services/core/${{ matrix.service }} || echo "isort check failed for ${{ matrix.service }}"
          uv run mypy services/core/${{ matrix.service }} || echo "mypy check failed for ${{ matrix.service }}"
        else
          echo "No Python files found in services/core/${{ matrix.service }}, skipping linting"
        fi

    - name: Test with UV
      run: |
        source .venv/bin/activate

        # Check for test directories and run tests if they exist
        if [ -d "services/core/${{ matrix.service }}/tests" ]; then
          echo "Running tests from services/core/${{ matrix.service }}/tests/"
          uv run pytest services/core/${{ matrix.service }}/tests/ -v --cov=services/core/${{ matrix.service }} --cov-report=xml
        elif [ -d "services/core/${{ matrix.service }}/*/tests" ]; then
          echo "Running tests from nested test directories"
          uv run pytest services/core/${{ matrix.service }}/*/tests/ -v --cov=services/core/${{ matrix.service }} --cov-report=xml
        elif find services/core/${{ matrix.service }} -name "test_*.py" -o -name "*_test.py" | grep -q .; then
          echo "Running individual test files"
          uv run pytest $(find services/core/${{ matrix.service }} -name "test_*.py" -o -name "*_test.py") -v --cov=services/core/${{ matrix.service }} --cov-report=xml
        else
          echo "No tests found for ${{ matrix.service }}, creating placeholder coverage"
          echo '<?xml version="1.0" ?><coverage version="7.0.0"><sources></sources><packages></packages></coverage>' > coverage.xml
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}
        name: codecov-${{ matrix.service }}

  # Node.js workspaces
  nodejs-workspaces:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [applications, blockchain]
        include:
          - workspace: applications
            node-version: "18"
          - workspace: blockchain
            node-version: "20"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up NVM for blockchain workspace
      if: matrix.workspace == 'blockchain'
      run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install ${{ matrix.node-version }}
        nvm use ${{ matrix.node-version }}
        echo "NODE_VERSION=${{ matrix.node-version }}" >> $GITHUB_ENV

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Verify Node.js version
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"

    - name: Install dependencies
      run: |
        npm ci
        npm install --workspace=${{ matrix.workspace }} --legacy-peer-deps --ignore-scripts

    - name: Lint workspace
      run: npm run lint --workspace=${{ matrix.workspace }} || true

    - name: Test workspace
      run: npm run test --workspace=${{ matrix.workspace }} || true

    - name: Build workspace
      run: npm run build --workspace=${{ matrix.workspace }} || true

  # Integration tests with UV
  integration-tests:
    runs-on: ubuntu-latest
    needs: [python-services, nodejs-workspaces]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies with UV
      run: uv sync --frozen

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        source .venv/bin/activate
        uv run pytest tests/integration/ -v --maxfail=5

    - name: Test Constitutional AI service
      run: |
        source .venv/bin/activate
        cd services/core/constitutional-ai
        timeout 10 python simple_ac_main.py &
        sleep 5
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:8001/api/v1/status || exit 1

  # Security and quality checks
  security-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --frozen

    - name: Security audit with UV
      run: |
        source .venv/bin/activate
        uv run pip-audit || true

    - name: Dependency vulnerability check
      run: |
        source .venv/bin/activate
        uv run safety check || true

    - name: Code quality analysis
      run: |
        source .venv/bin/activate
        uv run bandit -r services/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Build and deploy
  build-deploy:
    runs-on: ubuntu-latest
    needs: [python-services, nodejs-workspaces, integration-tests, security-quality]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3

    - name: Build with UV
      run: |
        uv sync --frozen
        uv build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.uv
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/acgs:latest
          ghcr.io/${{ github.repository }}/acgs:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging
      if: github.ref == 'refs/heads/master'
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        ./scripts/deployment/deploy_with_uv.sh

  # Performance testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install UV
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --frozen

    - name: Run performance tests
      run: |
        source .venv/bin/activate
        uv run pytest tests/performance/ -v --benchmark-only

    - name: Load testing
      run: |
        source .venv/bin/activate
        cd services/core/constitutional-ai
        python simple_ac_main.py &
        sleep 5
        # Simple load test
        for i in {1..100}; do
          curl -s http://localhost:8001/health > /dev/null || exit 1
        done
        echo "Load test completed successfully"
