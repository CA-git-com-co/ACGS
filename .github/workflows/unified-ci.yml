name: ACGS Unified CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, master, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM (reduced from daily)
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  RUST_VERSION: '1.81.0'
  UV_CACHE_DIR: /tmp/.uv-cache
  # Performance targets
  BUILD_TARGET_MINUTES: 10
  # Enhanced caching
  CARGO_INCREMENTAL: 0
  CARGO_TARGET_DIR: blockchain/target

jobs:
  # Detect changes to determine which jobs to run
  changes:
    runs-on: ubuntu-latest
    name: Detect Changes
    outputs:
      python: ${{ steps.filter.outputs.python }}
      rust: ${{ steps.filter.outputs.rust }}
      node: ${{ steps.filter.outputs.node }}
      docker: ${{ steps.filter.outputs.docker }}
      security: ${{ steps.filter.outputs.security }}
      should_run_tests: ${{ steps.decision.outputs.should_run_tests }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - 'services/**/*.py'
              - '**/pyproject.toml'
              - 'tests/**/*.py'
            rust:
              - 'blockchain/**/*.rs'
              - '**/Cargo.toml'
              - '**/Cargo.lock'
              - 'blockchain/Anchor.toml'
            node:
              - '**/*.js'
              - '**/*.ts'
              - '**/package.json'
              - '**/package-lock.json'
            docker:
              - '**/Dockerfile*'
              - 'docker-compose*.yml'
              - 'infrastructure/docker/**'
            security:
              - '.github/workflows/**'
              - 'scripts/security/**'
              - '**/pyproject.toml' # Changed from requirements*.txt
              - '**/Cargo.toml'
              - '**/package.json'

      - name: Determine test execution
        id: decision
        run: |
          # Always run tests on main/master branches, scheduled runs, or manual dispatch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/master" ]] || \
             [[ "${{ github.event_name }}" == "schedule" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            echo "✅ Running full test suite (main branch/scheduled/manual)"
          elif [[ "${{ steps.filter.outputs.python }}" == "true" ]] || \
               [[ "${{ steps.filter.outputs.rust }}" == "true" ]] || \
               [[ "${{ steps.filter.outputs.node }}" == "true" ]] || \
               [[ "${{ steps.filter.outputs.docker }}" == "true" ]]; then
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            echo "✅ Running tests (relevant files changed)"
          else
            echo "should_run_tests=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping tests (no relevant changes)"
          fi

  # Python testing and quality checks
  python-quality:
    runs-on: ubuntu-latest
    name: Python Quality & Testing
    needs: changes
    if: needs.changes.outputs.should_run_tests == 'true' && (needs.changes.outputs.python == 'true' || github.event_name == 'schedule')
    strategy:
      matrix:
        service: 
          - 'constitutional-ai'
          - 'governance-synthesis'
          - 'policy-governance'
          - 'formal-verification'
          - 'integrity'
          - 'evolutionary-computation'
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ matrix.service }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.service }}-
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          if [ -d "services/core/${{ matrix.service }}" ]; then
            cd services/core/${{ matrix.service }}
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            cd services/platform/${{ matrix.service }}
          else
            echo "Service directory not found for ${{ matrix.service }}"
            exit 0
          fi

          # Determine service path (existing logic)
          SERVICE_DIR_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_DIR_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            SERVICE_DIR_PATH="services/platform/${{ matrix.service }}"
          else
            echo "Service directory for ${{ matrix.service }} not found, skipping installation."
            exit 0 # Exit gracefully if service path is not found
          fi
          cd "$SERVICE_DIR_PATH"

          uv venv
          source .venv/bin/activate
          
          # Install project with test and dev dependencies if pyproject.toml exists
          if [ -f "pyproject.toml" ]; then
            # Assuming 'test' and 'dev' groups cover pytest, black, isort, mypy
            uv pip install -e .[test,dev] || echo "⚠️ Failed to install project with dev/test dependencies from pyproject.toml"
          elif [ -f "requirements.txt" ]; then
            # Fallback for projects without pyproject.toml (if any sub-projects are structured differently)
            uv pip install -r requirements.txt || echo "⚠️ Failed to install requirements.txt"
            # Manually install dev tools if only requirements.txt is present
            uv pip install pytest black isort mypy || echo "⚠️ Failed to install common dev tools"
          else
            echo "No pyproject.toml or requirements.txt found in $PWD, skipping dependency installation."
          fi

      - name: Run quality checks
        run: |
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/platform/${{ matrix.service }}"
          else
            echo "Service directory not found, skipping quality checks"
            exit 0
          fi

          cd "$SERVICE_PATH"

          source .venv/bin/activate # Ensure correct environment

          echo "Running Black check..."
          if command -v black >/dev/null 2>&1; then
            black --check . --diff || echo "⚠️ Black formatting check failed"
          else
            echo "⚠️ black command not found"
          fi

          echo "Running Ruff check..."
          if command -v ruff >/dev/null 2>&1; then
            ruff check . || echo "⚠️ Ruff linting check failed" # isort checks are included here
          else
            echo "⚠️ ruff command not found"
          fi

          echo "Running Mypy check..."
          if command -v mypy >/dev/null 2>&1; then
            mypy . --ignore-missing-imports || echo "⚠️ Mypy type checking failed"
          else
            echo "⚠️ mypy command not found"
          fi

      - name: Run tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/platform/${{ matrix.service }}"
          else
            echo "Service directory not found, skipping tests"
            exit 0
          fi

          cd "$SERVICE_PATH"
          source .venv/bin/activate

          if command -v pytest >/dev/null 2>&1; then
            pytest tests/ -v --tb=short || echo "⚠️ Tests failed"
          else
            echo "pytest not available, skipping tests"
          fi

  # Rust/Blockchain testing and building
  rust-quality:
    runs-on: ubuntu-latest
    name: Rust Quality & Build
    needs: changes
    if: needs.changes.outputs.should_run_tests == 'true' && (needs.changes.outputs.rust == 'true' || github.event_name == 'schedule')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Solana CLI (simplified)
        run: |
          echo "🔧 Installing Solana CLI..."
          if timeout 120 curl -sSfL https://release.solana.com/stable/install | sh; then
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
            echo "✅ Solana CLI installed"
          else
            echo "⚠️ Solana installation failed, continuing without it"
          fi

      - name: Install Anchor CLI (simplified)
        run: |
          echo "🔧 Installing Anchor CLI..."
          if timeout 180 npm install -g @coral-xyz/anchor-cli@0.29.0; then
            echo "✅ Anchor CLI installed"
          else
            echo "⚠️ Anchor installation failed, continuing without it"
          fi

      - name: Rust quality checks
        working-directory: blockchain
        run: |
          echo "🔍 Running Rust quality checks..."
          
          # Format check
          cargo fmt --all -- --check || echo "⚠️ Format check failed"
          
          # Clippy
          cargo clippy --all-targets --all-features -- -D warnings || echo "⚠️ Clippy failed"

      - name: Build Anchor programs
        if: github.event.inputs.skip_tests != 'true'
        working-directory: blockchain
        run: |
          echo "🏗️ Building Anchor programs..."
          
          # Configure Solana for local development
          if command -v solana >/dev/null 2>&1; then
            solana config set --url localhost
          fi
          
          # Build with optimizations
          if command -v anchor >/dev/null 2>&1; then
            RUST_LOG=error anchor build --skip-lint || echo "⚠️ Anchor build failed"
          else
            echo "⚠️ Anchor not available, skipping build"
          fi

      - name: Run Rust tests
        if: github.event.inputs.skip_tests != 'true'
        working-directory: blockchain
        run: |
          echo "🧪 Running Rust tests..."
          cargo test --all || echo "⚠️ Rust tests failed"

  # Security scanning (consolidated)
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: changes
    if: needs.changes.outputs.should_run_tests == 'true' && (needs.changes.outputs.security == 'true' || github.event_name == 'schedule')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python for security tools
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          echo "🔧 Installing security tools..."
          pip install safety bandit semgrep || echo "⚠️ Some security tools failed to install"

      - name: Install Rust security tools
        run: |
          echo "🔧 Installing Rust security tools..."
          cargo install cargo-audit || echo "⚠️ cargo-audit installation failed"

      - name: Run Python security scan
        run: |
          echo "🔍 Running Python security scans..."
          
          # Safety check
          safety check || echo "⚠️ Safety scan found issues"
          
          # Bandit scan
          find . -name "*.py" -not -path "*/venv/*" -not -path "*/.venv/*" | head -100 | xargs bandit -f json || echo "⚠️ Bandit scan found issues"

      - name: Run Rust security scan
        run: |
          echo "🔍 Running Rust security scan..."
          
          if [ -d "blockchain" ] && command -v cargo-audit >/dev/null 2>&1; then
            cd blockchain
            cargo audit \
              --ignore RUSTSEC-2021-0145 \
              --ignore RUSTSEC-2023-0033 \
              --ignore RUSTSEC-2024-0375 \
              --ignore RUSTSEC-2024-0388 \
              --ignore RUSTSEC-2024-0436 \
              || echo "⚠️ Cargo audit found issues"
          fi

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker build (only when needed)
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [changes, python-quality, rust-quality]
    if: needs.changes.outputs.should_run_tests == 'true' && (needs.changes.outputs.docker == 'true' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          echo "🏗️ Building Docker images..."
          
          # Build main image if Dockerfile exists
          if [ -f "infrastructure/docker/Dockerfile.acgs" ]; then
            IMAGE_TAG="${{ github.ref == 'refs/heads/main' && 'latest' || github.sha }}"
            docker buildx build \
              -f infrastructure/docker/Dockerfile.acgs \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG \
              --push \
              .
            echo "✅ Docker image built and pushed: $IMAGE_TAG"
          else
            echo "⚠️ No Dockerfile found, skipping build"
          fi

  # Final status reporting
  status-report:
    runs-on: ubuntu-latest
    name: Pipeline Status Report
    needs: [changes, python-quality, rust-quality, security-scan, docker-build]
    if: always() && needs.changes.outputs.should_run_tests == 'true'
    steps:
      - name: Generate pipeline report
        run: |
          echo "📊 ACGS Unified CI/CD Pipeline Report"
          echo "====================================="
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Trigger: ${{ github.event_name }}"
          echo ""
          echo "Job Results:"
          echo "- Changes Detection: ${{ needs.changes.result }}"
          echo "- Python Quality: ${{ needs.python-quality.result }}"
          echo "- Rust Quality: ${{ needs.rust-quality.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Docker Build: ${{ needs.docker-build.result }}"
          echo ""
          
          # Determine overall status
          if [[ "${{ needs.python-quality.result }}" == "success" || "${{ needs.python-quality.result }}" == "skipped" ]] && \
             [[ "${{ needs.rust-quality.result }}" == "success" || "${{ needs.rust-quality.result }}" == "skipped" ]] && \
             [[ "${{ needs.security-scan.result }}" == "success" || "${{ needs.security-scan.result }}" == "skipped" ]]; then
            echo "✅ Pipeline Status: PASSED"
          else
            echo "❌ Pipeline Status: FAILED"
          fi