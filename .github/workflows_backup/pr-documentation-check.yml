name: PR Documentation Requirements Check

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [main, master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"

jobs:
  # Check PR Template Compliance
  pr_template_check:
    runs-on: ubuntu-latest
    name: PR Template Compliance Check
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check PR description compliance
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const body = pr.body || '';
            const requiredSections = [
              'Constitutional Compliance',
              'Documentation Requirements',
              'Testing',
              'Validation Checklist',
              'Constitutional Hash'
            ];

            const missingSections = requiredSections.filter(section =>
              !body.includes(section)
            );

            if (missingSections.length > 0) {
              core.setFailed(`PR description missing required sections: ${missingSections.join(', ')}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå **PR Template Compliance Check Failed**

                Your PR description is missing the following required sections:
                ${missingSections.map(s => `- ${s}`).join('\n')}

                Please update your PR description to include all required sections from the PR template.

                **Constitutional Hash**: \`${processconfig/environments/development.env.CONSTITUTIONAL_HASH}\` must be validated in all changes.`
              });
            } else {
              console.log('‚úÖ PR template compliance check passed');
            }

  # Documentation Impact Analysis
  documentation_impact_analysis:
    runs-on: ubuntu-latest
    name: Documentation Impact Analysis
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changed files
        id: analyze
        run: |
          echo "üîç Analyzing changed files for documentation impact..."

          # Get list of changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt

          # Categorize changes
          INFRASTRUCTURE_CHANGED=false
          API_CHANGED=false
          CONFIG_CHANGED=false
          SERVICE_CHANGED=false
          DOC_CHANGED=false

          while IFS= read -r file; do
            case "$file" in
              infrastructure/*|docker-compose*|Dockerfile*)
                INFRASTRUCTURE_CHANGED=true
                ;;
              services/*/api/*|services/*/main.py|services/*/app.py)
                API_CHANGED=true
                ;;
              config/*|*config/environments/development.env|pyproject.toml|pytest.ini)
                CONFIG_CHANGED=true
                ;;
              services/*)
                SERVICE_CHANGED=true
                ;;
              docs/*|README.md)
                DOC_CHANGED=true
                ;;
            esac
          done < changed_files.txt

          echo "infrastructure_changed=$INFRASTRUCTURE_CHANGED" >> $GITHUB_OUTPUT
          echo "api_changed=$API_CHANGED" >> $GITHUB_OUTPUT
          echo "config_changed=$CONFIG_CHANGED" >> $GITHUB_OUTPUT
          echo "service_changed=$SERVICE_CHANGED" >> $GITHUB_OUTPUT
          echo "doc_changed=$DOC_CHANGED" >> $GITHUB_OUTPUT

          echo "üìä Change Analysis Results:"
          echo "Infrastructure: $INFRASTRUCTURE_CHANGED"
          echo "API: $API_CHANGED"
          echo "Configuration: $CONFIG_CHANGED"
          echo "Services: $SERVICE_CHANGED"
          echo "Documentation: $DOC_CHANGED"

      - name: Check required documentation updates
        run: |
          echo "üìö Checking required documentation updates..."

          MISSING_DOCS=""

          # Check infrastructure changes
          if [ "${{ steps.analyze.outputs.infrastructure_changed }}" = "true" ]; then
            echo "üèóÔ∏è Infrastructure changes detected - checking documentation..."

            if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "docs/deployment\|docs/configuration\|README.md"; then
              MISSING_DOCS="$MISSING_DOCS\n- Infrastructure changes require deployment/configuration documentation updates"
            fi
          fi

          # Check API changes
          if [ "${{ steps.analyze.outputs.api_changed }}" = "true" ]; then
            echo "üîå API changes detected - checking documentation..."

            if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "docs/api"; then
              MISSING_DOCS="$MISSING_DOCS\n- API changes require docs/api/ documentation updates"
            fi
          fi

          # Check configuration changes
          if [ "${{ steps.analyze.outputs.config_changed }}" = "true" ]; then
            echo "‚öôÔ∏è Configuration changes detected - checking documentation..."

            if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "docs/configuration"; then
              MISSING_DOCS="$MISSING_DOCS\n- Configuration changes require docs/configuration/ documentation updates"
            fi
          fi

          # Check service changes
          if [ "${{ steps.analyze.outputs.service_changed }}" = "true" ]; then
            echo "üîß Service changes detected - checking documentation..."

            if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "docs/operations\|docs/api"; then
              MISSING_DOCS="$MISSING_DOCS\n- Service changes may require operations/API documentation updates"
            fi
          fi

          if [ -n "$MISSING_DOCS" ]; then
            echo "‚ùå Missing required documentation updates:$MISSING_DOCS"
            echo "missing_docs<<EOF" >> $GITHUB_ENV
            echo -e "$MISSING_DOCS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          else
            echo "‚úÖ Documentation requirements satisfied"
          fi

      - name: Comment on missing documentation
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Documentation Requirements Check Failed**

              Based on the files changed in this PR, the following documentation updates are required:

              ${processconfig/environments/development.env.missing_docs}

              Please update the relevant documentation files and ensure:
              - Constitutional hash \`${processconfig/environments/development.env.CONSTITUTIONAL_HASH}\` is included where appropriate
              - Performance targets are updated if changed
              - Port configurations are documented if modified
              - API examples include constitutional hash in responses

              Run \`./tools/validation/quick_validation.sh\` to validate your documentation changes.`
            });

  # Constitutional Hash Validation
  constitutional_hash_validation:
    runs-on: ubuntu-latest
    name: Constitutional Hash Validation
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate constitutional hash consistency
        run: |
          echo "üîç Validating constitutional hash consistency in changed files..."

          # Get changed files that should contain constitutional hash
          git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "\.(md|yml|yaml|py|js|ts)$" > changed_files.txt || true

          HASH_VIOLATIONS=""

          while IFS= read -r file; do
            if [ -f "$file" ]; then
              # Check if file mentions constitutional hash but doesn't have the correct value
              if grep -qi "constitutional.*hash\|hash.*constitutional" "$file"; then
                if ! grep -q "$CONSTITUTIONAL_HASH" "$file"; then
                  HASH_VIOLATIONS="$HASH_VIOLATIONS\n- $file: mentions constitutional hash but missing value $CONSTITUTIONAL_HASH"
                fi
              fi

              # Check API files specifically
              if [[ "$file" == docs/api/*.md ]]; then
                if ! grep -q "$CONSTITUTIONAL_HASH" "$file"; then
                  HASH_VIOLATIONS="$HASH_VIOLATIONS\n- $file: API documentation missing constitutional hash in examples"
                fi
              fi
            fi
          done < changed_files.txt

          if [ -n "$HASH_VIOLATIONS" ]; then
            echo "‚ùå Constitutional hash violations found:$HASH_VIOLATIONS"
            echo "hash_violations<<EOF" >> $GITHUB_ENV
            echo -e "$HASH_VIOLATIONS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          else
            echo "‚úÖ Constitutional hash validation passed"
          fi

      - name: Comment on hash violations
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Constitutional Hash Validation Failed**

              The following files have constitutional hash violations:

              ${processconfig/environments/development.env.hash_violations}

              **Required Action:**
              - Add constitutional hash \`${processconfig/environments/development.env.CONSTITUTIONAL_HASH}\` to all files that reference constitutional compliance
              - Include constitutional hash in all API response examples
              - Ensure consistency across all documentation files

              **Constitutional Hash**: \`${processconfig/environments/development.env.CONSTITUTIONAL_HASH}\``
            });

  # Performance Target Validation
  performance_target_validation:
    runs-on: ubuntu-latest
    name: Performance Target Validation
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate performance targets
        run: |
          echo "üìä Validating performance targets in changed documentation..."

          # Get changed documentation files
          git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "\.md$" > changed_docs.txt || true

          TARGET_VIOLATIONS=""

          while IFS= read -r file; do
            if [ -f "$file" ]; then
              # Check for performance targets in documentation
              if grep -qi "performance\|target\|latency\|throughput\|rps" "$file"; then
                # Validate specific targets
                if grep -q "100.*RPS\|RPS.*100" "$file" && ! grep -q "‚â•100.*RPS\|‚â•100.*requests" "$file"; then
                  TARGET_VIOLATIONS="$TARGET_VIOLATIONS\n- $file: throughput target should be ‚â•100 RPS"
                fi

                if grep -q "5ms\|latency" "$file" && ! grep -q "‚â§5ms\|P99.*5ms" "$file"; then
                  TARGET_VIOLATIONS="$TARGET_VIOLATIONS\n- $file: latency target should be ‚â§5ms P99"
                fi

                if grep -q "85%\|cache" "$file" && ! grep -q "‚â•85%.*cache\|cache.*‚â•85%" "$file"; then
                  TARGET_VIOLATIONS="$TARGET_VIOLATIONS\n- $file: cache hit rate target should be ‚â•85%"
                fi
              fi
            fi
          done < changed_docs.txt

          if [ -n "$TARGET_VIOLATIONS" ]; then
            echo "‚ùå Performance target violations found:$TARGET_VIOLATIONS"
            echo "target_violations<<EOF" >> $GITHUB_ENV
            echo -e "$TARGET_VIOLATIONS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          else
            echo "‚úÖ Performance target validation passed"
          fi

  # Final Status Check
  documentation_status:
    runs-on: ubuntu-latest
    name: Documentation Status Summary
    needs:
      [
        pr_template_check,
        documentation_impact_analysis,
        constitutional_hash_validation,
        performance_target_validation,
      ]
    if: always()
    steps:
      - name: Generate status summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'PR Template Check': '${{ needs.pr_template_check.result }}',
              'Documentation Impact Analysis': '${{ needs.documentation_impact_analysis.result }}',
              'Constitutional Hash Validation': '${{ needs.constitutional_hash_validation.result }}',
              'Performance Target Validation': '${{ needs.performance_target_validation.result }}'
            };

            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            const allPassed = passed === total;

            const statusEmoji = allPassed ? '‚úÖ' : '‚ùå';
            const statusText = allPassed ? 'PASSED' : 'FAILED';

            let summary = `${statusEmoji} **Documentation Requirements Check ${statusText}** (${passed}/${total})\n\n`;

            for (const [check, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
              summary += `${emoji} ${check}: ${result}\n`;
            }

            if (allPassed) {
              summary += `\nüéâ All documentation requirements satisfied!\n`;
              summary += `Constitutional Hash: \`${processconfig/environments/development.env.CONSTITUTIONAL_HASH}\` ‚úÖ`;
            } else {
              summary += `\nüìã Please address the issues above before merging.\n`;
              summary += `Constitutional Hash: \`${processconfig/environments/development.env.CONSTITUTIONAL_HASH}\` must be validated.`;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });

            if (!allPassed) {
              core.setFailed('Documentation requirements check failed');
            }
