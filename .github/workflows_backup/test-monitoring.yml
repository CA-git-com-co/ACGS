name: ACGS-2 Test Suite Monitoring

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 6 AM UTC for continuous monitoring
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Specific test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - constitutional_ai
        - governance_synthesis
        - formal_verification
        - auth_service
        - evolutionary_computation

env:
  CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
  PYTHON_VERSION: "3.11"
  PERFORMANCE_THRESHOLD_P99: 5  # milliseconds
  PERFORMANCE_THRESHOLD_RPS: 100
  PERFORMANCE_THRESHOLD_CACHE: 85  # percentage

jobs:
  test-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test-suite:
          - constitutional_ai
          - governance_synthesis
          - formal_verification
          - auth_service
          - evolutionary_computation
      fail-fast: false
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for trend analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/environments/requirements.txt
        pip install pytest-cov pytest-html pytest-json-report pytest-benchmark
        pip install coverage[toml]
    
    - name: Setup Test Environment
      run: |
        # Create test directories
        mkdir -p test-reports/coverage
        mkdir -p test-reports/html
        mkdir -p test-reports/json
        mkdir -p test-reports/performance
        
        # Set environment variables for testing
        echo "ACGS_TEST_MODE=ci" >> $GITHUB_ENV
        echo "CONSTITUTIONAL_HASH=${{ env.CONSTITUTIONAL_HASH }}" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/acgs_test" >> $GITHUB_ENV
    
    - name: Start Test Services
      run: |
        # Start Redis for caching tests
        sudo systemctl start redis-server
        
        # Start PostgreSQL for database tests
        sudo systemctl start postgresql
        sudo -u postgres createdb acgs_test || true
    
    - name: Run Test Suite with Monitoring
      run: |
        # Determine test path based on matrix
        case "${{ matrix.test-suite }}" in
          "constitutional_ai")
            TEST_PATH="tests/services/test_constitutional_ai_service.py"
            ;;
          "governance_synthesis")
            TEST_PATH="tests/services/test_governance_synthesis_service.py"
            ;;
          "formal_verification")
            TEST_PATH="tests/services/test_formal_verification_service.py"
            ;;
          "auth_service")
            TEST_PATH="tests/test_auth_service.py"
            ;;
          "evolutionary_computation")
            TEST_PATH="tests/services/test_evolutionary_computation_service.py"
            ;;
          *)
            TEST_PATH="tests/"
            ;;
        esac
        
        # Run tests with comprehensive reporting
        python -m pytest $TEST_PATH \
          --cov=. \
          --cov-report=html:test-reports/coverage/${{ matrix.test-suite }} \
          --cov-report=xml:test-reports/coverage/${{ matrix.test-suite }}.xml \
          --cov-report=term-missing \
          --html=test-reports/html/${{ matrix.test-suite }}.html \
          --self-contained-html \
          --json-report --json-report-file=test-reports/json/${{ matrix.test-suite }}.json \
          --benchmark-json=test-reports/performance/${{ matrix.test-suite }}_benchmark.json \
          --tb=short \
          -v \
          --durations=10 \
          --strict-markers \
          --disable-warnings \
          || echo "Tests completed with some failures"
    
    - name: Generate Test Metrics
      run: |
        python scripts/ci/generate_test_metrics.py \
          --test-suite ${{ matrix.test-suite }} \
          --json-report test-reports/json/${{ matrix.test-suite }}.json \
          --coverage-xml test-reports/coverage/${{ matrix.test-suite }}.xml \
          --benchmark-json test-reports/performance/${{ matrix.test-suite }}_benchmark.json \
          --output test-reports/metrics/${{ matrix.test-suite }}_metrics.json
    
    - name: Validate Constitutional Compliance
      run: |
        python scripts/ci/validate_constitutional_compliance.py \
          --test-reports test-reports/json/${{ matrix.test-suite }}.json \
          --expected-hash ${{ env.CONSTITUTIONAL_HASH }} \
          --output test-reports/compliance/${{ matrix.test-suite }}_compliance.json
    
    - name: Check Performance Thresholds
      run: |
        python scripts/ci/check_performance_thresholds.py \
          --benchmark-json test-reports/performance/${{ matrix.test-suite }}_benchmark.json \
          --p99-threshold ${{ env.PERFORMANCE_THRESHOLD_P99 }} \
          --rps-threshold ${{ env.PERFORMANCE_THRESHOLD_RPS }} \
          --cache-threshold ${{ env.PERFORMANCE_THRESHOLD_CACHE }} \
          --output test-reports/performance/${{ matrix.test-suite }}_performance_check.json
    
    - name: Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.test-suite }}
        path: test-reports/
        retention-days: 30
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: test-reports/coverage/${{ matrix.test-suite }}.xml
        flags: ${{ matrix.test-suite }}
        name: codecov-${{ matrix.test-suite }}
        fail_ci_if_error: false
    
    - name: Comment PR with Test Results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = `test-reports/metrics/${{ matrix.test-suite }}_metrics.json`;
          
          if (fs.existsSync(path)) {
            const metrics = JSON.parse(fs.readFileSync(path, 'utf8'));
            const body = `## üß™ Test Results for ${{ matrix.test-suite }}
            
            - **Success Rate**: ${metrics.success_rate}%
            - **Total Tests**: ${metrics.total_tests}
            - **Passed**: ${metrics.passed_tests}
            - **Failed**: ${metrics.failed_tests}
            - **Coverage**: ${metrics.coverage_percentage}%
            - **Constitutional Compliance**: ${metrics.constitutional_compliance ? '‚úÖ' : '‚ùå'}
            - **Performance**: ${metrics.performance_check ? '‚úÖ' : '‚ùå'}
            
            ${metrics.success_rate >= 70 ? 'üéØ **Target >70% Success Rate Achieved!**' : '‚ö†Ô∏è **Below 70% Success Rate Target**'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

  aggregate-results:
    needs: test-monitoring
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download All Test Reports
      uses: actions/download-artifact@v3
      with:
        path: all-test-reports/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jinja2 matplotlib seaborn pandas
    
    - name: Generate Aggregate Report
      run: |
        python scripts/ci/generate_aggregate_report.py \
          --reports-dir all-test-reports/ \
          --output-dir aggregate-reports/ \
          --constitutional-hash ${{ env.CONSTITUTIONAL_HASH }}
    
    - name: Upload Aggregate Reports
      uses: actions/upload-artifact@v3
      with:
        name: aggregate-test-reports
        path: aggregate-reports/
        retention-days: 90
    
    - name: Check Overall Success Rate
      run: |
        python scripts/ci/check_overall_success_rate.py \
          --reports-dir all-test-reports/ \
          --threshold 70 \
          --constitutional-hash ${{ env.CONSTITUTIONAL_HASH }}
    
    - name: Send Slack Notification
      if: failure() || (success() && github.event_name == 'schedule')
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#acgs-monitoring'
        text: |
          ACGS-2 Test Suite Monitoring Report
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Overall Status: ${{ job.status }}
          Constitutional Compliance: Validated (cdd01ef066bc6cf2)
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
