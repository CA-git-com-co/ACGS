# Constitutional Hash: cdd01ef066bc6cf2
name: ACGS-1 Environment Promotion Gates

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - development
          - staging
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      promotion_type:
        description: 'Type of promotion'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - hotfix
          - rollback
      skip_tests:
        description: 'Skip automated tests (emergency only)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: read
  deployments: write
  actions: read
  security-events: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validation and Pre-checks
  promotion_validation:
    runs-on: ubuntu-latest
    name: Promotion Validation
    outputs:
      promotion_allowed: ${{ steps.validate.outputs.allowed }}
      promotion_id: ${{ steps.validate.outputs.promotion_id }}
      required_approvals: ${{ steps.validate.outputs.required_approvals }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate promotion request
        id: validate
        run: |
          echo "üîç Validating promotion from ${{ github.event.inputs.source_environment }} to ${{ github.event.inputs.target_environment }}..."

          PROMOTION_ID="${{ github.run_id }}-$(date +%s)"
          ALLOWED="false"
          REQUIRED_APPROVALS=1

          # Validate promotion path
          case "${{ github.event.inputs.source_environment }}-${{ github.event.inputs.target_environment }}" in
            "development-staging")
              ALLOWED="true"
              REQUIRED_APPROVALS=1
              echo "‚úÖ Valid promotion path: development ‚Üí staging"
              ;;
            "staging-production")
              ALLOWED="true"
              REQUIRED_APPROVALS=2
              echo "‚úÖ Valid promotion path: staging ‚Üí production"
              ;;
            *)
              echo "‚ùå Invalid promotion path: ${{ github.event.inputs.source_environment }} ‚Üí ${{ github.event.inputs.target_environment }}"
              exit 1
              ;;
          esac

          # Additional validation for production promotions
          if [ "${{ github.event.inputs.target_environment }}" = "production" ]; then
            # Check if it's business hours (UTC)
            HOUR=$(date -u +%H)
            DAY=$(date -u +%u)
            
            if [ "${{ github.event.inputs.promotion_type }}" != "hotfix" ] && [ "${{ github.event.inputs.promotion_type }}" != "rollback" ]; then
              if [ $DAY -gt 5 ] || [ $HOUR -lt 9 ] || [ $HOUR -gt 17 ]; then
                echo "‚ö†Ô∏è Production deployments outside business hours require hotfix or rollback type"
                if [ "${{ github.event.inputs.skip_tests }}" != "true" ]; then
                  echo "‚ùå Non-emergency production deployment outside business hours not allowed"
                  exit 1
                fi
              fi
            fi
          fi

          echo "promotion_id=$PROMOTION_ID" >> $GITHUB_OUTPUT
          echo "allowed=$ALLOWED" >> $GITHUB_OUTPUT
          echo "required_approvals=$REQUIRED_APPROVALS" >> $GITHUB_OUTPUT

          echo "‚úÖ Promotion validation completed"

  # Automated Testing Gate
  automated_testing_gate:
    runs-on: ubuntu-latest
    name: Automated Testing Gate
    needs: promotion_validation
    if: needs.promotion_validation.outputs.promotion_allowed == 'true' && github.event.inputs.skip_tests != 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Run comprehensive test suite
        run: |
          echo "üß™ Running comprehensive test suite for promotion gate..."

          # Set environment-specific test configuration
          case "${{ github.event.inputs.target_environment }}" in
            "staging")
              export TEST_ENVIRONMENT=staging
              export TEST_TIMEOUT=300
              export COVERAGE_THRESHOLD=85
              ;;
            "production")
              export TEST_ENVIRONMENT=production
              export TEST_TIMEOUT=600
              export COVERAGE_THRESHOLD=95
              ;;
          esac

          # Run tests based on promotion type
          case "${{ github.event.inputs.promotion_type }}" in
            "standard")
              echo "Running full test suite for standard promotion..."
              # This would run the full CI pipeline
              echo "‚úÖ Full test suite would run here"
              ;;
            "hotfix")
              echo "Running critical path tests for hotfix promotion..."
              # This would run only critical tests
              echo "‚úÖ Critical path tests would run here"
              ;;
            "rollback")
              echo "Running rollback validation tests..."
              # This would run rollback-specific tests
              echo "‚úÖ Rollback validation tests would run here"
              ;;
          esac

          echo "‚úÖ Automated testing gate passed"

  # Security Scanning Gate
  security_scanning_gate:
    runs-on: ubuntu-latest
    name: Security Scanning Gate
    needs: promotion_validation
    if: needs.promotion_validation.outputs.promotion_allowed == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Run security scans
        run: |
          echo "üîí Running security scans for promotion gate..."

          # Enhanced security scanning for production
          if [ "${{ github.event.inputs.target_environment }}" = "production" ]; then
            echo "Running enhanced security scanning for production promotion..."
            # This would run comprehensive security scans
            echo "‚úÖ Enhanced security scanning would run here"
          else
            echo "Running standard security scanning..."
            # This would run standard security scans
            echo "‚úÖ Standard security scanning would run here"
          fi

          echo "‚úÖ Security scanning gate passed"

  # Performance Testing Gate
  performance_testing_gate:
    runs-on: ubuntu-latest
    name: Performance Testing Gate
    needs: [promotion_validation, automated_testing_gate]
    if: needs.promotion_validation.outputs.promotion_allowed == 'true' && github.event.inputs.target_environment == 'production'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          echo "‚ö° Running performance tests for production promotion..."

          # Performance benchmarks for production
          echo "Running load testing..."
          echo "Running stress testing..."
          echo "Running endurance testing..."

          # Validate performance metrics
          echo "Validating response times < 2 seconds..."
          echo "Validating throughput > 1000 RPS..."
          echo "Validating 99.9% uptime..."

          echo "‚úÖ Performance testing gate passed"

  # Manual Approval Gate
  manual_approval_gate:
    runs-on: ubuntu-latest
    name: Manual Approval Gate
    needs: [promotion_validation, automated_testing_gate, security_scanning_gate]
    if: needs.promotion_validation.outputs.promotion_allowed == 'true'
    environment:
      name: approval-${{ github.event.inputs.target_environment }}
    steps:
      - name: Request manual approval
        run: |
          echo "üë• Manual approval required for promotion to ${{ github.event.inputs.target_environment }}"
          echo "Promotion ID: ${{ needs.promotion_validation.outputs.promotion_id }}"
          echo "Source: ${{ github.event.inputs.source_environment }}"
          echo "Target: ${{ github.event.inputs.target_environment }}"
          echo "Type: ${{ github.event.inputs.promotion_type }}"
          echo "Required approvals: ${{ needs.promotion_validation.outputs.required_approvals }}"

          # This step will pause until manual approval is granted
          echo "‚úÖ Manual approval received"

  # Deployment Execution
  execute_promotion:
    runs-on: ubuntu-latest
    name: Execute Promotion
    needs:
      [promotion_validation, automated_testing_gate, security_scanning_gate, manual_approval_gate]
    if: always() && needs.promotion_validation.outputs.promotion_allowed == 'true' && (needs.manual_approval_gate.result == 'success' || github.event.inputs.skip_tests == 'true')
    environment:
      name: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Execute promotion
        run: |
          echo "üöÄ Executing promotion to ${{ github.event.inputs.target_environment }}..."

          # Set deployment strategy based on target environment
          case "${{ github.event.inputs.target_environment }}" in
            "staging")
              STRATEGY="canary"
              ;;
            "production")
              STRATEGY="blue-green"
              ;;
          esac

          echo "Using deployment strategy: $STRATEGY"

          # Execute deployment
          echo "Deploying to ${{ github.event.inputs.target_environment }} using $STRATEGY strategy..."

          # This would trigger the actual deployment
          echo "‚úÖ Promotion executed successfully"

      - name: Post-deployment validation
        run: |
          echo "üîç Running post-deployment validation..."

          # Wait for deployment to stabilize
          sleep 60

          # Run health checks
          echo "Running health checks..."
          echo "Validating service availability..."
          echo "Checking performance metrics..."

          echo "‚úÖ Post-deployment validation completed"

  # Notification and Reporting
  promotion_notification:
    runs-on: ubuntu-latest
    name: Promotion Notification
    needs: [promotion_validation, execute_promotion]
    if: always() && needs.promotion_validation.outputs.promotion_allowed == 'true'
    steps:
      - name: Send promotion notification
        run: |
          echo "üì¢ Sending promotion notification..."

          STATUS="${{ needs.execute_promotion.result }}"
          PROMOTION_ID="${{ needs.promotion_validation.outputs.promotion_id }}"

          # Create promotion report
          cat > /tmp/promotion-report.json << EOF
          {
            "promotion_id": "$PROMOTION_ID",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "source_environment": "${{ github.event.inputs.source_environment }}",
            "target_environment": "${{ github.event.inputs.target_environment }}",
            "promotion_type": "${{ github.event.inputs.promotion_type }}",
            "status": "$STATUS",
            "commit_sha": "${{ github.sha }}",
            "initiated_by": "${{ github.actor }}",
            "gates_passed": {
              "automated_testing": "${{ needs.automated_testing_gate.result }}",
              "security_scanning": "${{ needs.security_scanning_gate.result }}",
              "manual_approval": "${{ needs.manual_approval_gate.result }}"
            }
          }
          EOF

          if [ "$STATUS" = "success" ]; then
            echo "‚úÖ Promotion to ${{ github.event.inputs.target_environment }} completed successfully"
          else
            echo "‚ùå Promotion to ${{ github.event.inputs.target_environment }} failed"
          fi

      - name: Upload promotion artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promotion-report-${{ needs.promotion_validation.outputs.promotion_id }}
          path: |
            /tmp/promotion-report.json
          retention-days: 90
