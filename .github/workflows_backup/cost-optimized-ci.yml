# Constitutional Hash: cdd01ef066bc6cf2
name: Cost-Optimized ACGS CI/CD

on:
  push:
    branches: [main, master, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, master, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM (reduced from daily)
  workflow_dispatch:
    inputs:
      force_full_build:
        description: 'Force full build regardless of changes'
        required: false
        default: false
        type: boolean
      target_environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  RUST_VERSION: '1.81.0'
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Smart change detection to minimize unnecessary runs
  detect-changes:
    runs-on: ubuntu-latest
    name: Smart Change Detection
    outputs:
      python: ${{ steps.filter.outputs.python }}
      rust: ${{ steps.filter.outputs.rust }}
      node: ${{ steps.filter.outputs.node }}
      docker: ${{ steps.filter.outputs.docker }}
      security: ${{ steps.filter.outputs.security }}
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      should_run_tests: ${{ steps.decision.outputs.should_run_tests }}
      should_run_security: ${{ steps.decision.outputs.should_run_security }}
      should_build_docker: ${{ steps.decision.outputs.should_build_docker }}
      changed_services: ${{ steps.services.outputs.changed_services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - 'services/**/*.py'
              - '**/config/environments/requirements*.txt'
              - '**/config/environments/pyproject.toml'
              - 'tests/**/*.py'
            rust:
              - 'blockchain/**/*.rs'
              - '**/Cargo.toml'
              - '**/Cargo.lock'
              - 'blockchain/Anchor.toml'
            node:
              - '**/*.js'
              - '**/*.ts'
              - '**/package.json'
              - '**/package-lock.json'
              - '**/tsconfig.json'
            docker:
              - '**/Dockerfile*'
              - 'docker-compose*.yml'
              - 'infrastructure/docker/**'
            security:
              - '.github/workflows/**'
              - 'scripts/security/**'
              - 'config/security/**'
              - '**/config/environments/requirements*.txt'
              - '**/Cargo.toml'
              - '**/package.json'
            infrastructure:
              - 'infrastructure/**'
              - 'terraform/**'
              - 'kubernetes/**'

      - name: Detect changed services
        id: services
        run: |
          echo "Detecting which specific services changed..."
          CHANGED_SERVICES=""
          
          # Check each service directory for changes
          SERVICES=("constitutional-ai" "governance-synthesis" "policy-governance" "formal-verification" "integrity" "evolutionary-computation")
          
          for service in "${SERVICES[@]}"; do
            if [[ "${{ steps.filter.outputs.python }}" == "true" ]]; then
              if git diff --name-only HEAD~1 HEAD 2>/dev/null | grep -q "services.*$service"; then
                CHANGED_SERVICES="${CHANGED_SERVICES}${service},"
              fi
            fi
          done
          
          # Remove trailing comma
          CHANGED_SERVICES=${CHANGED_SERVICES%,}
          echo "changed_services=${CHANGED_SERVICES}" >> $GITHUB_OUTPUT
          echo "Changed services: ${CHANGED_SERVICES}"

      - name: Make execution decisions
        id: decision
        run: |
          echo "Making smart execution decisions based on changes..."
          
          # Always run tests on main/master, scheduled runs, or manual dispatch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
             [[ "${{ github.ref }}" == "refs/heads/master" ]] || \
             [[ "${{ github.event_name }}" == "schedule" ]] || \
             [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || \
             [[ "${{ github.event.inputs.force_full_build }}" == "true" ]]; then
            echo "should_run_tests=true" >> $GITHUB_OUTPUT
            echo "should_run_security=true" >> $GITHUB_OUTPUT
            echo "should_build_docker=true" >> $GITHUB_OUTPUT
            echo "✅ Full pipeline execution (main branch/scheduled/manual)"
          else
            # For PRs and feature branches, only run if relevant files changed
            if [[ "${{ steps.filter.outputs.python }}" == "true" ]] || \
               [[ "${{ steps.filter.outputs.rust }}" == "true" ]] || \
               [[ "${{ steps.filter.outputs.node }}" == "true" ]]; then
              echo "should_run_tests=true" >> $GITHUB_OUTPUT
              echo "✅ Running tests (code changes detected)"
            else
              echo "should_run_tests=false" >> $GITHUB_OUTPUT
              echo "⏭️ Skipping tests (no code changes)"
            fi
            
            if [[ "${{ steps.filter.outputs.security }}" == "true" ]]; then
              echo "should_run_security=true" >> $GITHUB_OUTPUT
              echo "✅ Running security scan (security-related changes)"
            else
              echo "should_run_security=false" >> $GITHUB_OUTPUT
              echo "⏭️ Skipping security scan (no security changes)"
            fi
            
            if [[ "${{ steps.filter.outputs.docker }}" == "true" ]] || \
               [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
               [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo "should_build_docker=true" >> $GITHUB_OUTPUT
              echo "✅ Building Docker images (Docker changes or main branch)"
            else
              echo "should_build_docker=false" >> $GITHUB_OUTPUT
              echo "⏭️ Skipping Docker build (no Docker changes)"
            fi
          fi

  # Optimized Python testing with smart matrix
  python-quality:
    runs-on: ubuntu-latest
    name: Python Quality & Testing
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_tests == 'true' && needs.detect-changes.outputs.python == 'true'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed_services != '' && format('["{0}"]', join(split(needs.detect-changes.outputs.changed_services, ','), '","')) || '["constitutional-ai", "governance-synthesis", "policy-governance", "formal-verification", "integrity", "evolutionary-computation"]') }}
      fail-fast: false
      max-parallel: 3 # Limit parallel jobs to control costs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Enhanced caching for Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
            ${{ env.UV_CACHE_DIR }}
            .venv
          key: python-${{ runner.os }}-${{ matrix.service }}-${{ hashFiles('**/config/environments/requirements*.txt', '**/config/environments/pyproject.toml') }}
          restore-keys: |
            python-${{ runner.os }}-${{ matrix.service }}-
            python-${{ runner.os }}-

      - name: Install UV package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Smart dependency installation
        run: |
          echo "Installing dependencies for ${{ matrix.service }}..."
          
          # Determine service path
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/platform/${{ matrix.service }}"
          else
            echo "Service ${{ matrix.service }} not found, skipping"
            exit 0
          fi
          
          cd "$SERVICE_PATH"
          
          # Create virtual environment and install dependencies
          uv venv
          source .venv/bin/activate
          
          # Install based on available configuration
          if [ -f "config/environments/pyproject.toml" ]; then
            uv pip install -e . || echo "⚠️ Project install failed"
          elif [ -f "config/environments/requirements.txt" ]; then
            uv pip install -r config/environments/requirements.txt || echo "⚠️ Requirements install failed"
          fi
          
          # Install testing tools
          uv pip install pytest black isort mypy coverage || echo "⚠️ Test tools install failed"

      - name: Run quality checks (parallel)
        run: |
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/platform/${{ matrix.service }}"
          else
            exit 0
          fi
          
          cd "$SERVICE_PATH"
          source .venv/bin/activate
          
          echo "Running parallel quality checks for ${{ matrix.service }}..."
          
          # Run checks in parallel to save time
          (black --check . || echo "⚠️ Black failed") &
          (isort --check-only . || echo "⚠️ isort failed") &
          (mypy . --ignore-missing-imports || echo "⚠️ mypy failed") &
          
          wait # Wait for all background jobs

      - name: Run tests with coverage
        run: |
          SERVICE_PATH=""
          if [ -d "services/core/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/core/${{ matrix.service }}"
          elif [ -d "services/platform/${{ matrix.service }}" ]; then
            SERVICE_PATH="services/platform/${{ matrix.service }}"
          else
            exit 0
          fi
          
          cd "$SERVICE_PATH"
          source .venv/bin/activate
          
          # Run tests if test directory exists
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=. --cov-report=xml || echo "⚠️ Tests failed"
          else
            echo "No tests found for ${{ matrix.service }}"
          fi

  # Optimized Rust/Blockchain building
  rust-build:
    runs-on: ubuntu-latest
    name: Rust Build & Quality
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_tests == 'true' && needs.detect-changes.outputs.rust == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Enhanced Rust caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
          key: rust-${{ runner.os }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            rust-${{ runner.os }}-

      - name: Install Solana CLI (cached)
        run: |
          if ! command -v solana >/dev/null 2>&1; then
            echo "Installing Solana CLI..."
            curl -sSfL https://release.solana.com/stable/install | sh
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          else
            echo "Solana CLI already available"
          fi

      - name: Install Anchor CLI (cached)
        run: |
          if ! command -v anchor >/dev/null 2>&1; then
            echo "Installing Anchor CLI..."
            npm install -g @coral-xyz/anchor-cli@0.29.0 || echo "⚠️ Anchor install failed"
          else
            echo "Anchor CLI already available"
          fi

      - name: Rust quality checks (parallel)
        working-directory: blockchain
        run: |
          echo "Running parallel Rust quality checks..."
          
          # Run checks in parallel
          (cargo fmt --all -- --check || echo "⚠️ Format check failed") &
          (cargo clippy --all-targets --all-features -- -D warnings || echo "⚠️ Clippy failed") &
          
          wait

      - name: Build Anchor programs
        working-directory: blockchain
        run: |
          echo "Building Anchor programs..."
          
          if command -v solana >/dev/null 2>&1; then
            solana config set --url localhost
          fi
          
          if command -v anchor >/dev/null 2>&1; then
            anchor build --skip-lint || echo "⚠️ Build failed"
          else
            echo "⚠️ Anchor not available, using cargo build"
            cargo build --release || echo "⚠️ Cargo build failed"
          fi

  # Consolidated security scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_security == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup security tools
        run: |
          echo "Installing security tools..."
          pip install safety bandit || echo "⚠️ Python security tools failed"
          
          if command -v cargo >/dev/null 2>&1; then
            cargo install cargo-audit || echo "⚠️ cargo-audit install failed"
          fi

      - name: Run comprehensive security scan
        run: |
          echo "Running security scans..."
          
          # Python security
          if command -v safety >/dev/null 2>&1; then
            safety check || echo "⚠️ Safety scan found issues"
          fi
          
          if command -v bandit >/dev/null 2>&1; then
            find . -name "*.py" -not -path "*/venv/*" | head -50 | xargs bandit || echo "⚠️ Bandit scan found issues"
          fi
          
          # Rust security
          if [ -d "blockchain" ] && command -v cargo-audit >/dev/null 2>&1; then
            cd blockchain
            cargo audit \
              --ignore RUSTSEC-2021-0145 \
              --ignore RUSTSEC-2023-0033 \
              --ignore RUSTSEC-2024-0375 \
              --ignore RUSTSEC-2024-0388 \
              --ignore RUSTSEC-2024-0436 \
              || echo "⚠️ Cargo audit found issues"
          fi

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Optimized Docker build (only when needed)
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [detect-changes, python-quality, rust-build]
    if: needs.detect-changes.outputs.should_build_docker == 'true' && (needs.python-quality.result == 'success' || needs.python-quality.result == 'skipped') && (needs.rust-build.result == 'success' || needs.rust-build.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Smart Docker build
        run: |
          echo "Building Docker images efficiently..."
          
          # Only build main image if Dockerfile exists
          if [ -f "infrastructure/docker/Dockerfile.acgs" ]; then
            # Use commit SHA for non-main branches, 'latest' for main
            TAG="${{ github.ref == 'refs/heads/main' && 'latest' || github.sha }}"
            
            docker buildx build \
              -f infrastructure/docker/Dockerfile.acgs \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG \
              --cache-from=type=gha \
              --cache-to=type=gha,mode=max \
              --push \
              .
            
            echo "✅ Built and pushed: $TAG"
          else
            echo "⚠️ No Dockerfile found, skipping build"
          fi

  # Cost-optimized reporting
  cost-optimized-report:
    runs-on: ubuntu-latest
    name: Pipeline Report
    needs: [detect-changes, python-quality, rust-build, security-scan, docker-build]
    if: always()
    steps:
      - name: Generate cost-optimized report
        run: |
          echo "📊 Cost-Optimized ACGS Pipeline Report"
          echo "======================================"
          echo "Execution Strategy: Smart change-based execution"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Trigger: ${{ github.event_name }}"
          echo ""
          echo "Change Detection Results:"
          echo "- Python: ${{ needs.detect-changes.outputs.python }}"
          echo "- Rust: ${{ needs.detect-changes.outputs.rust }}"
          echo "- Node: ${{ needs.detect-changes.outputs.node }}"
          echo "- Docker: ${{ needs.detect-changes.outputs.docker }}"
          echo "- Security: ${{ needs.detect-changes.outputs.security }}"
          echo ""
          echo "Execution Decisions:"
          echo "- Run Tests: ${{ needs.detect-changes.outputs.should_run_tests }}"
          echo "- Run Security: ${{ needs.detect-changes.outputs.should_run_security }}"
          echo "- Build Docker: ${{ needs.detect-changes.outputs.should_build_docker }}"
          echo ""
          echo "Job Results:"
          echo "- Python Quality: ${{ needs.python-quality.result }}"
          echo "- Rust Build: ${{ needs.rust-build.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Docker Build: ${{ needs.docker-build.result }}"
          echo ""
          
          # Calculate estimated cost savings
          JOBS_RUN=0
          JOBS_SKIPPED=0
          
          [[ "${{ needs.python-quality.result }}" != "skipped" ]] && ((JOBS_RUN++)) || ((JOBS_SKIPPED++))
          [[ "${{ needs.rust-build.result }}" != "skipped" ]] && ((JOBS_RUN++)) || ((JOBS_SKIPPED++))
          [[ "${{ needs.security-scan.result }}" != "skipped" ]] && ((JOBS_RUN++)) || ((JOBS_SKIPPED++))
          [[ "${{ needs.docker-build.result }}" != "skipped" ]] && ((JOBS_RUN++)) || ((JOBS_SKIPPED++))
          
          echo "Cost Optimization:"
          echo "- Jobs executed: $JOBS_RUN"
          echo "- Jobs skipped: $JOBS_SKIPPED"
          echo "- Estimated savings: $(($JOBS_SKIPPED * 15))% vs full pipeline"
          echo ""
          
          if [[ $JOBS_RUN -eq 0 ]]; then
            echo "🎉 MAXIMUM COST SAVINGS: No code changes detected, all jobs skipped!"
          elif [[ $JOBS_SKIPPED -gt 0 ]]; then
            echo "💰 COST OPTIMIZED: Smart execution saved unnecessary job runs"
          else
            echo "🔄 FULL PIPELINE: All components needed execution"
          fi