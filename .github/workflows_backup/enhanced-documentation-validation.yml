# ACGS-2 Enhanced Documentation Validation Workflow
# Constitutional Hash: cdd01ef066bc6cf2

name: Enhanced Documentation Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.md'
      - '**/*.rst'
      - '**/*.txt'
      - 'docs/**'
      - 'scripts/deployment/deploy_constitutional_hash.py'
      - 'fix_broken_links.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.md'
      - '**/*.rst'
      - '**/*.txt'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      target_compliance:
        description: 'Target constitutional compliance percentage'
        required: false
        default: '85'
        type: string
      fix_issues:
        description: 'Automatically fix issues where possible'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
  TARGET_COMPLIANCE: ${{ github.event.inputs.target_compliance || '85' }}

jobs:
  constitutional-compliance:
    name: Constitutional Compliance Validation
    runs-on: self-hosted
    timeout-minutes: 10
    outputs:
      compliance_rate: ${{ steps.compliance.outputs.compliance_rate }}
      target_met: ${{ steps.compliance.outputs.target_met }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Validate constitutional compliance
        id: compliance
        run: |
          echo "🔍 Validating constitutional compliance..."
          
          if [ -f "scripts/deployment/deploy_constitutional_hash.py" ]; then
            python3 scripts/deployment/deploy_constitutional_hash.py --validate > compliance_report.txt
            
            # Extract compliance percentage
            COMPLIANCE=$(grep "Current compliance:" compliance_report.txt | grep -o '[0-9.]*%' | head -1 | sed 's/%//')
            echo "compliance_rate=$COMPLIANCE" >> $GITHUB_OUTPUT
            
            # Check if target met
            if (( $(echo "$COMPLIANCE >= $TARGET_COMPLIANCE" | bc -l) )); then
              echo "target_met=true" >> $GITHUB_OUTPUT
              echo "✅ Constitutional compliance: $COMPLIANCE% (Target: $TARGET_COMPLIANCE%)"
            else
              echo "target_met=false" >> $GITHUB_OUTPUT
              echo "❌ Constitutional compliance: $COMPLIANCE% (Target: $TARGET_COMPLIANCE%)"
            fi
            
            cat compliance_report.txt
          else
            echo "⚠️ Constitutional hash deployment tool not found"
            echo "compliance_rate=0" >> $GITHUB_OUTPUT
            echo "target_met=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-fix constitutional compliance
        if: steps.compliance.outputs.target_met == 'false' && github.event.inputs.fix_issues == 'true'
        run: |
          echo "🔧 Auto-fixing constitutional compliance..."
          python3 scripts/deployment/deploy_constitutional_hash.py --target $TARGET_COMPLIANCE
          
          # Commit changes if any
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Auto-fix: Deploy constitutional hash to achieve $TARGET_COMPLIANCE% compliance

            Constitutional Hash: $CONSTITUTIONAL_HASH
            Target Compliance: $TARGET_COMPLIANCE%
            Auto-generated by: enhanced-documentation-validation.yml"
            
            git push
            echo "✅ Constitutional hash deployed and committed"
          fi

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: constitutional-compliance-report
          path: compliance_report.txt
          retention-days: 30

  link-validation:
    name: Link Validation
    runs-on: self-hosted
    timeout-minutes: 15
    outputs:
      broken_count: ${{ steps.links.outputs.broken_count }}
      links_acceptable: ${{ steps.links.outputs.links_acceptable }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Analyze broken links
        id: links
        run: |
          echo "🔗 Analyzing internal links..."
          
          if [ -f "fix_broken_links.py" ]; then
            python3 fix_broken_links.py --analyze-only > link_analysis.txt
            
            # Extract broken link count
            BROKEN_LINKS=$(grep "Broken links:" link_analysis.txt | grep -o '[0-9]*' | head -1)
            echo "broken_count=$BROKEN_LINKS" >> $GITHUB_OUTPUT
            
            # Set threshold for acceptable broken links
            THRESHOLD=100
            if [ "$BROKEN_LINKS" -le "$THRESHOLD" ]; then
              echo "links_acceptable=true" >> $GITHUB_OUTPUT
              echo "✅ Broken links: $BROKEN_LINKS (Threshold: $THRESHOLD)"
            else
              echo "links_acceptable=false" >> $GITHUB_OUTPUT
              echo "⚠️ Broken links: $BROKEN_LINKS (Threshold: $THRESHOLD)"
            fi
            
            cat link_analysis.txt
          else
            echo "⚠️ Link validation tool not found"
            echo "broken_count=0" >> $GITHUB_OUTPUT
            echo "links_acceptable=true" >> $GITHUB_OUTPUT
          fi

      - name: Auto-fix critical broken links
        if: steps.links.outputs.links_acceptable == 'false' && github.event.inputs.fix_issues == 'true'
        run: |
          echo "🔧 Auto-fixing critical broken links..."
          python3 fix_broken_links.py --create-missing
          
          # Commit changes if any
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Auto-fix: Create missing documentation files to resolve broken links

            Constitutional Hash: $CONSTITUTIONAL_HASH
            Auto-generated by: enhanced-documentation-validation.yml"
            
            git push
            echo "✅ Missing documentation files created and committed"
          fi

      - name: Upload link analysis report
        uses: actions/upload-artifact@v4
        with:
          name: link-analysis-report
          path: link_analysis.txt
          retention-days: 30

  documentation-quality:
    name: Documentation Quality Check
    runs-on: self-hosted
    timeout-minutes: 10
    outputs:
      all_required_present: ${{ steps.required_files.outputs.all_required_present }}
      critical_hash_complete: ${{ steps.critical_hash.outputs.critical_hash_complete }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for required documentation files
        id: required_files
        run: |
          echo "📋 Checking required documentation files..."
          
          REQUIRED_FILES=(
            "docs/README.md"
            "docs/TECHNICAL_SPECIFICATIONS_2025.md"
            "docs/integration/ACGS_XAI_INTEGRATION_GUIDE.md"
            "services/claude.md"
            "docs/api/claude.md"
            "infrastructure/claude.md"
            "config/claude.md"
            "tools/claude.md"
            "docs/architecture/claude.md"
            "docs/deployment/claude.md"
            "docs/security/claude.md"
            "docs/research/claude.md"
            "docs/training/claude.md"
          )
          
          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
              echo "❌ Missing: $file"
            else
              echo "✅ Found: $file"
            fi
          done
          
          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "all_required_present=true" >> $GITHUB_OUTPUT
            echo "✅ All required documentation files present"
          else
            echo "all_required_present=false" >> $GITHUB_OUTPUT
            echo "missing_files=${MISSING_FILES[*]}" >> $GITHUB_OUTPUT
            echo "❌ Missing ${#MISSING_FILES[@]} required documentation files"
          fi

      - name: Check constitutional hash in critical files
        id: critical_hash
        run: |
          echo "🔒 Checking constitutional hash in critical files..."
          
          CRITICAL_FILES=(
            "docs/README.md"
            "docs/TECHNICAL_SPECIFICATIONS_2025.md"
            "docs/integration/ACGS_XAI_INTEGRATION_GUIDE.md"
            "services/claude.md"
            "docs/api/claude.md"
            "docs/architecture/claude.md"
            "docs/deployment/claude.md"
            "docs/security/claude.md"
          )
          
          MISSING_HASH=()
          for file in "${CRITICAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              if grep -q "$CONSTITUTIONAL_HASH" "$file"; then
                echo "✅ Hash found in: $file"
              else
                MISSING_HASH+=("$file")
                echo "❌ Hash missing in: $file"
              fi
            fi
          done
          
          if [ ${#MISSING_HASH[@]} -eq 0 ]; then
            echo "critical_hash_complete=true" >> $GITHUB_OUTPUT
            echo "✅ Constitutional hash present in all critical files"
          else
            echo "critical_hash_complete=false" >> $GITHUB_OUTPUT
            echo "missing_hash_files=${MISSING_HASH[*]}" >> $GITHUB_OUTPUT
            echo "❌ Constitutional hash missing in ${#MISSING_HASH[@]} critical files"
          fi

      - name: Generate quality summary
        run: |
          echo "📊 Documentation Quality Summary"
          echo "================================"
          echo "Constitutional Hash: $CONSTITUTIONAL_HASH"
          echo "Required Files: ${{ steps.required_files.outputs.all_required_present }}"
          echo "Critical Hash Coverage: ${{ steps.critical_hash.outputs.critical_hash_complete }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

  validation-summary:
    name: Validation Summary
    runs-on: self-hosted
    needs: [constitutional-compliance, link-validation, documentation-quality]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Generate validation summary
        run: |
          echo "📊 ACGS-2 Enhanced Documentation Validation Summary"
          echo "=================================================="  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
          echo "Constitutional Hash: $CONSTITUTIONAL_HASH"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "Validation Results:"
          echo "- Constitutional Compliance: ${{ needs.constitutional-compliance.result }} (${{ needs.constitutional-compliance.outputs.compliance_rate }}%)"
          echo "- Link Validation: ${{ needs.link-validation.result }} (${{ needs.link-validation.outputs.broken_count }} broken links)"
          echo "- Documentation Quality: ${{ needs.documentation-quality.result }}"
          echo ""
          
          # Determine overall status
          if [ "${{ needs.constitutional-compliance.result }}" = "success" ] && \
             [ "${{ needs.link-validation.result }}" = "success" ] && \
             [ "${{ needs.documentation-quality.result }}" = "success" ]; then
            echo "✅ Overall Status: PASSED"
            echo "All documentation validation checks passed successfully."
          else
            echo "❌ Overall Status: FAILED"
            echo "One or more documentation validation checks failed."
            
            # Don't fail the workflow if auto-fix is enabled
            if [ "${{ github.event.inputs.fix_issues }}" != "true" ]; then
              exit 1
            else
              echo "Auto-fix enabled - workflow will continue despite failures"
            fi
          fi
