# Constitutional Hash: cdd01ef066bc6cf2
name: 'ACGS: Dependency Monitoring'

on:
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM UTC
  workflow_dispatch:
    inputs:
      alert_level:
        description: 'Alert level for vulnerabilities'
        required: false
        default: 'high'
        type: choice
        options:
          - critical
          - high
          - medium
          - low

permissions:
  contents: read
  security-events: write
  issues: write
  actions: read

env:
  ALERT_LEVEL: ${{ github.event.inputs.alert_level || 'high' }}
  PYTHON_VERSION: '3.11'

jobs:
  # Python Dependencies Monitoring
  python-dependency-monitoring:
    runs-on: ubuntu-latest
    name: Python Dependencies Monitoring
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install monitoring tools
        run: |
          echo "🔧 Installing Python dependency monitoring tools..."
          pip install safety pip-audit
          echo "✅ Tools installed"

      - name: Install project dependencies
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "⚠️ No requirements.txt found, continuing with system packages"
          fi
        continue-on-error: true

      - name: Run comprehensive dependency audit
        run: |
          if [ -f "scripts/security/comprehensive_dependency_audit.py" ]; then
            python scripts/security/comprehensive_dependency_audit.py
          else
            echo "⚠️ Comprehensive audit script not found, running standard safety check"
            safety check --json --output safety-report.json || echo "Safety scan completed with warnings"
          fi
        continue-on-error: true

      - name: Run Safety check
        id: safety_check
        run: |
          echo "🔍 Running Safety vulnerability check..."
          mkdir -p /tmp/reports
          
          if safety check --json --output /tmp/reports/safety-report.json; then
            echo "safety_status=success" >> $GITHUB_OUTPUT
            echo "✅ No vulnerabilities found by Safety"
          else
            echo "safety_status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Vulnerabilities found by Safety"
          fi

      - name: Run pip-audit check
        id: pip_audit_check
        run: |
          echo "🔍 Running pip-audit vulnerability check..."
          
          if pip-audit --format=json --output=/tmp/reports/pip-audit-report.json; then
            echo "pip_audit_status=success" >> $GITHUB_OUTPUT
            echo "✅ No vulnerabilities found by pip-audit"
          else
            echo "pip_audit_status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Vulnerabilities found by pip-audit"
          fi

      - name: Check for outdated packages
        run: |
          echo "📋 Checking for outdated packages..."
          pip list --outdated --format=json > /tmp/reports/outdated-packages.json || echo "Failed to check outdated packages"

      - name: Generate dependency report
        run: |
          if [ -f "scripts/security/generate_dependency_report.py" ]; then
            python scripts/security/generate_dependency_report.py
          else
            echo "📊 Generating basic dependency report..."
            cat > /tmp/reports/python-dependency-summary.json << EOF
            {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "language": "python",
              "safety_status": "${{ steps.safety_check.outputs.safety_status }}",
              "pip_audit_status": "${{ steps.pip_audit_check.outputs.pip_audit_status }}",
              "alert_level": "${{ env.ALERT_LEVEL }}"
            }
            EOF
          fi

      - name: Create security advisory on failure
        if: failure()
        run: |
          if [ -f "scripts/security/create_security_advisory.py" ]; then
            python scripts/security/create_security_advisory.py
          else
            echo "⚠️ Security advisory script not found, manual review required"
          fi

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-dependency-reports
          path: /tmp/reports/
          retention-days: 14

  # Node.js Dependencies Monitoring
  nodejs-dependency-monitoring:
    runs-on: ubuntu-latest
    name: Node.js Dependencies Monitoring
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install monitoring tools
        run: |
          echo "🔧 Installing Node.js dependency monitoring tools..."
          timeout 300 npm install -g audit-ci better-npm-audit || {
            echo "⚠️ npm tools install failed, continuing with basic audit..."
          }
          echo "✅ Tools installation completed"

      - name: Run npm audit
        id: npm_audit
        run: |
          echo "🔍 Running npm audit..."
          mkdir -p /tmp/reports

          # Find and audit all package.json files
          find . -name "package.json" -not -path "*/node_modules/*" | while read package_file; do
            dir=$(dirname "$package_file")
            echo "Auditing $package_file..."
            
            cd "$dir"
            
            # Run npm audit
            if npm audit --audit-level=${{ env.ALERT_LEVEL }} --json > "/tmp/reports/npm-audit-$(basename $dir).json"; then
              echo "npm_audit_status=success" >> $GITHUB_OUTPUT
            else
              echo "npm_audit_status=failed" >> $GITHUB_OUTPUT
            fi
            
            cd - > /dev/null
          done

      - name: Upload Node.js reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nodejs-dependency-reports
          path: /tmp/reports/
          retention-days: 14

  # Rust Dependencies Monitoring
  rust-dependency-monitoring:
    runs-on: ubuntu-latest
    name: Rust Dependencies Monitoring
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            blockchain/target/
          key: rust-audit-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-audit-${{ runner.os }}-

      - name: Install monitoring tools
        run: |
          echo "🔧 Installing Rust dependency monitoring tools..."
          timeout 300 cargo install cargo-audit || {
            echo "⚠️ cargo-audit install failed, continuing without it..."
            exit 0
          }
          echo "✅ Tools installed"

      - name: Run cargo audit
        id: cargo_audit
        run: |
          echo "🔍 Running cargo audit..."
          mkdir -p /tmp/reports

          if [ -d "blockchain" ]; then
            cd blockchain
            
            # Run cargo audit with known ignores for Solana ecosystem
            if cargo audit --json \
              --ignore RUSTSEC-2021-0145 \
              --ignore RUSTSEC-2023-0033 \
              --ignore RUSTSEC-2024-0375 \
              --ignore RUSTSEC-2024-0388 \
              --ignore RUSTSEC-2024-0436 \
              > /tmp/reports/cargo-audit-report.json; then
              echo "cargo_audit_status=success" >> $GITHUB_OUTPUT
              echo "✅ No new vulnerabilities found by cargo audit"
            else
              echo "cargo_audit_status=failed" >> $GITHUB_OUTPUT
              echo "⚠️ Vulnerabilities found by cargo audit"
            fi
            
            cd ..
          else
            echo "cargo_audit_status=skipped" >> $GITHUB_OUTPUT
            echo "ℹ️ No Rust code found, skipping cargo audit"
          fi

      - name: Upload Rust reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rust-dependency-reports
          path: /tmp/reports/
          retention-days: 14

  # Vulnerability Analysis and Alerting
  vulnerability-analysis:
    runs-on: ubuntu-latest
    name: Vulnerability Analysis and Alerting
    needs: [python-dependency-monitoring, nodejs-dependency-monitoring, rust-dependency-monitoring]
    if: always()
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download vulnerability reports
        uses: actions/download-artifact@v4
        with:
          path: /tmp/vulnerability-reports/

      - name: Analyze vulnerability trends
        run: |
          echo "📈 Analyzing vulnerability trends..."

          # Create comprehensive vulnerability report
          cat > /tmp/vulnerability-analysis.json << EOF
          {
            "analysis_id": "${{ github.run_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "alert_level": "${{ env.ALERT_LEVEL }}",
            "scan_results": {
              "python": "${{ needs.python-dependency-monitoring.result }}",
              "nodejs": "${{ needs.nodejs-dependency-monitoring.result }}",
              "rust": "${{ needs.rust-dependency-monitoring.result }}"
            },
            "overall_status": "$([ "${{ needs.python-dependency-monitoring.result }}" = "success" ] && [ "${{ needs.nodejs-dependency-monitoring.result }}" = "success" ] && [ "${{ needs.rust-dependency-monitoring.result }}" = "success" ] && echo "clean" || echo "vulnerabilities_found")"
          }
          EOF

          echo "✅ Vulnerability analysis completed"

      - name: Create security issue for vulnerabilities
        if: needs.python-dependency-monitoring.result == 'failure' || needs.nodejs-dependency-monitoring.result == 'failure' || needs.rust-dependency-monitoring.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Security Alert: Dependency Vulnerabilities Detected (${new Date().toISOString().split('T')[0]})`;
            const body = `
            ## Security Vulnerability Alert

            **Alert Level:** ${{ env.ALERT_LEVEL }}
            **Scan Date:** ${new Date().toISOString()}
            **Commit:** ${{ github.sha }}

            ### Scan Results
            - **Python Dependencies:** ${{ needs.python-dependency-monitoring.result }}
            - **Node.js Dependencies:** ${{ needs.nodejs-dependency-monitoring.result }}
            - **Rust Dependencies:** ${{ needs.rust-dependency-monitoring.result }}

            ### Action Required
            1. Review the detailed vulnerability reports in the workflow artifacts
            2. Update affected dependencies to secure versions
            3. Test the updates in development environment
            4. Deploy fixes through the standard promotion pipeline

            ### Resources
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Security Policy](./SECURITY.md)
            - [Dependency Management Guide](./docs/DEPENDENCY_MANAGEMENT.md)

            **This issue was automatically created by the dependency monitoring workflow.**
            `;

            // Check if a similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies'
            });

            const today = new Date().toISOString().split('T')[0];
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Security Alert') && issue.title.includes(today)
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'dependencies', 'automated']
              });
            }

      - name: Upload vulnerability analysis
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-analysis-${{ github.run_id }}
          path: /tmp/vulnerability-analysis.json
          retention-days: 30

      - name: Vulnerability monitoring summary
        run: |
          echo "🔍 Dependency Vulnerability Monitoring Summary"
          echo "=============================================="  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
          echo "Scan Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Alert Level: ${{ env.ALERT_LEVEL }}"
          echo ""
          echo "Results:"
          echo "- Python Dependencies: ${{ needs.python-dependency-monitoring.result }}"
          echo "- Node.js Dependencies: ${{ needs.nodejs-dependency-monitoring.result }}"
          echo "- Rust Dependencies: ${{ needs.rust-dependency-monitoring.result }}"
          echo ""

          if [ "${{ needs.python-dependency-monitoring.result }}" = "failure" ] || [ "${{ needs.nodejs-dependency-monitoring.result }}" = "failure" ] || [ "${{ needs.rust-dependency-monitoring.result }}" = "failure" ]; then
            echo "⚠️ VULNERABILITIES DETECTED - Review and remediate immediately"
            echo "📋 Security issue created automatically"
          else
            echo "✅ No vulnerabilities detected at ${{ env.ALERT_LEVEL }} level"
          fi