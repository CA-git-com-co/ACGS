# Constitutional Hash: cdd01ef066bc6cf2
name: Legacy Security Scanning (Deprecated - Use unified-ci-modern.yml)

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Python Security Scanning
  python-security:
    runs-on: ubuntu-latest
    name: Python Security Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        timeout-minutes: 10
        run: |
          echo "Installing dependencies for security scanning..."
          # Create virtual environment first
          uv venv
          
          # Activate virtual environment
          source .venv/bin/activate
          
          # Verify virtual environment is active
          echo "Python path: $(which python)"
          echo "Virtual env: $VIRTUAL_ENV"
          
          # Install project dependencies with error handling
          if [ -f "config/environments/pyproject.toml" ]; then
            uv pip install -e . --index-strategy unsafe-best-match || {
              echo "Main install failed, trying config/environments/requirements.txt..."
              if [ -f "config/environments/requirements.txt" ]; then
                uv pip install -r config/environments/requirements.txt --index-strategy unsafe-best-match || echo "Requirements install failed"
              fi
            }
            # Install dev dependencies 
            uv pip install -e .[dev,test] --index-strategy unsafe-best-match || echo "Dev dependencies install failed"
          elif [ -f "config/environments/requirements.txt" ]; then
            uv pip install -r config/environments/requirements.txt --index-strategy unsafe-best-match || echo "Requirements install failed"
          fi
          
          # Install security tools
          timeout 300 uv pip install safety bandit pip-audit semgrep || echo "Security tools install completed with some failures"

      - name: Python Dependency Vulnerability Scan (Safety)
        timeout-minutes: 5
        run: |
          # Activate virtual environment
          if [ -d ".venv" ]; then
            source .venv/bin/activate
          fi
          
          echo "Running Safety scan..."
          uv run safety check --json --output safety-report.json || true
          uv run safety check || true

      - name: Python Dependency Audit (pip-audit)
        timeout-minutes: 5
        run: |
          # Activate virtual environment
          if [ -d ".venv" ]; then
            source .venv/bin/activate
          fi
          
          echo "Running pip-audit..."
          uv run pip-audit --format=json --output=pip-audit-report.json || true
          uv run pip-audit || true

      - name: Static Code Analysis (Bandit)
        timeout-minutes: 8
        run: |
          # Activate virtual environment
          if [ -d ".venv" ]; then
            source .venv/bin/activate
          fi
          
          echo "Running Bandit security analysis..."
          uv run bandit -r . -f json -o bandit-report.json -x tests/,node_modules/,.venv/ || true
          uv run bandit -r . -x tests/,node_modules/,.venv/ || true

      - name: Semgrep Security Scan
        run: |
          # Activate virtual environment
          if [ -d ".venv" ]; then
            source .venv/bin/activate
          fi
          
          echo "Running Semgrep security scan..."
          uv run semgrep --config=auto --json --output=semgrep-report.json . || true
          uv run semgrep --config=auto . || true

      - name: Upload Python Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json
            semgrep-report.json

  # JavaScript/Node.js Security Scanning
  nodejs-security:
    runs-on: ubuntu-latest
    name: Node.js Security Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd project
          npm ci

      - name: NPM Audit
        run: |
          cd project
          echo "Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate || true

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-report.json
          command: test

      - name: ESLint Security Rules
        run: |
          cd project
          echo "Running ESLint with security rules..."
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-security-report.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx || true

      - name: Upload Node.js Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-security-reports
          path: |
            project/npm-audit-report.json
            project/snyk-report.json
            project/eslint-security-report.json

  # Container Security Scanning
  container-security:
    runs-on: ubuntu-latest
    name: Container Security Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t acgs-security-test:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'acgs-security-test:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # Secret Scanning
  secret-scanning:
    runs-on: ubuntu-latest
    name: Secret Detection

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # License Compliance
  license-compliance:
    runs-on: ubuntu-latest
    name: License Compliance Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          # Create and activate virtual environment
          uv venv
          source .venv/bin/activate
          
          # Verify virtual environment is active
          echo "Python path: $(which python)"
          echo "Virtual env: $VIRTUAL_ENV"
          
          # Install project dependencies
          if [ -f "config/environments/pyproject.toml" ]; then
            uv pip install -e . --index-strategy unsafe-best-match || echo "Project install failed"
          elif [ -f "config/environments/requirements.txt" ]; then
            uv pip install -r config/environments/requirements.txt --index-strategy unsafe-best-match || echo "Requirements install failed"
          fi
          
          timeout 300 uv pip install pip-licenses || echo "pip-licenses install failed"

      - name: Check Python licenses
        run: |
          # Activate virtual environment
          if [ -d ".venv" ]; then
            source .venv/bin/activate
          fi
          
          echo "Checking Python package licenses..."
          uv run pip-licenses --format=json --output-file=python-licenses.json || echo "License check failed"
          uv run pip-licenses || echo "License display failed"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies
        run: |
          cd project
          npm ci

      - name: Check Node.js licenses
        run: |
          cd project
          echo "Checking Node.js package licenses..."
          npx license-checker --json --out ../nodejs-licenses.json
          npx license-checker

      - name: Upload License Reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            python-licenses.json
            nodejs-licenses.json

  # Security Summary Report
  security-summary:
    runs-on: ubuntu-latest
    name: Security Summary
    needs:
      [python-security, nodejs-security, container-security, secret-scanning, license-compliance]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Scan Results" >> security-summary.md
          echo "- Python Security: ${{ needs.python-security.result }}" >> security-summary.md
          echo "- Node.js Security: ${{ needs.nodejs-security.result }}" >> security-summary.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-summary.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-summary.md
          echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Recommendations" >> security-summary.md
          echo "1. Review all security reports in the artifacts" >> security-summary.md
          echo "2. Address any high or critical vulnerabilities immediately" >> security-summary.md
          echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "4. Ensure no secrets are committed to the repository" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
