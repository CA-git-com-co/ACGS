{
  "version": "1.128.1",
  "results": [
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/blockchain/run_tests.js",
      "start": {
        "line": 24,
        "col": 41,
        "offset": 701
      },
      "end": {
        "line": 24,
        "col": 45,
        "offset": 705
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_advanced_caching_strategy.js",
      "start": {
        "line": 104,
        "col": 21,
        "offset": 2418
      },
      "end": {
        "line": 104,
        "col": 54,
        "offset": 2451
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_advanced_caching_strategy.js",
      "start": {
        "line": 134,
        "col": 21,
        "offset": 3177
      },
      "end": {
        "line": 134,
        "col": 54,
        "offset": 3210
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_advanced_caching_strategy.js",
      "start": {
        "line": 151,
        "col": 21,
        "offset": 3606
      },
      "end": {
        "line": 151,
        "col": 57,
        "offset": 3642
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_advanced_caching_strategy.js",
      "start": {
        "line": 169,
        "col": 21,
        "offset": 4119
      },
      "end": {
        "line": 169,
        "col": 76,
        "offset": 4174
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/blockchain/test_database_performance_optimization.py",
      "start": {
        "line": 201,
        "col": 31,
        "offset": 7124
      },
      "end": {
        "line": 209,
        "col": 26,
        "offset": 7536
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT #!/usr/ FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT #!/usr/ FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/blockchain/test_database_performance_optimization.py",
      "start": {
        "line": 201,
        "col": 31,
        "offset": 7124
      },
      "end": {
        "line": 209,
        "col": 26,
        "offset": 7536
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/blockchain/test_database_performance_optimization.py",
      "start": {
        "line": 221,
        "col": 31,
        "offset": 7934
      },
      "end": {
        "line": 228,
        "col": 26,
        "offset": 8272
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT #!/usr/ FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT #!/usr/ FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/blockchain/test_database_performance_optimization.py",
      "start": {
        "line": 221,
        "col": 31,
        "offset": 7934
      },
      "end": {
        "line": 228,
        "col": 26,
        "offset": 8272
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_end_to_end_integration.js",
      "start": {
        "line": 46,
        "col": 9,
        "offset": 1513
      },
      "end": {
        "line": 46,
        "col": 43,
        "offset": 1547
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_end_to_end_integration.js",
      "start": {
        "line": 173,
        "col": 9,
        "offset": 6208
      },
      "end": {
        "line": 173,
        "col": 85,
        "offset": 6284
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "path": "services/blockchain/test_logging_program.js",
      "start": {
        "line": 175,
        "col": 19,
        "offset": 5966
      },
      "end": {
        "line": 175,
        "col": 90,
        "offset": 6037
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
        "metadata": {
          "cwe": [
            "CWE-134: Use of Externally-Controlled Format String"
          ],
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "LOW",
          "confidence": "LOW",
          "references": [
            "https://cwe.mitre.org/data/definitions/134.html"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Validation"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
          "shortlink": "https://sg.run/7Y5R"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/cli/cmd/tui.ts",
      "start": {
        "line": 24,
        "col": 47,
        "offset": 766
      },
      "end": {
        "line": 24,
        "col": 59,
        "offset": 778
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/edit.ts",
      "start": {
        "line": 45,
        "col": 33,
        "offset": 1491
      },
      "end": {
        "line": 45,
        "col": 48,
        "offset": 1506
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
      "path": "services/cli/opencode/src/tool/edit.ts",
      "start": {
        "line": 236,
        "col": 25,
        "offset": 7021
      },
      "end": {
        "line": 236,
        "col": 44,
        "offset": 7040
      },
      "extra": {
        "message": "RegExp() called with a `find` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
        "metadata": {
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "cwe": [
            "CWE-1333: Inefficient Regular Expression Complexity"
          ],
          "references": [
            "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
          ],
          "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js",
          "category": "security",
          "technology": [
            "javascript"
          ],
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Denial-of-Service (DoS)"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
          "shortlink": "https://sg.run/gr65"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/glob.ts",
      "start": {
        "line": 25,
        "col": 36,
        "offset": 916
      },
      "end": {
        "line": 25,
        "col": 42,
        "offset": 922
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/glob.ts",
      "start": {
        "line": 38,
        "col": 33,
        "offset": 1210
      },
      "end": {
        "line": 38,
        "col": 39,
        "offset": 1216
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/glob.ts",
      "start": {
        "line": 38,
        "col": 41,
        "offset": 1218
      },
      "end": {
        "line": 38,
        "col": 45,
        "offset": 1222
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/ls.ts",
      "start": {
        "line": 40,
        "col": 51,
        "offset": 832
      },
      "end": {
        "line": 40,
        "col": 69,
        "offset": 850
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/lsp-diagnostics.ts",
      "start": {
        "line": 18,
        "col": 33,
        "offset": 551
      },
      "end": {
        "line": 18,
        "col": 42,
        "offset": 560
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/lsp-hover.ts",
      "start": {
        "line": 20,
        "col": 33,
        "offset": 678
      },
      "end": {
        "line": 20,
        "col": 42,
        "offset": 687
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/patch.ts",
      "start": {
        "line": 244,
        "col": 47,
        "offset": 6541
      },
      "end": {
        "line": 244,
        "col": 54,
        "offset": 6548
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/patch.ts",
      "start": {
        "line": 267,
        "col": 47,
        "offset": 7280
      },
      "end": {
        "line": 267,
        "col": 54,
        "offset": 7287
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/patch.ts",
      "start": {
        "line": 285,
        "col": 47,
        "offset": 7820
      },
      "end": {
        "line": 285,
        "col": 54,
        "offset": 7827
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/patch.ts",
      "start": {
        "line": 313,
        "col": 49,
        "offset": 8670
      },
      "end": {
        "line": 313,
        "col": 56,
        "offset": 8677
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/patch.ts",
      "start": {
        "line": 324,
        "col": 49,
        "offset": 9047
      },
      "end": {
        "line": 324,
        "col": 56,
        "offset": 9054
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/patch.ts",
      "start": {
        "line": 338,
        "col": 47,
        "offset": 9420
      },
      "end": {
        "line": 338,
        "col": 54,
        "offset": 9427
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/read.ts",
      "start": {
        "line": 31,
        "col": 43,
        "offset": 897
      },
      "end": {
        "line": 31,
        "col": 51,
        "offset": 905
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/read.ts",
      "start": {
        "line": 46,
        "col": 35,
        "offset": 1359
      },
      "end": {
        "line": 46,
        "col": 38,
        "offset": 1362
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/read.ts",
      "start": {
        "line": 46,
        "col": 40,
        "offset": 1364
      },
      "end": {
        "line": 46,
        "col": 45,
        "offset": 1369
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "path": "services/cli/opencode/src/tool/write.ts",
      "start": {
        "line": 27,
        "col": 33,
        "offset": 819
      },
      "end": {
        "line": 27,
        "col": 48,
        "offset": 834
      },
      "extra": {
        "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
        "metadata": {
          "owasp": [
            "A05:2017 - Broken Access Control",
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          ],
          "category": "security",
          "references": [
            "https://owasp.org/www-community/attacks/Path_Traversal"
          ],
          "technology": [
            "javascript",
            "node.js"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Path Traversal"
          ],
          "source": "https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "shortlink": "https://sg.run/OPqk"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "trailofbits.go.iterate-over-empty-map.iterate-over-empty-map",
      "path": "services/cli/tui/internal/components/chat/message.go",
      "start": {
        "line": 329,
        "col": 2,
        "offset": 7673
      },
      "end": {
        "line": 340,
        "col": 3,
        "offset": 7995
      },
      "extra": {
        "message": "Iteration over a possibly empty map `toolArgsMap`. This is likely a bug or redundant code",
        "metadata": {
          "category": "security",
          "cwe": "CWE-665: Improper Initialization",
          "subcategory": [
            "audit"
          ],
          "confidence": "MEDIUM",
          "likelihood": "LOW",
          "impact": "LOW",
          "technology": [
            "--no-technology--"
          ],
          "description": "Probably redundant iteration over an empty map",
          "references": [
            "https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/"
          ],
          "license": "AGPL-3.0 license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/trailofbits.go.iterate-over-empty-map.iterate-over-empty-map",
          "shortlink": "https://sg.run/08jj"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "trailofbits.go.iterate-over-empty-map.iterate-over-empty-map",
      "path": "services/cli/tui/internal/components/chat/message.go",
      "start": {
        "line": 529,
        "col": 2,
        "offset": 13218
      },
      "end": {
        "line": 547,
        "col": 3,
        "offset": 13659
      },
      "extra": {
        "message": "Iteration over a possibly empty map `toolArgsMap`. This is likely a bug or redundant code",
        "metadata": {
          "category": "security",
          "cwe": "CWE-665: Improper Initialization",
          "subcategory": [
            "audit"
          ],
          "confidence": "MEDIUM",
          "likelihood": "LOW",
          "impact": "LOW",
          "technology": [
            "--no-technology--"
          ],
          "description": "Probably redundant iteration over an empty map",
          "references": [
            "https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/"
          ],
          "license": "AGPL-3.0 license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/trailofbits.go.iterate-over-empty-map.iterate-over-empty-map",
          "shortlink": "https://sg.run/08jj"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.dangerous-exec-command.dangerous-exec-command",
      "path": "services/cli/tui/internal/tui/tui.go",
      "start": {
        "line": 787,
        "col": 8,
        "offset": 21745
      },
      "end": {
        "line": 787,
        "col": 44,
        "offset": 21781
      },
      "extra": {
        "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.",
        "metadata": {
          "cwe": [
            "CWE-94: Improper Control of Generation of Code ('Code Injection')"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "cwe2022-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Code Injection"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command",
          "shortlink": "https://sg.run/W8lA"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name",
      "path": "services/cli/tui/sdk/internal/apijson/field.go",
      "start": {
        "line": 36,
        "col": 11,
        "offset": 944
      },
      "end": {
        "line": 36,
        "col": 33,
        "offset": 966
      },
      "extra": {
        "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.",
        "metadata": {
          "cwe": [
            "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name",
          "shortlink": "https://sg.run/R8Xv"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name",
      "path": "services/cli/tui/sdk/internal/apijson/port.go",
      "start": {
        "line": 61,
        "col": 25,
        "offset": 1636
      },
      "end": {
        "line": 61,
        "col": 50,
        "offset": 1661
      },
      "extra": {
        "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.",
        "metadata": {
          "cwe": [
            "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name",
          "shortlink": "https://sg.run/R8Xv"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name",
      "path": "services/cli/tui/sdk/internal/apijson/port.go",
      "start": {
        "line": 100,
        "col": 22,
        "offset": 2741
      },
      "end": {
        "line": 100,
        "col": 52,
        "offset": 2771
      },
      "extra": {
        "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.",
        "metadata": {
          "cwe": [
            "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')"
          ],
          "owasp": [
            "A03:2021 - Injection"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "LOW",
          "references": [
            "https://owasp.org/Top10/A03_2021-Injection"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name",
          "shortlink": "https://sg.run/R8Xv"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.crypto.math_random.math-random-used",
      "path": "services/cli/tui/sdk/internal/requestconfig/requestconfig.go",
      "start": {
        "line": 13,
        "col": 3,
        "offset": 220
      },
      "end": {
        "line": 13,
        "col": 12,
        "offset": 229
      },
      "extra": {
        "message": "Do not use `math/rand`. Use `crypto/rand` instead.",
        "fix": "crypto/rand",
        "metadata": {
          "cwe": [
            "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
          ],
          "owasp": [
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "MEDIUM",
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used",
          "shortlink": "https://sg.run/6nK6"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "dockerfile.security.missing-user.missing-user",
      "path": "services/core/agent-hitl/Dockerfile",
      "start": {
        "line": 19,
        "col": 1,
        "offset": 1206
      },
      "end": {
        "line": 19,
        "col": 31,
        "offset": 1236
      },
      "extra": {
        "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.",
        "fix": "USER non-root\nCMD [\"python\", \"/app/main.py\"]",
        "metadata": {
          "cwe": [
            "CWE-250: Execution with Unnecessary Privileges"
          ],
          "category": "security",
          "technology": [
            "dockerfile"
          ],
          "confidence": "MEDIUM",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
          "shortlink": "https://sg.run/Gbvn"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/code-analysis/code_analysis_service/main_simple.py",
      "start": {
        "line": 33,
        "col": 19,
        "offset": 747
      },
      "end": {
        "line": 33,
        "col": 24,
        "offset": 752
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 10,
        "col": 9,
        "offset": 196
      },
      "end": {
        "line": 10,
        "col": 50,
        "offset": 237
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 11,
        "col": 9,
        "offset": 246
      },
      "end": {
        "line": 11,
        "col": 59,
        "offset": 296
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 528
      },
      "end": {
        "line": 17,
        "col": 50,
        "offset": 569
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 18,
        "col": 9,
        "offset": 578
      },
      "end": {
        "line": 18,
        "col": 59,
        "offset": 628
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 24,
        "col": 9,
        "offset": 805
      },
      "end": {
        "line": 24,
        "col": 50,
        "offset": 846
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 25,
        "col": 9,
        "offset": 855
      },
      "end": {
        "line": 25,
        "col": 59,
        "offset": 905
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 31,
        "col": 9,
        "offset": 1111
      },
      "end": {
        "line": 31,
        "col": 50,
        "offset": 1152
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 32,
        "col": 9,
        "offset": 1161
      },
      "end": {
        "line": 32,
        "col": 59,
        "offset": 1211
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 38,
        "col": 9,
        "offset": 1415
      },
      "end": {
        "line": 38,
        "col": 50,
        "offset": 1456
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/auth-mock.conf",
      "start": {
        "line": 39,
        "col": 9,
        "offset": 1465
      },
      "end": {
        "line": 39,
        "col": 59,
        "offset": 1515
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 10,
        "col": 9,
        "offset": 199
      },
      "end": {
        "line": 10,
        "col": 50,
        "offset": 240
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 11,
        "col": 9,
        "offset": 249
      },
      "end": {
        "line": 11,
        "col": 59,
        "offset": 299
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 17,
        "col": 9,
        "offset": 536
      },
      "end": {
        "line": 17,
        "col": 50,
        "offset": 577
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 18,
        "col": 9,
        "offset": 586
      },
      "end": {
        "line": 18,
        "col": 59,
        "offset": 636
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 24,
        "col": 9,
        "offset": 838
      },
      "end": {
        "line": 24,
        "col": 50,
        "offset": 879
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 25,
        "col": 9,
        "offset": 888
      },
      "end": {
        "line": 25,
        "col": 59,
        "offset": 938
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 31,
        "col": 9,
        "offset": 1152
      },
      "end": {
        "line": 31,
        "col": 50,
        "offset": 1193
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 32,
        "col": 9,
        "offset": 1202
      },
      "end": {
        "line": 32,
        "col": 59,
        "offset": 1252
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 38,
        "col": 9,
        "offset": 1455
      },
      "end": {
        "line": 38,
        "col": 50,
        "offset": 1496
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "generic.nginx.security.header-redefinition.header-redefinition",
      "path": "services/core/code-analysis/config/context-mock.conf",
      "start": {
        "line": 39,
        "col": 9,
        "offset": 1505
      },
      "end": {
        "line": 39,
        "col": 59,
        "offset": 1555
      },
      "extra": {
        "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.",
        "metadata": {
          "cwe": [
            "CWE-16: CWE CATEGORY: Configuration"
          ],
          "references": [
            "https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md"
          ],
          "category": "security",
          "technology": [
            "nginx"
          ],
          "confidence": "LOW",
          "owasp": [
            "A06:2017 - Security Misconfiguration",
            "A05:2021 - Security Misconfiguration"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition",
          "shortlink": "https://sg.run/Lwl7"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 90,
        "col": 3,
        "offset": 2561
      },
      "end": {
        "line": 90,
        "col": 11,
        "offset": 2569
      },
      "extra": {
        "message": "Service 'postgres' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 90,
        "col": 3,
        "offset": 2561
      },
      "end": {
        "line": 90,
        "col": 11,
        "offset": 2569
      },
      "extra": {
        "message": "Service 'postgres' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 114,
        "col": 3,
        "offset": 3257
      },
      "end": {
        "line": 114,
        "col": 8,
        "offset": 3262
      },
      "extra": {
        "message": "Service 'redis' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 114,
        "col": 3,
        "offset": 3257
      },
      "end": {
        "line": 114,
        "col": 8,
        "offset": 3262
      },
      "extra": {
        "message": "Service 'redis' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 137,
        "col": 3,
        "offset": 3776
      },
      "end": {
        "line": 137,
        "col": 15,
        "offset": 3788
      },
      "extra": {
        "message": "Service 'auth-service' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 137,
        "col": 3,
        "offset": 3776
      },
      "end": {
        "line": 137,
        "col": 15,
        "offset": 3788
      },
      "extra": {
        "message": "Service 'auth-service' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 157,
        "col": 3,
        "offset": 4199
      },
      "end": {
        "line": 157,
        "col": 18,
        "offset": 4214
      },
      "extra": {
        "message": "Service 'context-service' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 157,
        "col": 3,
        "offset": 4199
      },
      "end": {
        "line": 157,
        "col": 18,
        "offset": 4214
      },
      "extra": {
        "message": "Service 'context-service' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 177,
        "col": 3,
        "offset": 4631
      },
      "end": {
        "line": 177,
        "col": 13,
        "offset": 4641
      },
      "extra": {
        "message": "Service 'prometheus' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 177,
        "col": 3,
        "offset": 4631
      },
      "end": {
        "line": 177,
        "col": 13,
        "offset": 4641
      },
      "extra": {
        "message": "Service 'prometheus' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 195,
        "col": 3,
        "offset": 5205
      },
      "end": {
        "line": 195,
        "col": 10,
        "offset": 5212
      },
      "extra": {
        "message": "Service 'grafana' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/core/code-analysis/docker-compose.yml",
      "start": {
        "line": 195,
        "col": 3,
        "offset": 5205
      },
      "end": {
        "line": 195,
        "col": 10,
        "offset": 5212
      },
      "extra": {
        "message": "Service 'grafana' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/constitutional-core/app/main.py",
      "start": {
        "line": 768,
        "col": 19,
        "offset": 27324
      },
      "end": {
        "line": 768,
        "col": 24,
        "offset": 27329
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/context/context_service/main.py",
      "start": {
        "line": 47,
        "col": 19,
        "offset": 1196
      },
      "end": {
        "line": 47,
        "col": 24,
        "offset": 1201
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/evolutionary-computation/main.py",
      "start": {
        "line": 1008,
        "col": 19,
        "offset": 35478
      },
      "end": {
        "line": 1008,
        "col": 24,
        "offset": 35483
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "path": "services/core/evolutionary-computation/main.py",
      "start": {
        "line": 1149,
        "col": 19,
        "offset": 39899
      },
      "end": {
        "line": 1159,
        "col": 14,
        "offset": 40313
      },
      "extra": {
        "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "shortlink": "https://sg.run/qx7y"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/evolutionary-computation/unified_main.py",
      "start": {
        "line": 81,
        "col": 19,
        "offset": 2296
      },
      "end": {
        "line": 81,
        "col": 24,
        "offset": 2301
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "path": "services/core/evolutionary-computation/unified_main.py",
      "start": {
        "line": 769,
        "col": 23,
        "offset": 27151
      },
      "end": {
        "line": 783,
        "col": 18,
        "offset": 27824
      },
      "extra": {
        "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "shortlink": "https://sg.run/qx7y"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "path": "services/core/evolutionary-computation/unified_main.py",
      "start": {
        "line": 814,
        "col": 23,
        "offset": 28923
      },
      "end": {
        "line": 828,
        "col": 18,
        "offset": 29597
      },
      "extra": {
        "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "shortlink": "https://sg.run/qx7y"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "path": "services/core/evolutionary-computation/unified_main.py",
      "start": {
        "line": 859,
        "col": 23,
        "offset": 30738
      },
      "end": {
        "line": 873,
        "col": 18,
        "offset": 31371
      },
      "extra": {
        "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "shortlink": "https://sg.run/qx7y"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "path": "services/core/evolutionary-computation/unified_main.py",
      "start": {
        "line": 1412,
        "col": 19,
        "offset": 51607
      },
      "end": {
        "line": 1423,
        "col": 14,
        "offset": 52130
      },
      "extra": {
        "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
          ],
          "category": "security",
          "technology": [
            "django"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "HIGH",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "shortlink": "https://sg.run/qx7y"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/core/formal-verification/app/services/z3_solver.py",
      "start": {
        "line": 109,
        "col": 30,
        "offset": 2866
      },
      "end": {
        "line": 109,
        "col": 55,
        "offset": 2891
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/core/formal-verification/app/services/z3_solver.py",
      "start": {
        "line": 135,
        "col": 31,
        "offset": 3848
      },
      "end": {
        "line": 135,
        "col": 51,
        "offset": 3868
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/formal-verification/fv_service/acge_formal_verification_service.py",
      "start": {
        "line": 496,
        "col": 19,
        "offset": 19081
      },
      "end": {
        "line": 496,
        "col": 24,
        "offset": 19086
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/formal-verification/simple_fv_main.py",
      "start": {
        "line": 37,
        "col": 19,
        "offset": 917
      },
      "end": {
        "line": 37,
        "col": 24,
        "offset": 922
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "dockerfile.security.missing-user.missing-user",
      "path": "services/core/governance-engine/Dockerfile",
      "start": {
        "line": 40,
        "col": 1,
        "offset": 886
      },
      "end": {
        "line": 40,
        "col": 103,
        "offset": 988
      },
      "extra": {
        "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.",
        "fix": "USER non-root\nCMD [\"uvicorn\", \"services.core.governance-engine.app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8004\"]",
        "metadata": {
          "cwe": [
            "CWE-250: Execution with Unnecessary Privileges"
          ],
          "category": "security",
          "technology": [
            "dockerfile"
          ],
          "confidence": "MEDIUM",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
          "shortlink": "https://sg.run/Gbvn"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/core/governance-synthesis/gs_service/app/services/advanced_cache.py",
      "start": {
        "line": 329,
        "col": 25,
        "offset": 10401
      },
      "end": {
        "line": 329,
        "col": 43,
        "offset": 10419
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/core/governance-synthesis/gs_service/app/services/advanced_cache.py",
      "start": {
        "line": 356,
        "col": 24,
        "offset": 11218
      },
      "end": {
        "line": 356,
        "col": 43,
        "offset": 11237
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
      "start": {
        "line": 610,
        "col": 17,
        "offset": 21000
      },
      "end": {
        "line": 619,
        "col": 18,
        "offset": 21373
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
      "start": {
        "line": 653,
        "col": 17,
        "offset": 22420
      },
      "end": {
        "line": 661,
        "col": 18,
        "offset": 22773
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/governance-synthesis/gs_service/main.py",
      "start": {
        "line": 38,
        "col": 19,
        "offset": 938
      },
      "end": {
        "line": 38,
        "col": 24,
        "offset": 943
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.kubernetes.security.run-as-non-root.run-as-non-root",
      "path": "services/core/policy-governance/pgc_service/k8s/service-mesh.yaml",
      "start": {
        "line": 46,
        "col": 5,
        "offset": 841
      },
      "end": {
        "line": 46,
        "col": 9,
        "offset": 845
      },
      "extra": {
        "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.",
        "fix": "spec:\n      securityContext:\n        runAsNonRoot: true #",
        "metadata": {
          "references": [
            "https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/",
            "https://kubernetes.io/docs/concepts/policy/pod-security-policy/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user"
          ],
          "category": "security",
          "cwe": [
            "CWE-250: Execution with Unnecessary Privileges"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "technology": [
            "kubernetes"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root",
          "shortlink": "https://sg.run/dgP5"
        },
        "severity": "INFO",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext",
      "path": "services/core/policy-governance/pgc_service/k8s/service-mesh.yaml",
      "start": {
        "line": 48,
        "col": 11,
        "offset": 875
      },
      "end": {
        "line": 48,
        "col": 15,
        "offset": 879
      },
      "extra": {
        "message": "In Kubernetes, each pod runs in its own isolated environment with its own set of security policies. However, certain container images may contain `setuid` or `setgid` binaries that could allow an attacker to perform privilege escalation and gain access to sensitive resources. To mitigate this risk, it's recommended to add a `securityContext` to the container in the pod, with the parameter `allowPrivilegeEscalation` set to `false`. This will prevent the container from running any privileged processes and limit the impact of any potential attacks. By adding a `securityContext` to your Kubernetes pod, you can help to ensure that your containerized applications are more secure and less vulnerable to privilege escalation attacks.",
        "fix": "securityContext:\n            allowPrivilegeEscalation: false\n          name",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation",
            "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "kubernetes"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext",
          "shortlink": "https://sg.run/eleR"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/policy-governance/pgc_service/main.py",
      "start": {
        "line": 40,
        "col": 19,
        "offset": 973
      },
      "end": {
        "line": 40,
        "col": 24,
        "offset": 978
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "dockerfile.security.missing-user.missing-user",
      "path": "services/core/policy-governance/qpe_service/Dockerfile",
      "start": {
        "line": 47,
        "col": 1,
        "offset": 973
      },
      "end": {
        "line": 47,
        "col": 22,
        "offset": 994
      },
      "extra": {
        "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.",
        "fix": "USER non-root\nCMD [\"./qpe_service\"]",
        "metadata": {
          "cwe": [
            "CWE-250: Execution with Unnecessary Privileges"
          ],
          "category": "security",
          "technology": [
            "dockerfile"
          ],
          "confidence": "MEDIUM",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
          "shortlink": "https://sg.run/Gbvn"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.lang.security.audit.net.use-tls.use-tls",
      "path": "services/core/policy-governance/qpe_service/main.go",
      "start": {
        "line": 661,
        "col": 13,
        "offset": 19813
      },
      "end": {
        "line": 661,
        "col": 46,
        "offset": 19846
      },
      "extra": {
        "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.",
        "fix": "http.ListenAndServeTLS(\":8013\", certFile, keyFile, nil)",
        "metadata": {
          "cwe": [
            "CWE-319: Cleartext Transmission of Sensitive Information"
          ],
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://golang.org/pkg/net/http/#ListenAndServeTLS"
          ],
          "category": "security",
          "technology": [
            "go"
          ],
          "confidence": "MEDIUM",
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Mishandled Sensitive Information"
          ],
          "source": "https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls",
          "shortlink": "https://sg.run/dKbY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection",
      "path": "services/core/policy-governance/qpe_service/main.go",
      "start": {
        "line": 675,
        "col": 16,
        "offset": 20060
      },
      "end": {
        "line": 675,
        "col": 32,
        "offset": 20076
      },
      "extra": {
        "message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.",
        "metadata": {
          "cwe": [
            "CWE-300: Channel Accessible by Non-Endpoint"
          ],
          "references": [
            "https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption"
          ],
          "category": "security",
          "technology": [
            "grpc"
          ],
          "confidence": "HIGH",
          "owasp": [
            "A07:2021 - Identification and Authentication Failures"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Other"
          ],
          "source": "https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection",
          "shortlink": "https://sg.run/5Q5l"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/policy-governance/simple_pgc_main.py",
      "start": {
        "line": 37,
        "col": 19,
        "offset": 900
      },
      "end": {
        "line": 37,
        "col": 24,
        "offset": 905
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/core/xai-integration/xai_service/app/main.py",
      "start": {
        "line": 269,
        "col": 19,
        "offset": 9977
      },
      "end": {
        "line": 269,
        "col": 24,
        "offset": 9982
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/examples/context_engineering/patterns/constitutional_service_pattern.py",
      "start": {
        "line": 500,
        "col": 23,
        "offset": 18778
      },
      "end": {
        "line": 500,
        "col": 28,
        "offset": 18783
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/api_gateway/gateway_service/app/simple_main.py",
      "start": {
        "line": 105,
        "col": 19,
        "offset": 3490
      },
      "end": {
        "line": 105,
        "col": 24,
        "offset": 3495
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "dockerfile.security.missing-user.missing-user",
      "path": "services/platform_services/audit_aggregator/Dockerfile",
      "start": {
        "line": 39,
        "col": 1,
        "offset": 916
      },
      "end": {
        "line": 39,
        "col": 83,
        "offset": 998
      },
      "extra": {
        "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.",
        "fix": "USER non-root\nCMD [\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8015\"]",
        "metadata": {
          "cwe": [
            "CWE-250: Execution with Unnecessary Privileges"
          ],
          "category": "security",
          "technology": [
            "dockerfile"
          ],
          "confidence": "MEDIUM",
          "owasp": [
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://owasp.org/Top10/A04_2021-Insecure_Design"
          ],
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
          "shortlink": "https://sg.run/Gbvn"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
      "path": "services/platform_services/authentication/auth_service/acge_integration.py",
      "start": {
        "line": 240,
        "col": 42,
        "offset": 8606
      },
      "end": {
        "line": 240,
        "col": 47,
        "offset": 8611
      },
      "extra": {
        "message": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.",
        "fix": "True",
        "metadata": {
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A07:2021 - Identification and Authentication Failures"
          ],
          "cwe": [
            "CWE-287: Improper Authentication"
          ],
          "references": [
            "https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"
          ],
          "category": "security",
          "technology": [
            "jwt"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "MEDIUM",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authentication"
          ],
          "source": "https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode",
          "shortlink": "https://sg.run/6nyB"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/authentication/auth_service/app/main_acge.py",
      "start": {
        "line": 129,
        "col": 19,
        "offset": 4070
      },
      "end": {
        "line": 129,
        "col": 24,
        "offset": 4075
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/authentication/auth_service/simple_main.py",
      "start": {
        "line": 42,
        "col": 19,
        "offset": 1207
      },
      "end": {
        "line": 42,
        "col": 24,
        "offset": 1212
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/blackboard/simple_blackboard_main.py",
      "start": {
        "line": 48,
        "col": 19,
        "offset": 1191
      },
      "end": {
        "line": 48,
        "col": 24,
        "offset": 1196
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/coordinator/simple_coordinator_main.py",
      "start": {
        "line": 62,
        "col": 19,
        "offset": 1663
      },
      "end": {
        "line": 62,
        "col": 24,
        "offset": 1668
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/formal_verification/service.py",
      "start": {
        "line": 39,
        "col": 19,
        "offset": 1079
      },
      "end": {
        "line": 39,
        "col": 24,
        "offset": 1084
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/integrity/integrity_service/acge_integrity_service.py",
      "start": {
        "line": 390,
        "col": 19,
        "offset": 14036
      },
      "end": {
        "line": 390,
        "col": 24,
        "offset": 14041
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/platform_services/integrity/integrity_service/init_db.py",
      "start": {
        "line": 46,
        "col": 19,
        "offset": 1197
      },
      "end": {
        "line": 46,
        "col": 61,
        "offset": 1239
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/platform_services/integrity/integrity_service/init_db.py",
      "start": {
        "line": 46,
        "col": 19,
        "offset": 1197
      },
      "end": {
        "line": 46,
        "col": 61,
        "offset": 1239
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT #!/usr/ FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT #!/usr/ FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/platform_services/integrity/integrity_service/init_db.py",
      "start": {
        "line": 46,
        "col": 19,
        "offset": 1197
      },
      "end": {
        "line": 46,
        "col": 61,
        "offset": 1239
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/platform_services/integrity/integrity_service/init_db.py",
      "start": {
        "line": 46,
        "col": 19,
        "offset": 1197
      },
      "end": {
        "line": 46,
        "col": 61,
        "offset": 1239
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.fastapi.security.wildcard-cors.wildcard-cors",
      "path": "services/platform_services/integrity/simple_integrity_main.py",
      "start": {
        "line": 36,
        "col": 19,
        "offset": 873
      },
      "end": {
        "line": 36,
        "col": 24,
        "offset": 878
      },
      "extra": {
        "message": "CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.",
        "metadata": {
          "cwe": [
            "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration"
          ],
          "category": "security",
          "technology": [
            "python",
            "fastapi"
          ],
          "references": [
            "https://owasp.org/Top10/A05_2021-Security_Misconfiguration",
            "https://cwe.mitre.org/data/definitions/942.html"
          ],
          "likelihood": "HIGH",
          "impact": "LOW",
          "confidence": "MEDIUM",
          "vulnerability_class": [
            "Configuration"
          ],
          "subcategory": [
            "vuln"
          ],
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "source": "https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors",
          "shortlink": "https://sg.run/KxApY"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 438,
        "col": 5,
        "offset": 17738
      },
      "end": {
        "line": 459,
        "col": 6,
        "offset": 18361
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 438,
        "col": 5,
        "offset": 17738
      },
      "end": {
        "line": 459,
        "col": 6,
        "offset": 18361
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 462,
        "col": 5,
        "offset": 18425
      },
      "end": {
        "line": 484,
        "col": 6,
        "offset": 19118
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 462,
        "col": 5,
        "offset": 18425
      },
      "end": {
        "line": 484,
        "col": 6,
        "offset": 19118
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 503,
        "col": 5,
        "offset": 19800
      },
      "end": {
        "line": 515,
        "col": 6,
        "offset": 20252
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 503,
        "col": 5,
        "offset": 19800
      },
      "end": {
        "line": 515,
        "col": 6,
        "offset": 20252
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 557,
        "col": 9,
        "offset": 21338
      },
      "end": {
        "line": 564,
        "col": 10,
        "offset": 21580
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 557,
        "col": 9,
        "offset": 21338
      },
      "end": {
        "line": 564,
        "col": 10,
        "offset": 21580
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 578,
        "col": 9,
        "offset": 21837
      },
      "end": {
        "line": 580,
        "col": 10,
        "offset": 21941
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "start": {
        "line": 578,
        "col": 9,
        "offset": 21837
      },
      "end": {
        "line": 580,
        "col": 10,
        "offset": 21941
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 158,
        "col": 5,
        "offset": 5957
      },
      "end": {
        "line": 235,
        "col": 6,
        "offset": 9492
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 323,
        "col": 5,
        "offset": 13065
      },
      "end": {
        "line": 371,
        "col": 6,
        "offset": 15210
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 323,
        "col": 5,
        "offset": 13065
      },
      "end": {
        "line": 371,
        "col": 6,
        "offset": 15210
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 381,
        "col": 9,
        "offset": 15462
      },
      "end": {
        "line": 389,
        "col": 10,
        "offset": 15821
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 381,
        "col": 9,
        "offset": 15462
      },
      "end": {
        "line": 389,
        "col": 10,
        "offset": 15821
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 446,
        "col": 5,
        "offset": 18152
      },
      "end": {
        "line": 468,
        "col": 6,
        "offset": 18952
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 446,
        "col": 5,
        "offset": 18152
      },
      "end": {
        "line": 468,
        "col": 6,
        "offset": 18952
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 482,
        "col": 9,
        "offset": 19217
      },
      "end": {
        "line": 484,
        "col": 10,
        "offset": 19326
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/002_enhance_rls_security.py",
      "start": {
        "line": 482,
        "col": 9,
        "offset": 19217
      },
      "end": {
        "line": 484,
        "col": 10,
        "offset": 19326
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 90,
        "col": 5,
        "offset": 3067
      },
      "end": {
        "line": 142,
        "col": 6,
        "offset": 5335
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 90,
        "col": 5,
        "offset": 3067
      },
      "end": {
        "line": 142,
        "col": 6,
        "offset": 5335
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 145,
        "col": 5,
        "offset": 5416
      },
      "end": {
        "line": 176,
        "col": 6,
        "offset": 6791
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 145,
        "col": 5,
        "offset": 5416
      },
      "end": {
        "line": 176,
        "col": 6,
        "offset": 6791
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 188,
        "col": 9,
        "offset": 7087
      },
      "end": {
        "line": 190,
        "col": 10,
        "offset": 7191
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 188,
        "col": 9,
        "offset": 7087
      },
      "end": {
        "line": 190,
        "col": 10,
        "offset": 7191
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 191,
        "col": 9,
        "offset": 7200
      },
      "end": {
        "line": 191,
        "col": 85,
        "offset": 7276
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 191,
        "col": 9,
        "offset": 7200
      },
      "end": {
        "line": 191,
        "col": 85,
        "offset": 7276
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 194,
        "col": 9,
        "offset": 7321
      },
      "end": {
        "line": 204,
        "col": 10,
        "offset": 7714
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 194,
        "col": 9,
        "offset": 7321
      },
      "end": {
        "line": 204,
        "col": 10,
        "offset": 7714
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 213,
        "col": 9,
        "offset": 7935
      },
      "end": {
        "line": 222,
        "col": 10,
        "offset": 8372
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 213,
        "col": 9,
        "offset": 7935
      },
      "end": {
        "line": 222,
        "col": 10,
        "offset": 8372
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 313,
        "col": 9,
        "offset": 11730
      },
      "end": {
        "line": 315,
        "col": 10,
        "offset": 11835
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 313,
        "col": 9,
        "offset": 11730
      },
      "end": {
        "line": 315,
        "col": 10,
        "offset": 11835
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 325,
        "col": 9,
        "offset": 12049
      },
      "end": {
        "line": 325,
        "col": 82,
        "offset": 12122
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "start": {
        "line": 325,
        "col": 9,
        "offset": 12049
      },
      "end": {
        "line": 325,
        "col": 82,
        "offset": 12122
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/database/database_performance_optimizer.py",
      "start": {
        "line": 158,
        "col": 15,
        "offset": 5626
      },
      "end": {
        "line": 158,
        "col": 104,
        "offset": 5715
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/database/database_performance_optimizer.py",
      "start": {
        "line": 158,
        "col": 15,
        "offset": 5626
      },
      "end": {
        "line": 158,
        "col": 104,
        "offset": 5715
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/shared/database/optimized_connection_pool.py",
      "start": {
        "line": 146,
        "col": 19,
        "offset": 5195
      },
      "end": {
        "line": 149,
        "col": 14,
        "offset": 5325
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT \"\"\"\nOpt FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT \"\"\"\nOpt FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
      "path": "services/shared/database/optimized_connection_pool.py",
      "start": {
        "line": 146,
        "col": 19,
        "offset": 5195
      },
      "end": {
        "line": 149,
        "col": 14,
        "offset": 5325
      },
      "extra": {
        "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'",
        "metadata": {
          "references": [
            "https://github.com/MagicStack/asyncpg",
            "https://magicstack.github.io/asyncpg/current/"
          ],
          "category": "security",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "technology": [
            "asyncpg"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli",
          "shortlink": "https://sg.run/0nBB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/database/postgresql_query_optimizer.py",
      "start": {
        "line": 202,
        "col": 31,
        "offset": 7183
      },
      "end": {
        "line": 202,
        "col": 87,
        "offset": 7239
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/database/postgresql_query_optimizer.py",
      "start": {
        "line": 202,
        "col": 31,
        "offset": 7183
      },
      "end": {
        "line": 202,
        "col": 87,
        "offset": 7239
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/database/postgresql_query_optimizer.py",
      "start": {
        "line": 230,
        "col": 31,
        "offset": 8564
      },
      "end": {
        "line": 230,
        "col": 87,
        "offset": 8620
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/database/postgresql_query_optimizer.py",
      "start": {
        "line": 230,
        "col": 31,
        "offset": 8564
      },
      "end": {
        "line": 230,
        "col": 87,
        "offset": 8620
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 257,
        "col": 13,
        "offset": 8152
      },
      "end": {
        "line": 257,
        "col": 72,
        "offset": 8211
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 262,
        "col": 13,
        "offset": 8301
      },
      "end": {
        "line": 268,
        "col": 14,
        "offset": 8477
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 282,
        "col": 9,
        "offset": 8824
      },
      "end": {
        "line": 317,
        "col": 10,
        "offset": 10340
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 347,
        "col": 17,
        "offset": 11211
      },
      "end": {
        "line": 347,
        "col": 72,
        "offset": 11266
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 350,
        "col": 21,
        "offset": 11372
      },
      "end": {
        "line": 352,
        "col": 14,
        "offset": 11490
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 359,
        "col": 17,
        "offset": 11704
      },
      "end": {
        "line": 359,
        "col": 87,
        "offset": 11774
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 378,
        "col": 17,
        "offset": 12513
      },
      "end": {
        "line": 380,
        "col": 10,
        "offset": 12624
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 392,
        "col": 17,
        "offset": 13081
      },
      "end": {
        "line": 394,
        "col": 10,
        "offset": 13183
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database/simplified_rls.py",
      "start": {
        "line": 402,
        "col": 17,
        "offset": 13410
      },
      "end": {
        "line": 402,
        "col": 85,
        "offset": 13478
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/database_optimizer.py",
      "start": {
        "line": 456,
        "col": 44,
        "offset": 18395
      },
      "end": {
        "line": 456,
        "col": 75,
        "offset": 18426
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/infrastructure/repositories.py",
      "start": {
        "line": 315,
        "col": 19,
        "offset": 9381
      },
      "end": {
        "line": 315,
        "col": 47,
        "offset": 9409
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/infrastructure/repositories.py",
      "start": {
        "line": 327,
        "col": 28,
        "offset": 9740
      },
      "end": {
        "line": 329,
        "col": 14,
        "offset": 9846
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/shared/performance/caching.py",
      "start": {
        "line": 324,
        "col": 21,
        "offset": 10147
      },
      "end": {
        "line": 324,
        "col": 39,
        "offset": 10165
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/shared/performance/caching.py",
      "start": {
        "line": 354,
        "col": 20,
        "offset": 11148
      },
      "end": {
        "line": 354,
        "col": 39,
        "offset": 11167
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "path": "services/shared/performance/connection_pool.py",
      "start": {
        "line": 183,
        "col": 23,
        "offset": 5963
      },
      "end": {
        "line": 183,
        "col": 81,
        "offset": 6021
      },
      "extra": {
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "shortlink": "https://sg.run/EkWw"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/performance/connection_pool.py",
      "start": {
        "line": 183,
        "col": 23,
        "offset": 5963
      },
      "end": {
        "line": 183,
        "col": 81,
        "offset": 6021
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "path": "services/shared/performance/connection_pool.py",
      "start": {
        "line": 190,
        "col": 27,
        "offset": 6255
      },
      "end": {
        "line": 190,
        "col": 69,
        "offset": 6297
      },
      "extra": {
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "shortlink": "https://sg.run/2b1L"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
      "path": "services/shared/security/enhanced_encryption.py",
      "start": {
        "line": 152,
        "col": 9,
        "offset": 4016
      },
      "end": {
        "line": 152,
        "col": 38,
        "offset": 4045
      },
      "extra": {
        "message": "These permissions `0o700` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.",
        "metadata": {
          "category": "security",
          "owasp": [
            "A01:2021 - Broken Access Control"
          ],
          "cwe": [
            "CWE-276: Incorrect Default Permissions"
          ],
          "technology": [
            "python"
          ],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "MEDIUM",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions",
          "shortlink": "https://sg.run/AXY4"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 3,
        "col": 3,
        "offset": 27
      },
      "end": {
        "line": 3,
        "col": 12,
        "offset": 36
      },
      "extra": {
        "message": "Service 'zookeeper' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 3,
        "col": 3,
        "offset": 27
      },
      "end": {
        "line": 3,
        "col": 12,
        "offset": 36
      },
      "extra": {
        "message": "Service 'zookeeper' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 28,
        "col": 3,
        "offset": 608
      },
      "end": {
        "line": 28,
        "col": 10,
        "offset": 615
      },
      "extra": {
        "message": "Service 'kafka-1' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 28,
        "col": 3,
        "offset": 608
      },
      "end": {
        "line": 28,
        "col": 10,
        "offset": 615
      },
      "extra": {
        "message": "Service 'kafka-1' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 77,
        "col": 3,
        "offset": 2208
      },
      "end": {
        "line": 77,
        "col": 10,
        "offset": 2215
      },
      "extra": {
        "message": "Service 'kafka-2' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 77,
        "col": 3,
        "offset": 2208
      },
      "end": {
        "line": 77,
        "col": 10,
        "offset": 2215
      },
      "extra": {
        "message": "Service 'kafka-2' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 126,
        "col": 3,
        "offset": 3808
      },
      "end": {
        "line": 126,
        "col": 10,
        "offset": 3815
      },
      "extra": {
        "message": "Service 'kafka-3' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 126,
        "col": 3,
        "offset": 3808
      },
      "end": {
        "line": 126,
        "col": 10,
        "offset": 3815
      },
      "extra": {
        "message": "Service 'kafka-3' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 175,
        "col": 3,
        "offset": 5408
      },
      "end": {
        "line": 175,
        "col": 18,
        "offset": 5423
      },
      "extra": {
        "message": "Service 'schema-registry' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 175,
        "col": 3,
        "offset": 5408
      },
      "end": {
        "line": 175,
        "col": 18,
        "offset": 5423
      },
      "extra": {
        "message": "Service 'schema-registry' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 205,
        "col": 3,
        "offset": 6237
      },
      "end": {
        "line": 205,
        "col": 16,
        "offset": 6250
      },
      "extra": {
        "message": "Service 'kafka-connect' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 205,
        "col": 3,
        "offset": 6237
      },
      "end": {
        "line": 205,
        "col": 16,
        "offset": 6250
      },
      "extra": {
        "message": "Service 'kafka-connect' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 251,
        "col": 3,
        "offset": 7916
      },
      "end": {
        "line": 251,
        "col": 11,
        "offset": 7924
      },
      "extra": {
        "message": "Service 'kafka-ui' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 251,
        "col": 3,
        "offset": 7916
      },
      "end": {
        "line": 251,
        "col": 11,
        "offset": 7924
      },
      "extra": {
        "message": "Service 'kafka-ui' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 275,
        "col": 3,
        "offset": 8719
      },
      "end": {
        "line": 275,
        "col": 7,
        "offset": 8723
      },
      "extra": {
        "message": "Service 'nats' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 275,
        "col": 3,
        "offset": 8719
      },
      "end": {
        "line": 275,
        "col": 7,
        "offset": 8723
      },
      "extra": {
        "message": "Service 'nats' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 311,
        "col": 3,
        "offset": 9381
      },
      "end": {
        "line": 311,
        "col": 14,
        "offset": 9392
      },
      "extra": {
        "message": "Service 'jmx-kafka-1' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 311,
        "col": 3,
        "offset": 9381
      },
      "end": {
        "line": 311,
        "col": 14,
        "offset": 9392
      },
      "extra": {
        "message": "Service 'jmx-kafka-1' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 347,
        "col": 3,
        "offset": 10222
      },
      "end": {
        "line": 347,
        "col": 13,
        "offset": 10232
      },
      "extra": {
        "message": "Service 'kafka-init' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/",
            "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges",
          "shortlink": "https://sg.run/0n8q"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
      "path": "services/shared/streaming/docker-compose.kafka.yml",
      "start": {
        "line": 347,
        "col": 3,
        "offset": 10222
      },
      "end": {
        "line": 347,
        "col": 13,
        "offset": 10232
      },
      "extra": {
        "message": "Service 'kafka-init' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.",
        "metadata": {
          "cwe": [
            "CWE-732: Incorrect Permission Assignment for Critical Resource"
          ],
          "owasp": [
            "A05:2021 - Security Misconfiguration",
            "A06:2017 - Security Misconfiguration"
          ],
          "references": [
            "https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir",
            "https://blog.atomist.com/security-of-docker-kubernetes/",
            "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"
          ],
          "category": "security",
          "technology": [
            "docker-compose"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "HIGH",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Improper Authorization"
          ],
          "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service",
          "shortlink": "https://sg.run/e4JE"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "path": "services/shared/streaming/kafka_integration.py",
      "start": {
        "line": 663,
        "col": 30,
        "offset": 23272
      },
      "end": {
        "line": 663,
        "col": 45,
        "offset": 23287
      },
      "extra": {
        "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
        "metadata": {
          "owasp": [
            "A08:2017 - Insecure Deserialization",
            "A08:2021 - Software and Data Integrity Failures"
          ],
          "cwe": [
            "CWE-502: Deserialization of Untrusted Data"
          ],
          "references": [
            "https://docs.python.org/3/library/pickle.html"
          ],
          "category": "security",
          "technology": [
            "python"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "MEDIUM",
          "confidence": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Insecure Deserialization "
          ],
          "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
          "shortlink": "https://sg.run/OPwB"
        },
        "severity": "WARNING",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
      "path": "services/shared/testing/constitutional_test_case.py",
      "start": {
        "line": 249,
        "col": 16,
        "offset": 9216
      },
      "end": {
        "line": 249,
        "col": 69,
        "offset": 9269
      },
      "extra": {
        "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)",
        "metadata": {
          "cwe": [
            "CWE-522: Insufficiently Protected Credentials"
          ],
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
          ],
          "category": "security",
          "technology": [
            "jwt"
          ],
          "cwe2021-top25": true,
          "subcategory": [
            "vuln"
          ],
          "likelihood": "HIGH",
          "impact": "MEDIUM",
          "confidence": "HIGH",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "Cryptographic Issues"
          ],
          "source": "https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
          "shortlink": "https://sg.run/l2E9"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/testing/multi_tenant_test_validator.py",
      "start": {
        "line": 480,
        "col": 17,
        "offset": 16624
      },
      "end": {
        "line": 482,
        "col": 18,
        "offset": 16743
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    },
    {
      "check_id": "python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
      "path": "services/shared/testing/multi_tenant_test_validator.py",
      "start": {
        "line": 494,
        "col": 17,
        "offset": 17148
      },
      "end": {
        "line": 496,
        "col": 18,
        "offset": 17267
      },
      "extra": {
        "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as `or_()`, `and_()`, etc.) to construct SQL.",
        "metadata": {
          "owasp": [
            "A01:2017 - Injection",
            "A03:2021 - Injection"
          ],
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "category": "security",
          "technology": [
            "sqlalchemy"
          ],
          "confidence": "MEDIUM",
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"
          ],
          "cwe2022-top25": true,
          "cwe2021-top25": true,
          "subcategory": [
            "audit"
          ],
          "likelihood": "LOW",
          "impact": "LOW",
          "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
          "vulnerability_class": [
            "SQL Injection"
          ],
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text",
          "shortlink": "https://sg.run/yP1O"
        },
        "severity": "ERROR",
        "fingerprint": "requires login",
        "lines": "requires login",
        "validation_state": "NO_VALIDATOR",
        "engine_kind": "OSS"
      }
    }
  ],
  "errors": [
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
            "start": {
              "line": 3,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 4,
              "col": 25,
              "offset": 87
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
            "start": {
              "line": 6,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 6,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
            "start": {
              "line": 8,
              "col": 28,
              "offset": 0
            },
            "end": {
              "line": 9,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/wina/__init__.py:3:\n `from .core import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
          "start": {
            "line": 3,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 4,
            "col": 25,
            "offset": 87
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
          "start": {
            "line": 6,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 6,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
          "start": {
            "line": 8,
            "col": 28,
            "offset": 0
          },
          "end": {
            "line": 9,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/authentication/app/cache_manager.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 17,
              "offset": 185
            }
          },
          {
            "path": "services/platform_services/authentication/app/cache_manager.py",
            "start": {
              "line": 21,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/authentication/app/cache_manager.py",
            "start": {
              "line": 23,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/authentication/app/cache_manager.py:15:\n `from services.shared.advanced_redis_client import (  # Constitutional compliance hash for ACGS\n    CACHE_TTL_POLICIES,\n    CONSTITUTIONAL_HASH,\n    AdvancedRedisClient,\n    CacheConfig,` was unexpected",
      "path": "services/platform_services/authentication/app/cache_manager.py",
      "spans": [
        {
          "file": "services/platform_services/authentication/app/cache_manager.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 17,
            "offset": 185
          }
        },
        {
          "file": "services/platform_services/authentication/app/cache_manager.py",
          "start": {
            "line": 21,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/authentication/app/cache_manager.py",
          "start": {
            "line": 23,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/worker_agents/ethics/analyzers.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 23,
              "offset": 159
            }
          },
          {
            "path": "services/core/worker_agents/ethics/analyzers.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/worker_agents/ethics/analyzers.py:12:\n `from .models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    EthicalAnalysisResult,\n    HarmAssessment,\n    StakeholderImpact,` was unexpected",
      "path": "services/core/worker_agents/ethics/analyzers.py",
      "spans": [
        {
          "file": "services/core/worker_agents/ethics/analyzers.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 23,
            "offset": 159
          }
        },
        {
          "file": "services/core/worker_agents/ethics/analyzers.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 25,
              "offset": 187
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py",
            "start": {
              "line": 22,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py:13:\n `from fastapi import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    APIRouter,\n    Depends,\n    HTTPException,\n    Query,\n    WebSocket,\n    WebSocketDisconnect,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 25,
            "offset": 187
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py",
          "start": {
            "line": 22,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/stakeholder_engagement.py",
            "start": {
              "line": 327,
              "col": 9,
              "offset": 0
            },
            "end": {
              "line": 375,
              "col": 27,
              "offset": 1598
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/stakeholder_engagement.py:327:\n `\n        await websocket.accept()\n\n        # Create engagement service (simplified for WebSocket)\n        from services.shared.database import get_async_db\n\n# Security validation imports\nfrom services.shared.security_validation import (\n    validate_governance_input,\n    validate_policy_input,\n    validate_user_input,\n)\n\n        async for db in get_async_db():\n            config = ConstitutionalCouncilConfig()\n            engagement_service = get_stakeholder_engagement_service(db=db, config=config)\n            break\n\n        await engagement_service.add_websocket_connection(amendment_id, websocket)\n\n        logger.info(f\"WebSocket connection established for amendment {amendment_id}\")\n\n        # Send initial engagement status\n        engagement_status = await engagement_service.get_engagement_status(amendment_id)\n        if engagement_status:\n            await websocket.send_json(\n                {\n                    \"type\": \"initial_status\",\n                    \"amendment_id\": amendment_id,\n                    \"engagement_status\": engagement_status.dict(),\n                }\n            )\n\n        # Keep connection alive and handle messages\n        while True:\n            try:\n                data = await websocket.receive_text()\n\n                # Handle ping/pong for connection health\n                if data == \"ping\":\n                    await websocket.send_text(\"pong\")\n\n            except WebSocketDisconnect:\n                break\n            except Exception as e:\n                logger.error(f\"WebSocket error: {e}\")\n                break\n\n    except Exception as e:` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/stakeholder_engagement.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/stakeholder_engagement.py",
          "start": {
            "line": 327,
            "col": 9,
            "offset": 0
          },
          "end": {
            "line": 375,
            "col": 27,
            "offset": 1598
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/performance_monitor.py",
            "start": {
              "line": 25,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 29,
              "col": 15,
              "offset": 138
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/performance_monitor.py",
            "start": {
              "line": 31,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 32,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/performance_monitor.py:25:\n `from prometheus_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    Counter,\n    Gauge,\n    Histogram,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/performance_monitor.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/performance_monitor.py",
          "start": {
            "line": 25,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 29,
            "col": 15,
            "offset": 138
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/performance_monitor.py",
          "start": {
            "line": 31,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 32,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py",
            "start": {
              "line": 24,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 22,
              "offset": 163
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py",
            "start": {
              "line": 29,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 30,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py:24:\n `from .automated_resolution_engine import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    AutomatedResolutionEngine,\n    ResolutionResult,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py",
          "start": {
            "line": 24,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 22,
            "offset": 163
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py",
          "start": {
            "line": 29,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 30,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 25,
              "offset": 139
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
            "start": {
              "line": 29,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 30,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
            "start": {
              "line": 35,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 36,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
            "start": {
              "line": 41,
              "col": 24,
              "offset": 0
            },
            "end": {
              "line": 42,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py:26:\n `from ...services.voting_mechanism import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 25,
            "offset": 139
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
          "start": {
            "line": 29,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 30,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
          "start": {
            "line": 35,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 36,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
          "start": {
            "line": 41,
            "col": 24,
            "offset": 0
          },
          "end": {
            "line": 42,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py",
            "start": {
              "line": 25,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 29,
              "col": 25,
              "offset": 168
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py",
            "start": {
              "line": 31,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 32,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py:25:\n `from services.shared.models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalViolation,\n    User,\n    ViolationEscalation,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py",
          "start": {
            "line": 25,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 29,
            "col": 25,
            "offset": 168
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py",
          "start": {
            "line": 31,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 32,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/constitutional_council.py:386:\n `import` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/constitutional_council.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/policy-governance/pgc_service_standardized/api/v1/governance_workflows.py:71:\n `.` was unexpected",
      "path": "services/core/policy-governance/pgc_service_standardized/api/v1/governance_workflows.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 14,
              "col": 25,
              "offset": 97
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
            "start": {
              "line": 16,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
            "start": {
              "line": 18,
              "col": 29,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/authentication/auth_service_standardized/api/agents.py:13:\n `from ..core.security import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
      "spans": [
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 14,
            "col": 25,
            "offset": 97
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
          "start": {
            "line": 16,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/agents.py",
          "start": {
            "line": 18,
            "col": 29,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
            "start": {
              "line": 23,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 25,
              "offset": 152
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
            "start": {
              "line": 26,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
            "start": {
              "line": 32,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 33,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
            "start": {
              "line": 36,
              "col": 30,
              "offset": 0
            },
            "end": {
              "line": 37,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py:23:\n `from ...services.enhanced_governance_synthesis import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
          "start": {
            "line": 23,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 25,
            "offset": 152
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
          "start": {
            "line": 26,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
          "start": {
            "line": 32,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 33,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
          "start": {
            "line": 36,
            "col": 30,
            "offset": 0
          },
          "end": {
            "line": 37,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/public_consultation.py:23:\n `\"cdd01ef066bc6cf2\"` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/public_consultation.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py",
            "start": {
              "line": 17,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 19,
              "offset": 223
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py",
            "start": {
              "line": 25,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 26,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py:17:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    CrossDomainTestRequest,\n    CrossDomainTestResponse,\n    CrossDomainTestResult,\n    CrossDomainTestScenario,\n    DomainContext,` was unexpected",
      "path": "services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py",
      "spans": [
        {
          "file": "services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py",
          "start": {
            "line": 17,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 19,
            "offset": 223
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py",
          "start": {
            "line": 25,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 26,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py",
            "start": {
              "line": 22,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 29,
              "offset": 137
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py",
            "start": {
              "line": 26,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py:22:\n `from .llm_reliability_framework import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    LLMReliabilityFramework,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py",
          "start": {
            "line": 22,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 29,
            "offset": 137
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py",
          "start": {
            "line": 26,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py",
            "start": {
              "line": 21,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 26,
              "col": 18,
              "offset": 195
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py",
            "start": {
              "line": 28,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 29,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py:21:\n `from cryptography.hazmat.primitives.serialization import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    Encoding,\n    NoEncryption,\n    PrivateFormat,\n    PublicFormat,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py",
          "start": {
            "line": 21,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 26,
            "col": 18,
            "offset": 195
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py",
          "start": {
            "line": 28,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 29,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/integrity/app/cache_manager.py",
            "start": {
              "line": 10,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 17,
              "offset": 161
            }
          },
          {
            "path": "services/platform_services/integrity/app/cache_manager.py",
            "start": {
              "line": 15,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 15,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/integrity/app/cache_manager.py",
            "start": {
              "line": 16,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/integrity/app/cache_manager.py:10:\n `from services.shared.advanced_redis_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    AdvancedRedisClient,\n    CacheConfig,` was unexpected",
      "path": "services/platform_services/integrity/app/cache_manager.py",
      "spans": [
        {
          "file": "services/platform_services/integrity/app/cache_manager.py",
          "start": {
            "line": 10,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 17,
            "offset": 161
          }
        },
        {
          "file": "services/platform_services/integrity/app/cache_manager.py",
          "start": {
            "line": 15,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 15,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/integrity/app/cache_manager.py",
          "start": {
            "line": 16,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 18,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 25,
              "offset": 151
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 21,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 27,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 31,
              "col": 38,
              "offset": 0
            },
            "end": {
              "line": 32,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py:18:\n `from ...services.collective_constitutional_ai import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 18,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 25,
            "offset": 151
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 21,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 27,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 31,
            "col": 38,
            "offset": 0
          },
          "end": {
            "line": 32,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 117
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
            "start": {
              "line": 19,
              "col": 27,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py:15:\n `from services.shared.security_validation import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 117
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
          "start": {
            "line": 19,
            "col": 27,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 25,
              "offset": 59
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py",
            "start": {
              "line": 15,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py:12:\n `from services.shared.auth import (\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 25,
            "offset": 59
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py",
          "start": {
            "line": 15,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/cli/tui/sdk/internal/requestconfig/requestconfig.go",
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 17,
              "offset": 16
            }
          }
        ]
      ],
      "message": "Syntax error at line services/cli/tui/sdk/internal/requestconfig/requestconfig.go:1:\n `# Constitutional` was unexpected",
      "path": "services/cli/tui/sdk/internal/requestconfig/requestconfig.go",
      "spans": [
        {
          "file": "services/cli/tui/sdk/internal/requestconfig/requestconfig.go",
          "start": {
            "line": 1,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 1,
            "col": 17,
            "offset": 16
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
            "start": {
              "line": 24,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 25,
              "offset": 144
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
            "start": {
              "line": 27,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
            "start": {
              "line": 33,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
            "start": {
              "line": 39,
              "col": 27,
              "offset": 0
            },
            "end": {
              "line": 40,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py:24:\n `from ...services.democratic_governance import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
          "start": {
            "line": 24,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 25,
            "offset": 144
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
          "start": {
            "line": 27,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
          "start": {
            "line": 33,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
          "start": {
            "line": 39,
            "col": 27,
            "offset": 0
          },
          "end": {
            "line": 40,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 24,
              "offset": 222
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py:26:\n `from .services.qec_error_correction_service import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConflictDetectionResult,\n    ConflictType,\n    QECErrorCorrectionService,\n    ResolutionStrategy,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 24,
            "offset": 222
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/policy-governance/pgc_service/app/api/v1/governance_workflows.py:69:\n `import` was unexpected",
      "path": "services/core/policy-governance/pgc_service/app/api/v1/governance_workflows.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py",
            "start": {
              "line": 5,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 7,
              "col": 37,
              "offset": 150
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py",
            "start": {
              "line": 9,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 10,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py:5:\n `from .core.llm_reliability_framework import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    EnhancedLLMReliabilityFramework,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py",
          "start": {
            "line": 5,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 7,
            "col": 37,
            "offset": 150
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py",
          "start": {
            "line": 9,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 10,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 16,
              "offset": 221
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py:26:\n `from .workflows.structured_output_models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ModelSpecializationConfig,\n    PolicySynthesisRequest,\n    PolicySynthesisResponse,\n    PolicyType,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 16,
            "offset": 221
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 37,
              "offset": 207
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py:15:\n `from services.shared.wina.constitutional_integration import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    WINAConstitutionalPrincipleAnalyzer,\n    WINAConstitutionalUpdateService,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 37,
            "offset": 207
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
            "start": {
              "line": 16,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 25,
              "offset": 129
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
            "start": {
              "line": 19,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
            "start": {
              "line": 21,
              "col": 15,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py:16:\n `from ...crud import (  # crud_refresh_token was created earlier; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
      "spans": [
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
          "start": {
            "line": 16,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 25,
            "offset": 129
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
          "start": {
            "line": 19,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
          "start": {
            "line": 21,
            "col": 15,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py",
            "start": {
              "line": 25,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 18,
              "offset": 159
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py",
            "start": {
              "line": 30,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py:25:\n `from .intelligent_conflict_detector import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConflictDetectionResult,\n    ConflictType,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py",
          "start": {
            "line": 25,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 18,
            "offset": 159
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py",
          "start": {
            "line": 30,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/auth.py",
            "start": {
              "line": 2,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 4,
              "col": 17,
              "offset": 119
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/auth.py",
            "start": {
              "line": 6,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 6,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/auth.py",
            "start": {
              "line": 9,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 10,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/auth.py:2:\n `from services.shared.auth import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    RoleChecker,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/auth.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/auth.py",
          "start": {
            "line": 2,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 4,
            "col": 17,
            "offset": 119
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/auth.py",
          "start": {
            "line": 6,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 6,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/auth.py",
          "start": {
            "line": 9,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 10,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/formal-verification/fv_service/app/cache_manager.py",
            "start": {
              "line": 10,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 17,
              "offset": 161
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/cache_manager.py",
            "start": {
              "line": 15,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 15,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/cache_manager.py",
            "start": {
              "line": 16,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/formal-verification/fv_service/app/cache_manager.py:10:\n `from services.shared.advanced_redis_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    AdvancedRedisClient,\n    CacheConfig,` was unexpected",
      "path": "services/core/formal-verification/fv_service/app/cache_manager.py",
      "spans": [
        {
          "file": "services/core/formal-verification/fv_service/app/cache_manager.py",
          "start": {
            "line": 10,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 17,
            "offset": 161
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/cache_manager.py",
          "start": {
            "line": 15,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 15,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/cache_manager.py",
          "start": {
            "line": 16,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
            "start": {
              "line": 9,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 10,
              "col": 25,
              "offset": 49
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
            "start": {
              "line": 12,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 12,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
            "start": {
              "line": 17,
              "col": 28,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py:9:\n `from ...crud_gs import (\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
          "start": {
            "line": 9,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 10,
            "col": 25,
            "offset": 49
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
          "start": {
            "line": 12,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 12,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
          "start": {
            "line": 17,
            "col": 28,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
            "start": {
              "line": 17,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 35,
              "offset": 161
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
            "start": {
              "line": 22,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 2,
              "offset": 4
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
            "start": {
              "line": 72,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 295,
              "col": 6,
              "offset": 7992
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py:17:\n `from ...schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalSynthesisInput,\n    ConstitutionalSynthesisOutput,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
          "start": {
            "line": 17,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 35,
            "offset": 161
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
          "start": {
            "line": 22,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 2,
            "offset": 4
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
          "start": {
            "line": 72,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 295,
            "col": 6,
            "offset": 7992
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py",
            "start": {
              "line": 16,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 47,
              "offset": 170
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py:16:\n `from ..core.constitutional_council_scalability import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalCouncilScalabilityFramework,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py",
          "start": {
            "line": 16,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 47,
            "offset": 170
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/formal-verification/fv_service/app/core/tiered_validation.py",
            "start": {
              "line": 9,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 20,
              "offset": 278
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/core/tiered_validation.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/formal-verification/fv_service/app/core/tiered_validation.py:9:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ACPrinciple,\n    PolicyRule,\n    SafetyProperty,\n    TieredVerificationRequest,\n    TieredVerificationResponse,\n    TieredVerificationResult,\n    ValidationLevel,\n    ValidationTier,` was unexpected",
      "path": "services/core/formal-verification/fv_service/app/core/tiered_validation.py",
      "spans": [
        {
          "file": "services/core/formal-verification/fv_service/app/core/tiered_validation.py",
          "start": {
            "line": 9,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 20,
            "offset": 278
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/core/tiered_validation.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/public_consultation.py:23:\n `\"cdd01ef066bc6cf2\"` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/public_consultation.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
            "start": {
              "line": 30,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 25,
              "offset": 111
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 33,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
            "start": {
              "line": 34,
              "col": 38,
              "offset": 0
            },
            "end": {
              "line": 35,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py:30:\n `from .collective_constitutional_ai import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
          "start": {
            "line": 30,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 25,
            "offset": 111
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 33,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
          "start": {
            "line": 34,
            "col": 38,
            "offset": 0
          },
          "end": {
            "line": 35,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 59
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py:15:\n `from services.shared.auth import (\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 59
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/cli/tui/internal/config/config.go",
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 17,
              "offset": 16
            }
          }
        ]
      ],
      "message": "Syntax error at line services/cli/tui/internal/config/config.go:1:\n `# Constitutional` was unexpected",
      "path": "services/cli/tui/internal/config/config.go",
      "spans": [
        {
          "file": "services/cli/tui/internal/config/config.go",
          "start": {
            "line": 1,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 1,
            "col": 17,
            "offset": 16
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/rule_generator.py",
            "start": {
              "line": 4,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 22,
              "offset": 228
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/rule_generator.py",
            "start": {
              "line": 13,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 14,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/rule_generator.py:4:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ACPrinciple,\n    GeneratedRuleInfo,\n    LLMInterpretationInput,\n    LLMStructuredOutput,\n    LLMSuggestedAtom,\n    LLMSuggestedRule,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/rule_generator.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/rule_generator.py",
          "start": {
            "line": 4,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 22,
            "offset": 228
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/rule_generator.py",
          "start": {
            "line": 13,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 14,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/policy-governance/app/cache_manager.py",
            "start": {
              "line": 14,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 17,
              "offset": 185
            }
          },
          {
            "path": "services/core/policy-governance/app/cache_manager.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/policy-governance/app/cache_manager.py",
            "start": {
              "line": 22,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/policy-governance/app/cache_manager.py:14:\n `from services.shared.advanced_redis_client import (  # Constitutional compliance hash for ACGS\n    CACHE_TTL_POLICIES,\n    CONSTITUTIONAL_HASH,\n    AdvancedRedisClient,\n    CacheConfig,` was unexpected",
      "path": "services/core/policy-governance/app/cache_manager.py",
      "spans": [
        {
          "file": "services/core/policy-governance/app/cache_manager.py",
          "start": {
            "line": 14,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 17,
            "offset": 185
          }
        },
        {
          "file": "services/core/policy-governance/app/cache_manager.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/policy-governance/app/cache_manager.py",
          "start": {
            "line": 22,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 129
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
            "start": {
              "line": 20,
              "col": 15,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/authentication/auth_service/app/api/v1/endpoints.py:15:\n `from ...crud import (  # crud_refresh_token was created earlier; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
      "spans": [
        {
          "file": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 129
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
          "start": {
            "line": 20,
            "col": 15,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 24,
              "offset": 173
            }
          },
          {
            "path": "services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py:12:\n `from .services.pgp_assurance import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    HashAlgorithm,\n    PGPAssuranceService,\n    SignatureAlgorithm,` was unexpected",
      "path": "services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py",
      "spans": [
        {
          "file": "services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 24,
            "offset": 173
          }
        },
        {
          "file": "services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 23,
              "offset": 159
            }
          },
          {
            "path": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
            "start": {
              "line": 21,
              "col": 37,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py:15:\n `from ...core.ultra_low_latency_optimizer import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    CacheStrategy,\n    OptimizationLevel,` was unexpected",
      "path": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
      "spans": [
        {
          "file": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 23,
            "offset": 159
          }
        },
        {
          "file": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
          "start": {
            "line": 21,
            "col": 37,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/integrity/integrity_service/app/core/explainability.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 28,
              "offset": 174
            }
          },
          {
            "path": "services/platform_services/integrity/integrity_service/app/core/explainability.py",
            "start": {
              "line": 19,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/integrity/integrity_service/app/core/explainability.py:13:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ExplainabilityRequest,\n    ExplainabilityResponse,\n    RuleProvenanceResponse,` was unexpected",
      "path": "services/platform_services/integrity/integrity_service/app/core/explainability.py",
      "spans": [
        {
          "file": "services/platform_services/integrity/integrity_service/app/core/explainability.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 28,
            "offset": 174
          }
        },
        {
          "file": "services/platform_services/integrity/integrity_service/app/core/explainability.py",
          "start": {
            "line": 19,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 117
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
            "start": {
              "line": 19,
              "col": 27,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py:15:\n `from services.shared.security_validation import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 117
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
          "start": {
            "line": 19,
            "col": 27,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py",
            "start": {
              "line": 10,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 20,
              "offset": 299
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py",
            "start": {
              "line": 22,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py:10:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConflictCheckRequest,\n    ConflictCheckResponse,\n    ConflictDetectionResult,\n    ConflictType,\n    PolicyRule,\n    SafetyCheckRequest,\n    SafetyCheckResponse,\n    SafetyCheckResult,\n    SafetyProperty,` was unexpected",
      "path": "services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py",
      "spans": [
        {
          "file": "services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py",
          "start": {
            "line": 10,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 20,
            "offset": 299
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py",
          "start": {
            "line": 22,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/worker_agents/ethics/__init__.py",
            "start": {
              "line": 27,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 33,
              "col": 23,
              "offset": 203
            }
          },
          {
            "path": "services/core/worker_agents/ethics/__init__.py",
            "start": {
              "line": 35,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 36,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/worker_agents/ethics/__init__.py:27:\n `from .models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    BiasAssessment,\n    EthicalAnalysisResult,\n    FairnessEvaluation,\n    HarmAssessment,\n    StakeholderImpact,` was unexpected",
      "path": "services/core/worker_agents/ethics/__init__.py",
      "spans": [
        {
          "file": "services/core/worker_agents/ethics/__init__.py",
          "start": {
            "line": 27,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 33,
            "col": 23,
            "offset": 203
          }
        },
        {
          "file": "services/core/worker_agents/ethics/__init__.py",
          "start": {
            "line": 35,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 36,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
            "start": {
              "line": 9,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 10,
              "col": 25,
              "offset": 49
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
            "start": {
              "line": 12,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 12,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
            "start": {
              "line": 17,
              "col": 28,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py:9:\n `from ...crud_gs import (\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
          "start": {
            "line": 9,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 10,
            "col": 25,
            "offset": 49
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
          "start": {
            "line": 12,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 12,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
          "start": {
            "line": 17,
            "col": 28,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/models/mab_models.py",
            "start": {
              "line": 11,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 10,
              "offset": 203
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/models/mab_models.py",
            "start": {
              "line": 23,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/models/mab_models.py:11:\n `from sqlalchemy import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    JSON,\n    Boolean,\n    Column,\n    DateTime,\n    Float,\n    ForeignKey,\n    Integer,\n    String,\n    Text,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/models/mab_models.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/models/mab_models.py",
          "start": {
            "line": 11,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 10,
            "offset": 203
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/models/mab_models.py",
          "start": {
            "line": 23,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/workflows.py:23:\n `\"cdd01ef066bc6cf2\"` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/workflows.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py",
            "start": {
              "line": 27,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 22,
              "offset": 176
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py:27:\n `from ..core.heterogeneous_validator import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    BaseValidator,\n    GovernanceContext,\n    ValidationResult,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py",
          "start": {
            "line": 27,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 22,
            "offset": 176
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/cli/tui/sdk/config.go",
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 17,
              "offset": 16
            }
          }
        ]
      ],
      "message": "Syntax error at line services/cli/tui/sdk/config.go:1:\n `# Constitutional` was unexpected",
      "path": "services/cli/tui/sdk/config.go",
      "spans": [
        {
          "file": "services/cli/tui/sdk/config.go",
          "start": {
            "line": 1,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 1,
            "col": 17,
            "offset": 16
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 31,
              "offset": 151
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py",
            "start": {
              "line": 30,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py:26:\n `from .services.qec_error_correction_service import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    QECErrorCorrectionService,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 31,
            "offset": 151
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py",
          "start": {
            "line": 30,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py",
            "start": {
              "line": 29,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 32,
              "col": 28,
              "offset": 173
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py",
            "start": {
              "line": 34,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 35,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py:29:\n `from services.shared.wina.model_integration import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    WINAModelIntegrator,\n    WINAOptimizationResult,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py",
          "start": {
            "line": 29,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 32,
            "col": 28,
            "offset": 173
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py",
          "start": {
            "line": 34,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 35,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/cli/opencode/src/config/config.ts",
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "col": 17,
              "offset": 16
            }
          }
        ]
      ],
      "message": "Syntax error at line services/cli/opencode/src/config/config.ts:1:\n `# Constitutional` was unexpected",
      "path": "services/cli/opencode/src/config/config.ts",
      "spans": [
        {
          "file": "services/cli/opencode/src/config/config.ts",
          "start": {
            "line": 1,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 1,
            "col": 17,
            "offset": 16
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 16,
              "offset": 221
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py:26:\n `from .workflows.structured_output_models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ModelSpecializationConfig,\n    PolicySynthesisRequest,\n    PolicySynthesisResponse,\n    PolicyType,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 16,
            "offset": 221
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 37,
              "offset": 207
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py:15:\n `from services.shared.wina.constitutional_integration import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    WINAConstitutionalPrincipleAnalyzer,\n    WINAConstitutionalUpdateService,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 37,
            "offset": 207
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py",
            "start": {
              "line": 30,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 35,
              "col": 23,
              "offset": 214
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py",
            "start": {
              "line": 37,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 38,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py:30:\n `from ..services.collective_constitutional_ai import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    BiasCategory,\n    CollectiveInput,\n    DemocraticLegitimacyLevel,\n    PolisConversation,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py",
          "start": {
            "line": 30,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 35,
            "col": 23,
            "offset": 214
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py",
          "start": {
            "line": 37,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 38,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 117
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
            "start": {
              "line": 19,
              "col": 27,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py:15:\n `from services.shared.security_validation import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 117
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
          "start": {
            "line": 19,
            "col": 27,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 31,
              "offset": 151
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py",
            "start": {
              "line": 30,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py:26:\n `from .services.qec_error_correction_service import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    QECErrorCorrectionService,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 31,
            "offset": 151
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py",
          "start": {
            "line": 30,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/constitutional_council.py:390:\n `.` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/constitutional_council.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/core/auth.py",
            "start": {
              "line": 2,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 4,
              "col": 17,
              "offset": 119
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/core/auth.py",
            "start": {
              "line": 6,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 6,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/core/auth.py",
            "start": {
              "line": 10,
              "col": 28,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/core/auth.py:2:\n `from services.shared.auth import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    RoleChecker,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/core/auth.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/core/auth.py",
          "start": {
            "line": 2,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 4,
            "col": 17,
            "offset": 119
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/core/auth.py",
          "start": {
            "line": 6,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 6,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/core/auth.py",
          "start": {
            "line": 10,
            "col": 28,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py",
            "start": {
              "line": 5,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 7,
              "col": 37,
              "offset": 150
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py",
            "start": {
              "line": 9,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 10,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py:5:\n `from .core.llm_reliability_framework import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    EnhancedLLMReliabilityFramework,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py",
          "start": {
            "line": 5,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 7,
            "col": 37,
            "offset": 150
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py",
          "start": {
            "line": 9,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 10,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/fv_client.py",
            "start": {
              "line": 5,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 9,
              "col": 28,
              "offset": 192
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/fv_client.py",
            "start": {
              "line": 11,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 12,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/fv_client.py:5:\n `from ..schemas import (  # Schemas from gs_service; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    FVPolicyRuleRef,\n    FVVerificationRequest,\n    FVVerificationResponse,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/fv_client.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/fv_client.py",
          "start": {
            "line": 5,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 9,
            "col": 28,
            "offset": 192
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/fv_client.py",
          "start": {
            "line": 11,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 12,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
            "start": {
              "line": 17,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 35,
              "offset": 161
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
            "start": {
              "line": 22,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 2,
              "offset": 4
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
            "start": {
              "line": 72,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 295,
              "col": 6,
              "offset": 7992
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py:17:\n `from ...schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalSynthesisInput,\n    ConstitutionalSynthesisOutput,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
          "start": {
            "line": 17,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 35,
            "offset": 161
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
          "start": {
            "line": 22,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 2,
            "offset": 4
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
          "start": {
            "line": 72,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 295,
            "col": 6,
            "offset": 7992
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/ollama_client.py",
            "start": {
              "line": 20,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 22,
              "offset": 188
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/ollama_client.py",
            "start": {
              "line": 27,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/ollama_client.py:20:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    LLMInterpretationInput,\n    LLMStructuredOutput,\n    LLMSuggestedAtom,\n    LLMSuggestedRule,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/ollama_client.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/ollama_client.py",
          "start": {
            "line": 20,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 22,
            "offset": 188
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/ollama_client.py",
          "start": {
            "line": 27,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/evolutionary-computation/app/api/v1/oversight.py",
            "start": {
              "line": 16,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 25,
              "offset": 246
            }
          },
          {
            "path": "services/core/evolutionary-computation/app/api/v1/oversight.py",
            "start": {
              "line": 24,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/evolutionary-computation/app/api/v1/oversight.py:16:\n `from ...core.wina_oversight_coordinator import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ECOversightContext,\n    ECOversightRequest,\n    ECOversightStrategy,\n    WINAECOversightCoordinator,\n    WINAOversightResult,` was unexpected",
      "path": "services/core/evolutionary-computation/app/api/v1/oversight.py",
      "spans": [
        {
          "file": "services/core/evolutionary-computation/app/api/v1/oversight.py",
          "start": {
            "line": 16,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 25,
            "offset": 246
          }
        },
        {
          "file": "services/core/evolutionary-computation/app/api/v1/oversight.py",
          "start": {
            "line": 24,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
            "start": {
              "line": 8,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 9,
              "col": 25,
              "offset": 145
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
            "start": {
              "line": 11,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
            "start": {
              "line": 12,
              "col": 18,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/principles.py:8:\n `from services.shared.database import (  # Corrected import for async db session; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
          "start": {
            "line": 8,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 9,
            "col": 25,
            "offset": 145
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
          "start": {
            "line": 11,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
          "start": {
            "line": 12,
            "col": 18,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 14,
              "col": 25,
              "offset": 102
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
            "start": {
              "line": 16,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
            "start": {
              "line": 20,
              "col": 28,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py:13:\n `from services.shared.auth import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 14,
            "col": 25,
            "offset": 102
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
          "start": {
            "line": 16,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
          "start": {
            "line": 20,
            "col": 28,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py",
            "start": {
              "line": 21,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 25,
              "offset": 168
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py",
            "start": {
              "line": 27,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py:21:\n `from services.shared.models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalViolation,\n    User,\n    ViolationEscalation,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py",
          "start": {
            "line": 21,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 25,
            "offset": 168
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py",
          "start": {
            "line": 27,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/llm_integration.py",
            "start": {
              "line": 11,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 22,
              "offset": 188
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/llm_integration.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/llm_integration.py:11:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    LLMInterpretationInput,\n    LLMStructuredOutput,\n    LLMSuggestedAtom,\n    LLMSuggestedRule,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/llm_integration.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/llm_integration.py",
          "start": {
            "line": 11,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 22,
            "offset": 188
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/llm_integration.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/integrity/integrity_service/app/core/auth.py",
            "start": {
              "line": 2,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "col": 25,
              "offset": 102
            }
          },
          {
            "path": "services/platform_services/integrity/integrity_service/app/core/auth.py",
            "start": {
              "line": 5,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 5,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/integrity/integrity_service/app/core/auth.py",
            "start": {
              "line": 10,
              "col": 30,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/integrity/integrity_service/app/core/auth.py:2:\n `from services.shared.auth import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/platform_services/integrity/integrity_service/app/core/auth.py",
      "spans": [
        {
          "file": "services/platform_services/integrity/integrity_service/app/core/auth.py",
          "start": {
            "line": 2,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 3,
            "col": 25,
            "offset": 102
          }
        },
        {
          "file": "services/platform_services/integrity/integrity_service/app/core/auth.py",
          "start": {
            "line": 5,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 5,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/integrity/integrity_service/app/core/auth.py",
          "start": {
            "line": 10,
            "col": 30,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 129
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
            "start": {
              "line": 20,
              "col": 15,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py:15:\n `from ...crud import (  # crud_refresh_token was created earlier; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
      "spans": [
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 129
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
          "start": {
            "line": 20,
            "col": 15,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 23,
              "offset": 159
            }
          },
          {
            "path": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
            "start": {
              "line": 21,
              "col": 37,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py:15:\n `from ...core.ultra_low_latency_optimizer import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    CacheStrategy,\n    OptimizationLevel,` was unexpected",
      "path": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
      "spans": [
        {
          "file": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 23,
            "offset": 159
          }
        },
        {
          "file": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
          "start": {
            "line": 21,
            "col": 37,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py",
            "start": {
              "line": 23,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 16,
              "offset": 216
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py",
            "start": {
              "line": 30,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py:23:\n `from .services.constitutional_reporting_service import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ComplianceReport,\n    ConstitutionalReportingService,\n    ReportFormat,\n    ReportType,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py",
          "start": {
            "line": 23,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 16,
            "offset": 216
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py",
          "start": {
            "line": 30,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/mab_integration.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 25,
              "offset": 213
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/mab_integration.py",
            "start": {
              "line": 19,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/mab_integration.py:12:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalSynthesisInput,\n    ConstitutionalSynthesisOutput,\n    LLMInterpretationInput,\n    LLMStructuredOutput,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/mab_integration.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/mab_integration.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 25,
            "offset": 213
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/mab_integration.py",
          "start": {
            "line": 19,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
            "start": {
              "line": 24,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 25,
              "offset": 144
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
            "start": {
              "line": 27,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
            "start": {
              "line": 33,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
            "start": {
              "line": 39,
              "col": 27,
              "offset": 0
            },
            "end": {
              "line": 40,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py:24:\n `from ...services.democratic_governance import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
          "start": {
            "line": 24,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 25,
            "offset": 144
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
          "start": {
            "line": 27,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
          "start": {
            "line": 33,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
          "start": {
            "line": 39,
            "col": 27,
            "offset": 0
          },
          "end": {
            "line": 40,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/enhanced_synthesis.py:21:\n `\"cdd01ef066bc6cf2\"` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/enhanced_synthesis.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/evolutionary-computation/app/cache_manager.py",
            "start": {
              "line": 10,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 17,
              "offset": 161
            }
          },
          {
            "path": "services/core/evolutionary-computation/app/cache_manager.py",
            "start": {
              "line": 15,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 15,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/evolutionary-computation/app/cache_manager.py",
            "start": {
              "line": 16,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/evolutionary-computation/app/cache_manager.py:10:\n `from services.shared.advanced_redis_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    AdvancedRedisClient,\n    CacheConfig,` was unexpected",
      "path": "services/core/evolutionary-computation/app/cache_manager.py",
      "spans": [
        {
          "file": "services/core/evolutionary-computation/app/cache_manager.py",
          "start": {
            "line": 10,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 17,
            "offset": 161
          }
        },
        {
          "file": "services/core/evolutionary-computation/app/cache_manager.py",
          "start": {
            "line": 15,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 15,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/evolutionary-computation/app/cache_manager.py",
          "start": {
            "line": 16,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/formal-verification/fv_service/app/core/verification_logic.py",
            "start": {
              "line": 1,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 7,
              "col": 24,
              "offset": 190
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/core/verification_logic.py",
            "start": {
              "line": 9,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 10,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/formal-verification/fv_service/app/core/verification_logic.py:1:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ACPrinciple,\n    PolicyRule,\n    ProofObligation,\n    SMTSolverOutput,\n    VerificationResult,` was unexpected",
      "path": "services/core/formal-verification/fv_service/app/core/verification_logic.py",
      "spans": [
        {
          "file": "services/core/formal-verification/fv_service/app/core/verification_logic.py",
          "start": {
            "line": 1,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 7,
            "col": 24,
            "offset": 190
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/core/verification_logic.py",
          "start": {
            "line": 9,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 10,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/blockchain/scripts/run_comprehensive_tests.sh",
            "start": {
              "line": 202,
              "col": 57,
              "offset": 0
            },
            "end": {
              "line": 202,
              "col": 66,
              "offset": 9
            }
          }
        ]
      ],
      "message": "Syntax error at line services/blockchain/scripts/run_comprehensive_tests.sh:202:\n `/ 1000000` was unexpected",
      "path": "services/blockchain/scripts/run_comprehensive_tests.sh",
      "spans": [
        {
          "file": "services/blockchain/scripts/run_comprehensive_tests.sh",
          "start": {
            "line": 202,
            "col": 57,
            "offset": 0
          },
          "end": {
            "line": 202,
            "col": 66,
            "offset": 9
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 24,
              "offset": 173
            }
          },
          {
            "path": "services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py:12:\n `from .services.pgp_assurance import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    HashAlgorithm,\n    PGPAssuranceService,\n    SignatureAlgorithm,` was unexpected",
      "path": "services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py",
      "spans": [
        {
          "file": "services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 24,
            "offset": 173
          }
        },
        {
          "file": "services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/platform_services/authentication/auth_service/app/api/agents.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 14,
              "col": 25,
              "offset": 97
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service/app/api/agents.py",
            "start": {
              "line": 16,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/platform_services/authentication/auth_service/app/api/agents.py",
            "start": {
              "line": 18,
              "col": 29,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/platform_services/authentication/auth_service/app/api/agents.py:13:\n `from ..core.security import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/platform_services/authentication/auth_service/app/api/agents.py",
      "spans": [
        {
          "file": "services/platform_services/authentication/auth_service/app/api/agents.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 14,
            "col": 25,
            "offset": 97
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service/app/api/agents.py",
          "start": {
            "line": 16,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/platform_services/authentication/auth_service/app/api/agents.py",
          "start": {
            "line": 18,
            "col": 29,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 25,
              "offset": 59
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py",
            "start": {
              "line": 15,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py:12:\n `from services.shared.auth import (\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 25,
            "offset": 59
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py",
          "start": {
            "line": 15,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py",
            "start": {
              "line": 23,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 16,
              "offset": 216
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py",
            "start": {
              "line": 30,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py:23:\n `from .services.constitutional_reporting_service import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ComplianceReport,\n    ConstitutionalReportingService,\n    ReportFormat,\n    ReportType,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py",
          "start": {
            "line": 23,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 16,
            "offset": 216
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py",
          "start": {
            "line": 30,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 14,
              "col": 25,
              "offset": 102
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
            "start": {
              "line": 16,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
            "start": {
              "line": 20,
              "col": 28,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py:13:\n `from services.shared.auth import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 14,
            "col": 25,
            "offset": 102
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
          "start": {
            "line": 16,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
          "start": {
            "line": 20,
            "col": 28,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/governance-engine/app/main.py:276:\n `if` was unexpected",
      "path": "services/core/governance-engine/app/main.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py",
            "start": {
              "line": 22,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 38,
              "offset": 211
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py",
            "start": {
              "line": 26,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py:22:\n `from integrations.alphaevolve_engine.services.qec_enhancement.constitutional_distance_calculator import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalDistanceCalculator,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py",
          "start": {
            "line": 22,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 38,
            "offset": 211
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py",
          "start": {
            "line": 26,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/context/context_service/app/core/context_engine.py:1343:\n missing element",
      "path": "services/core/context/context_service/app/core/context_engine.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/cache_manager.py",
            "start": {
              "line": 11,
              "col": 30,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 40,
              "offset": 10
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/cache_manager.py:11:\n `-synthesis` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/cache_manager.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/cache_manager.py",
          "start": {
            "line": 11,
            "col": 30,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 40,
            "offset": 10
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 117
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
            "start": {
              "line": 19,
              "col": 27,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py:15:\n `from services.shared.security_validation import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 117
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
          "start": {
            "line": 19,
            "col": 27,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py",
            "start": {
              "line": 13,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 25,
              "offset": 187
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py",
            "start": {
              "line": 22,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py:13:\n `from fastapi import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    APIRouter,\n    Depends,\n    HTTPException,\n    Query,\n    WebSocket,\n    WebSocketDisconnect,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py",
          "start": {
            "line": 13,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 25,
            "offset": 187
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py",
          "start": {
            "line": 22,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/stakeholder_engagement.py",
            "start": {
              "line": 327,
              "col": 9,
              "offset": 0
            },
            "end": {
              "line": 375,
              "col": 27,
              "offset": 1598
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/stakeholder_engagement.py:327:\n `\n        await websocket.accept()\n\n        # Create engagement service (simplified for WebSocket)\n        from services.shared.database import get_async_db\n\n# Security validation imports\nfrom services.shared.security_validation import (\n    validate_governance_input,\n    validate_policy_input,\n    validate_user_input,\n)\n\n        async for db in get_async_db():\n            config = ConstitutionalCouncilConfig()\n            engagement_service = get_stakeholder_engagement_service(db=db, config=config)\n            break\n\n        await engagement_service.add_websocket_connection(amendment_id, websocket)\n\n        logger.info(f\"WebSocket connection established for amendment {amendment_id}\")\n\n        # Send initial engagement status\n        engagement_status = await engagement_service.get_engagement_status(amendment_id)\n        if engagement_status:\n            await websocket.send_json(\n                {\n                    \"type\": \"initial_status\",\n                    \"amendment_id\": amendment_id,\n                    \"engagement_status\": engagement_status.dict(),\n                }\n            )\n\n        # Keep connection alive and handle messages\n        while True:\n            try:\n                data = await websocket.receive_text()\n\n                # Handle ping/pong for connection health\n                if data == \"ping\":\n                    await websocket.send_text(\"pong\")\n\n            except WebSocketDisconnect:\n                break\n            except Exception as e:\n                logger.error(f\"WebSocket error: {e}\")\n                break\n\n    except Exception as e:` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/stakeholder_engagement.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/stakeholder_engagement.py",
          "start": {
            "line": 327,
            "col": 9,
            "offset": 0
          },
          "end": {
            "line": 375,
            "col": 27,
            "offset": 1598
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/workflows.py:23:\n `\"cdd01ef066bc6cf2\"` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/workflows.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 25,
              "offset": 139
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
            "start": {
              "line": 29,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 30,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
            "start": {
              "line": 35,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 36,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
            "start": {
              "line": 41,
              "col": 24,
              "offset": 0
            },
            "end": {
              "line": 42,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/voting.py:26:\n `from ...services.voting_mechanism import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 25,
            "offset": 139
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
          "start": {
            "line": 29,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 30,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
          "start": {
            "line": 35,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 36,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
          "start": {
            "line": 41,
            "col": 24,
            "offset": 0
          },
          "end": {
            "line": 42,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 24,
              "offset": 222
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py:26:\n `from .services.qec_error_correction_service import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConflictDetectionResult,\n    ConflictType,\n    QECErrorCorrectionService,\n    ResolutionStrategy,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 24,
            "offset": 222
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py",
            "start": {
              "line": 15,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 16,
              "col": 25,
              "offset": 59
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py",
            "start": {
              "line": 18,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py:15:\n `from services.shared.auth import (\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py",
          "start": {
            "line": 15,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 16,
            "col": 25,
            "offset": 59
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py",
          "start": {
            "line": 18,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 14,
              "col": 22,
              "offset": 113
            }
          },
          {
            "path": "services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py",
            "start": {
              "line": 16,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py:12:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ValidationResult,` was unexpected",
      "path": "services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py",
      "spans": [
        {
          "file": "services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 14,
            "col": 22,
            "offset": 113
          }
        },
        {
          "file": "services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py",
          "start": {
            "line": 16,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 20,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 25,
              "offset": 138
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 23,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 29,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 30,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 35,
              "col": 38,
              "offset": 0
            },
            "end": {
              "line": 36,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py:20:\n `from ...core.wina_rego_synthesis import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 20,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 25,
            "offset": 138
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 23,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 29,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 30,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 35,
            "col": 38,
            "offset": 0
          },
          "end": {
            "line": 36,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
            "start": {
              "line": 26,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 25,
              "offset": 182
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
            "start": {
              "line": 33,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 34,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py:26:\n `from services.shared.models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    AuditLog,\n    ConstitutionalViolation,\n    User,\n    ViolationEscalation,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
          "start": {
            "line": 26,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 25,
            "offset": 182
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
          "start": {
            "line": 33,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 34,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py",
            "start": {
              "line": 21,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 25,
              "offset": 168
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py",
            "start": {
              "line": 27,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py:21:\n `from services.shared.models import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalViolation,\n    User,\n    ViolationEscalation,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py",
          "start": {
            "line": 21,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 25,
            "offset": 168
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py",
          "start": {
            "line": 27,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
            "start": {
              "line": 19,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 25,
              "offset": 162
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
            "start": {
              "line": 24,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
            "start": {
              "line": 26,
              "col": 38,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py:19:\n `from ..core.wina_rego_synthesis import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    WINARegoSynthesisResult,\n    WINARegoSynthesizer,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
          "start": {
            "line": 19,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 25,
            "offset": 162
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
          "start": {
            "line": 24,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
          "start": {
            "line": 26,
            "col": 38,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/platform_services/audit_aggregator/main.py:102:\n `if` was unexpected",
      "path": "services/platform_services/audit_aggregator/main.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
            "start": {
              "line": 10,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 17,
              "offset": 161
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
            "start": {
              "line": 15,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 15,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
            "start": {
              "line": 16,
              "col": 22,
              "offset": 0
            },
            "end": {
              "line": 17,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/cache_manager.py:10:\n `from services.shared.advanced_redis_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    AdvancedRedisClient,\n    CacheConfig,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
          "start": {
            "line": 10,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 17,
            "offset": 161
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
          "start": {
            "line": 15,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 15,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/cache_manager.py",
          "start": {
            "line": 16,
            "col": 22,
            "offset": 0
          },
          "end": {
            "line": 17,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/policy-governance/pgc_service/app/core/secure_execution.py",
            "start": {
              "line": 3,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 8,
              "col": 22,
              "offset": 177
            }
          },
          {
            "path": "services/core/policy-governance/pgc_service/app/core/secure_execution.py",
            "start": {
              "line": 10,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/policy-governance/pgc_service/app/core/secure_execution.py:3:\n `from ..schemas import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    PETContextInput,\n    PETContextOutput,\n    TEEContextInput,\n    TEEContextOutput,` was unexpected",
      "path": "services/core/policy-governance/pgc_service/app/core/secure_execution.py",
      "spans": [
        {
          "file": "services/core/policy-governance/pgc_service/app/core/secure_execution.py",
          "start": {
            "line": 3,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 8,
            "col": 22,
            "offset": 177
          }
        },
        {
          "file": "services/core/policy-governance/pgc_service/app/core/secure_execution.py",
          "start": {
            "line": 10,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
            "start": {
              "line": 12,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 18,
              "col": 10,
              "offset": 173
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
            "start": {
              "line": 20,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 20,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
            "start": {
              "line": 21,
              "col": 21,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/shared/metrics.py:12:\n `from prometheus_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    CONTENT_TYPE_LATEST,\n    Counter,\n    Gauge,\n    Histogram,\n    Info,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
          "start": {
            "line": 12,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 18,
            "col": 10,
            "offset": 173
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 20,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
          "start": {
            "line": 21,
            "col": 21,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py",
            "start": {
              "line": 19,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 29,
              "offset": 172
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py",
            "start": {
              "line": 23,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py:19:\n `from integrations.alphaevolve_engine.core.constitutional_principle import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalPrinciple,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py",
          "start": {
            "line": 19,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 29,
            "offset": 172
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py",
          "start": {
            "line": 23,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
            "start": {
              "line": 8,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 9,
              "col": 25,
              "offset": 145
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
            "start": {
              "line": 11,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 11,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
            "start": {
              "line": 12,
              "col": 18,
              "offset": 0
            },
            "end": {
              "line": 13,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py:8:\n `from services.shared.database import (  # Corrected import for async db session; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
          "start": {
            "line": 8,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 9,
            "col": 25,
            "offset": 145
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
          "start": {
            "line": 11,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 11,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
          "start": {
            "line": 12,
            "col": 18,
            "offset": 0
          },
          "end": {
            "line": 13,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": "Syntax error",
      "message": "Syntax error at line services/core/evolutionary-computation/app/main.py:322:\n `if` was unexpected",
      "path": "services/core/evolutionary-computation/app/main.py"
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
            "start": {
              "line": 19,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 23,
              "col": 28,
              "offset": 184
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
            "start": {
              "line": 25,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 25,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
            "start": {
              "line": 26,
              "col": 20,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/policy_validator.py:19:\n `from ..core.opa_integration import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    OPAIntegrationError,\n    PolicyDecisionRequest,\n    PolicyValidationResult,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
          "start": {
            "line": 19,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 23,
            "col": 28,
            "offset": 184
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
          "start": {
            "line": 25,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 25,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
          "start": {
            "line": 26,
            "col": 20,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
            "start": {
              "line": 24,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 29,
              "col": 32,
              "offset": 221
            }
          },
          {
            "path": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
            "start": {
              "line": 31,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 31,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
            "start": {
              "line": 32,
              "col": 39,
              "offset": 0
            },
            "end": {
              "line": 33,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/evolutionary-computation/app/api/v1/wina_oversight.py:24:\n `from ...core.wina_oversight_coordinator import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ECOversightContext,\n    ECOversightRequest,\n    ECOversightStrategy,\n    WINAECOversightCoordinator,` was unexpected",
      "path": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
      "spans": [
        {
          "file": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
          "start": {
            "line": 24,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 29,
            "col": 32,
            "offset": 221
          }
        },
        {
          "file": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
          "start": {
            "line": 31,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 31,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
          "start": {
            "line": 32,
            "col": 39,
            "offset": 0
          },
          "end": {
            "line": 33,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py",
            "start": {
              "line": 28,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 30,
              "col": 38,
              "offset": 211
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py",
            "start": {
              "line": 32,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 33,
              "col": 2,
              "offset": 4
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py:28:\n `from integrations.alphaevolve_engine.services.qec_enhancement.constitutional_distance_calculator import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    ConstitutionalDistanceCalculator,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py",
          "start": {
            "line": 28,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 30,
            "col": 38,
            "offset": 211
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py",
          "start": {
            "line": 32,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 33,
            "col": 2,
            "offset": 4
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 18,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 19,
              "col": 25,
              "offset": 151
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 21,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 27,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 28,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
            "start": {
              "line": 31,
              "col": 38,
              "offset": 0
            },
            "end": {
              "line": 32,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py:18:\n `from ...services.collective_constitutional_ai import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
      "spans": [
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 18,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 19,
            "col": 25,
            "offset": 151
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 21,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 27,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 28,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
          "start": {
            "line": 31,
            "col": 38,
            "offset": 0
          },
          "end": {
            "line": 32,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 20,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 21,
              "col": 25,
              "offset": 138
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 23,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 29,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 30,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
            "start": {
              "line": 35,
              "col": 38,
              "offset": 0
            },
            "end": {
              "line": 36,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py:20:\n `from ...core.wina_rego_synthesis import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 20,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 21,
            "col": 25,
            "offset": 138
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 23,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 29,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 30,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
          "start": {
            "line": 35,
            "col": 38,
            "offset": 0
          },
          "end": {
            "line": 36,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
            "start": {
              "line": 23,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 25,
              "offset": 152
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
            "start": {
              "line": 26,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 27,
              "col": 10,
              "offset": 12
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
            "start": {
              "line": 32,
              "col": 25,
              "offset": 0
            },
            "end": {
              "line": 33,
              "col": 2,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
            "start": {
              "line": 36,
              "col": 30,
              "offset": 0
            },
            "end": {
              "line": 37,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py:23:\n `from ...services.enhanced_governance_synthesis import (  # Security validation imports; Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
          "start": {
            "line": 23,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 25,
            "offset": 152
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
          "start": {
            "line": 26,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 27,
            "col": 10,
            "offset": 12
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
          "start": {
            "line": 32,
            "col": 25,
            "offset": 0
          },
          "end": {
            "line": 33,
            "col": 2,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
          "start": {
            "line": 36,
            "col": 30,
            "offset": 0
          },
          "end": {
            "line": 37,
            "col": 2,
            "offset": 2
          }
        }
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "type": [
        "PartialParsing",
        [
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
            "start": {
              "line": 17,
              "col": 1,
              "offset": 0
            },
            "end": {
              "line": 22,
              "col": 15,
              "offset": 161
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
            "start": {
              "line": 24,
              "col": 5,
              "offset": 0
            },
            "end": {
              "line": 24,
              "col": 7,
              "offset": 2
            }
          },
          {
            "path": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
            "start": {
              "line": 25,
              "col": 21,
              "offset": 0
            },
            "end": {
              "line": 26,
              "col": 2,
              "offset": 2
            }
          }
        ]
      ],
      "message": "Syntax error at line services/core/governance-synthesis/gs_service/app/services/monitoring_service.py:17:\n `from prometheus_client import (  # Constitutional compliance hash for ACGS\n    CONSTITUTIONAL_HASH,\n    CollectorRegistry,\n    Counter,\n    Gauge,\n    Histogram,` was unexpected",
      "path": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
      "spans": [
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
          "start": {
            "line": 17,
            "col": 1,
            "offset": 0
          },
          "end": {
            "line": 22,
            "col": 15,
            "offset": 161
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
          "start": {
            "line": 24,
            "col": 5,
            "offset": 0
          },
          "end": {
            "line": 24,
            "col": 7,
            "offset": 2
          }
        },
        {
          "file": "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
          "start": {
            "line": 25,
            "col": 21,
            "offset": 0
          },
          "end": {
            "line": 26,
            "col": 2,
            "offset": 2
          }
        }
      ]
    }
  ],
  "paths": {
    "scanned": [
      "services/blockchain/.cargo-audit.toml",
      "services/blockchain/ACGS-1_Validation_Report.md",
      "services/blockchain/ADVANCED_IMPROVEMENTS_SUMMARY.md",
      "services/blockchain/ANCHOR_TEST_SUITE_VALIDATION_REPORT.md",
      "services/blockchain/Anchor.toml",
      "services/blockchain/BLOCKCHAIN_IMPROVEMENT_REPORT.md",
      "services/blockchain/COMPREHENSIVE_IMPROVEMENT_REPORT.md",
      "services/blockchain/COST_OPTIMIZATION_CONFIG.json",
      "services/blockchain/Cargo.toml",
      "services/blockchain/FINAL_REMEDIATION_REPORT.json",
      "services/blockchain/README.md",
      "services/blockchain/SECURITY_CHANGELOG.md",
      "services/blockchain/SECURITY_FINAL_STATUS.md",
      "services/blockchain/TEST_EXECUTION_REPORT.md",
      "services/blockchain/TEST_METHOD_CORRECTIONS.md",
      "services/blockchain/TEST_REMEDIATION_REPORT.json",
      "services/blockchain/TEST_VALIDATION_REPORT.md",
      "services/blockchain/audit.toml",
      "services/blockchain/benchmarks/performance_comparison.py",
      "services/blockchain/blockchain_improvement_report.json",
      "services/blockchain/client/python/solana_client.py",
      "services/blockchain/client/rust/Cargo.toml",
      "services/blockchain/client/rust/TEST_COVERAGE_REPORT.md",
      "services/blockchain/client/rust/src/appeals.rs",
      "services/blockchain/client/rust/src/governance.rs",
      "services/blockchain/client/rust/src/governance_improved.rs",
      "services/blockchain/client/rust/src/lib.rs",
      "services/blockchain/client/rust/src/lib_improved.rs",
      "services/blockchain/client/rust/src/logging.rs",
      "services/blockchain/client/rust/src/test_infrastructure.rs",
      "services/blockchain/constitution_data.json",
      "services/blockchain/cost_effectiveness_analysis.json",
      "services/blockchain/cost_optimization/compute_optimizer.rs",
      "services/blockchain/cost_optimization/cost_analyzer.rs",
      "services/blockchain/cost_optimization/cost_effectiveness_report.py",
      "services/blockchain/cost_optimization/storage_optimizer.rs",
      "services/blockchain/cross_chain/interoperability.rs",
      "services/blockchain/deny.toml",
      "services/blockchain/devnet_program_ids.json",
      "services/blockchain/docs/OPERATIONAL_RUNBOOKS.md",
      "services/blockchain/formal_verification/governance_proofs.rs",
      "services/blockchain/governance/advanced_features.rs",
      "services/blockchain/initial_policies.json",
      "services/blockchain/keys/key_registry.json",
      "services/blockchain/monitoring/observability.rs",
      "services/blockchain/package.json",
      "services/blockchain/performance_benchmark.json",
      "services/blockchain/program_ids.json",
      "services/blockchain/programs/appeals/Cargo.toml",
      "services/blockchain/programs/appeals/src/getrandom_impl.rs",
      "services/blockchain/programs/appeals/src/lib.rs",
      "services/blockchain/programs/appeals/src/lib_improved.rs",
      "services/blockchain/programs/logging/Cargo.toml",
      "services/blockchain/programs/logging/src/getrandom_impl.rs",
      "services/blockchain/programs/logging/src/lib.rs",
      "services/blockchain/programs/quantumagi-core/Cargo.toml",
      "services/blockchain/programs/quantumagi-core/src/advanced_optimizations.rs",
      "services/blockchain/programs/quantumagi-core/src/getrandom_impl.rs",
      "services/blockchain/programs/quantumagi-core/src/lib.rs",
      "services/blockchain/programs/quantumagi-core/src/lib_enhanced.rs",
      "services/blockchain/programs/quantumagi-core/src/lib_improved.rs",
      "services/blockchain/programs/quantumagi-core/src/performance_engine.rs",
      "services/blockchain/programs/quantumagi-core/src/testing_framework.rs",
      "services/blockchain/programs/quantumagi-core/src/transaction_optimizer.rs",
      "services/blockchain/run_tests.js",
      "services/blockchain/rustfmt.toml",
      "services/blockchain/scripts/Cargo.toml",
      "services/blockchain/scripts/advanced_features_demo.py",
      "services/blockchain/scripts/cost_optimization.js",
      "services/blockchain/scripts/cost_optimization.ts",
      "services/blockchain/scripts/demo_end_to_end.py",
      "services/blockchain/scripts/deploy_quantumagi.py",
      "services/blockchain/scripts/deploy_quantumagi.rs",
      "services/blockchain/scripts/deploy_to_devnet.sh",
      "services/blockchain/scripts/deployment_status.sh",
      "services/blockchain/scripts/final_remediation.js",
      "services/blockchain/scripts/final_remediation.ts",
      "services/blockchain/scripts/fix_test_infrastructure.js",
      "services/blockchain/scripts/fix_test_infrastructure.ts",
      "services/blockchain/scripts/generate_program_ids.py",
      "services/blockchain/scripts/generate_program_ids.rs",
      "services/blockchain/scripts/initialize_constitution.py",
      "services/blockchain/scripts/initialize_constitution.rs",
      "services/blockchain/scripts/install_solana_cli.sh",
      "services/blockchain/scripts/key_management.rs",
      "services/blockchain/scripts/key_management.sh",
      "services/blockchain/scripts/run_comprehensive_tests.sh",
      "services/blockchain/scripts/rust_tools_ci_report.json",
      "services/blockchain/scripts/smoke_test.sh",
      "services/blockchain/scripts/test_rust_tools_ci.sh",
      "services/blockchain/scripts/transaction_optimizer.py",
      "services/blockchain/scripts/validate_deployment.rs",
      "services/blockchain/scripts/validate_devnet_deployment.py",
      "services/blockchain/test_advanced_caching_strategy.js",
      "services/blockchain/test_anchor_program_coverage.js",
      "services/blockchain/test_comprehensive_performance_validation.py",
      "services/blockchain/test_concurrent_processing.py",
      "services/blockchain/test_constitutional_compliance_optimization.js",
      "services/blockchain/test_core_services_unit_coverage.py",
      "services/blockchain/test_database_performance_optimization.py",
      "services/blockchain/test_database_performance_simulation.py",
      "services/blockchain/test_demo.js",
      "services/blockchain/test_end_to_end_integration.js",
      "services/blockchain/test_governance_init.js",
      "services/blockchain/test_logging_program.js",
      "services/blockchain/test_pgc_validation.js",
      "services/blockchain/test_policy_synthesis_optimization.js",
      "services/blockchain/test_transaction_costs.js",
      "services/blockchain/tsconfig.json",
      "services/blockchain/validate_quantumagi_deployment.js",
      "services/cli/OPENCODE_INTEGRATION_SUMMARY.md",
      "services/cli/acgs-config.json",
      "services/cli/opencode/.gitignore",
      "services/cli/opencode/AGENTS.md",
      "services/cli/opencode/Dockerfile",
      "services/cli/opencode/README.md",
      "services/cli/opencode/bun.lock",
      "services/cli/opencode/config.schema.json",
      "services/cli/opencode/opencode.json",
      "services/cli/opencode/package.json",
      "services/cli/opencode/script/postinstall.mjs",
      "services/cli/opencode/script/publish.ts",
      "services/cli/opencode/script/schema.ts",
      "services/cli/opencode/src/acgs/index.ts",
      "services/cli/opencode/src/acgs/middleware.ts",
      "services/cli/opencode/src/app/app.ts",
      "services/cli/opencode/src/auth/anthropic.ts",
      "services/cli/opencode/src/auth/copilot.ts",
      "services/cli/opencode/src/auth/github-copilot.ts",
      "services/cli/opencode/src/auth/index.ts",
      "services/cli/opencode/src/bun/index.ts",
      "services/cli/opencode/src/bus/index.ts",
      "services/cli/opencode/src/cli/bootstrap.ts",
      "services/cli/opencode/src/cli/cmd/auth.ts",
      "services/cli/opencode/src/cli/cmd/cmd.ts",
      "services/cli/opencode/src/cli/cmd/debug/file.ts",
      "services/cli/opencode/src/cli/cmd/debug/index.ts",
      "services/cli/opencode/src/cli/cmd/debug/lsp.ts",
      "services/cli/opencode/src/cli/cmd/debug/ripgrep.ts",
      "services/cli/opencode/src/cli/cmd/debug/snapshot.ts",
      "services/cli/opencode/src/cli/cmd/generate.ts",
      "services/cli/opencode/src/cli/cmd/models.ts",
      "services/cli/opencode/src/cli/cmd/run.ts",
      "services/cli/opencode/src/cli/cmd/serve.ts",
      "services/cli/opencode/src/cli/cmd/tui.ts",
      "services/cli/opencode/src/cli/cmd/upgrade.ts",
      "services/cli/opencode/src/cli/error.ts",
      "services/cli/opencode/src/cli/ui.ts",
      "services/cli/opencode/src/config/config.ts",
      "services/cli/opencode/src/config/hooks.ts",
      "services/cli/opencode/src/file/fzf.ts",
      "services/cli/opencode/src/file/index.ts",
      "services/cli/opencode/src/file/ripgrep.ts",
      "services/cli/opencode/src/file/time.ts",
      "services/cli/opencode/src/file/watch.ts",
      "services/cli/opencode/src/flag/flag.ts",
      "services/cli/opencode/src/format/formatter.ts",
      "services/cli/opencode/src/format/index.ts",
      "services/cli/opencode/src/global/index.ts",
      "services/cli/opencode/src/id/id.ts",
      "services/cli/opencode/src/index.ts",
      "services/cli/opencode/src/installation/index.ts",
      "services/cli/opencode/src/lsp/client.ts",
      "services/cli/opencode/src/lsp/index.ts",
      "services/cli/opencode/src/lsp/language.ts",
      "services/cli/opencode/src/lsp/server.ts",
      "services/cli/opencode/src/mcp/index.ts",
      "services/cli/opencode/src/permission/index.ts",
      "services/cli/opencode/src/provider/models-macro.ts",
      "services/cli/opencode/src/provider/models.ts",
      "services/cli/opencode/src/provider/provider.ts",
      "services/cli/opencode/src/provider/transform.ts",
      "services/cli/opencode/src/server/server.ts",
      "services/cli/opencode/src/session/index.ts",
      "services/cli/opencode/src/session/message.ts",
      "services/cli/opencode/src/session/prompt/anthropic.txt",
      "services/cli/opencode/src/session/prompt/anthropic_spoof.txt",
      "services/cli/opencode/src/session/prompt/initialize.txt",
      "services/cli/opencode/src/session/prompt/summarize.txt",
      "services/cli/opencode/src/session/prompt/title.txt",
      "services/cli/opencode/src/session/system.ts",
      "services/cli/opencode/src/share/share.ts",
      "services/cli/opencode/src/snapshot/index.ts",
      "services/cli/opencode/src/storage/storage.ts",
      "services/cli/opencode/src/tool/bash.ts",
      "services/cli/opencode/src/tool/bash.txt",
      "services/cli/opencode/src/tool/edit.ts",
      "services/cli/opencode/src/tool/edit.txt",
      "services/cli/opencode/src/tool/glob.ts",
      "services/cli/opencode/src/tool/glob.txt",
      "services/cli/opencode/src/tool/grep.ts",
      "services/cli/opencode/src/tool/grep.txt",
      "services/cli/opencode/src/tool/ls.ts",
      "services/cli/opencode/src/tool/ls.txt",
      "services/cli/opencode/src/tool/lsp-diagnostics.ts",
      "services/cli/opencode/src/tool/lsp-diagnostics.txt",
      "services/cli/opencode/src/tool/lsp-hover.ts",
      "services/cli/opencode/src/tool/lsp-hover.txt",
      "services/cli/opencode/src/tool/multiedit.ts",
      "services/cli/opencode/src/tool/multiedit.txt",
      "services/cli/opencode/src/tool/patch.ts",
      "services/cli/opencode/src/tool/patch.txt",
      "services/cli/opencode/src/tool/read.ts",
      "services/cli/opencode/src/tool/read.txt",
      "services/cli/opencode/src/tool/task.ts",
      "services/cli/opencode/src/tool/task.txt",
      "services/cli/opencode/src/tool/todo.ts",
      "services/cli/opencode/src/tool/todoread.txt",
      "services/cli/opencode/src/tool/todowrite.txt",
      "services/cli/opencode/src/tool/tool.ts",
      "services/cli/opencode/src/tool/webfetch.ts",
      "services/cli/opencode/src/tool/webfetch.txt",
      "services/cli/opencode/src/tool/websearch.txt",
      "services/cli/opencode/src/tool/write.ts",
      "services/cli/opencode/src/tool/write.txt",
      "services/cli/opencode/src/util/context.ts",
      "services/cli/opencode/src/util/error.ts",
      "services/cli/opencode/src/util/filesystem.ts",
      "services/cli/opencode/src/util/lazy.ts",
      "services/cli/opencode/src/util/log.ts",
      "services/cli/opencode/src/util/scrap.ts",
      "services/cli/opencode/src/util/timeout.ts",
      "services/cli/opencode/sst-env.d.ts",
      "services/cli/opencode/tsconfig.json",
      "services/cli/tui/.gitignore",
      "services/cli/tui/.goreleaser.yml",
      "services/cli/tui/AGENTS.md",
      "services/cli/tui/cmd/opencode/main.go",
      "services/cli/tui/go.mod",
      "services/cli/tui/internal/app/app.go",
      "services/cli/tui/internal/commands/command.go",
      "services/cli/tui/internal/completions/commands.go",
      "services/cli/tui/internal/completions/files-folders.go",
      "services/cli/tui/internal/components/chat/cache.go",
      "services/cli/tui/internal/components/chat/editor.go",
      "services/cli/tui/internal/components/chat/message.go",
      "services/cli/tui/internal/components/chat/messages.go",
      "services/cli/tui/internal/components/commands/commands.go",
      "services/cli/tui/internal/components/dialog/complete.go",
      "services/cli/tui/internal/components/dialog/find.go",
      "services/cli/tui/internal/components/dialog/help.go",
      "services/cli/tui/internal/components/dialog/init.go",
      "services/cli/tui/internal/components/dialog/models.go",
      "services/cli/tui/internal/components/dialog/permission.go",
      "services/cli/tui/internal/components/dialog/session.go",
      "services/cli/tui/internal/components/dialog/theme.go",
      "services/cli/tui/internal/components/diff/diff.go",
      "services/cli/tui/internal/components/fileviewer/fileviewer.go",
      "services/cli/tui/internal/components/list/list.go",
      "services/cli/tui/internal/components/modal/modal.go",
      "services/cli/tui/internal/components/qr/qr.go",
      "services/cli/tui/internal/components/status/status.go",
      "services/cli/tui/internal/components/textarea/memoization.go",
      "services/cli/tui/internal/components/textarea/runeutil.go",
      "services/cli/tui/internal/components/textarea/textarea.go",
      "services/cli/tui/internal/components/toast/toast.go",
      "services/cli/tui/internal/config/config.go",
      "services/cli/tui/internal/image/clipboard_unix.go",
      "services/cli/tui/internal/image/clipboard_windows.go",
      "services/cli/tui/internal/image/images.go",
      "services/cli/tui/internal/layout/flex.go",
      "services/cli/tui/internal/layout/layout.go",
      "services/cli/tui/internal/layout/overlay.go",
      "services/cli/tui/internal/styles/background.go",
      "services/cli/tui/internal/styles/markdown.go",
      "services/cli/tui/internal/styles/styles.go",
      "services/cli/tui/internal/styles/utilities.go",
      "services/cli/tui/internal/theme/loader.go",
      "services/cli/tui/internal/theme/manager.go",
      "services/cli/tui/internal/theme/system.go",
      "services/cli/tui/internal/theme/theme.go",
      "services/cli/tui/internal/theme/themes/ayu.json",
      "services/cli/tui/internal/theme/themes/catppuccin.json",
      "services/cli/tui/internal/theme/themes/cobalt2.json",
      "services/cli/tui/internal/theme/themes/dracula.json",
      "services/cli/tui/internal/theme/themes/everforest.json",
      "services/cli/tui/internal/theme/themes/github.json",
      "services/cli/tui/internal/theme/themes/gruvbox.json",
      "services/cli/tui/internal/theme/themes/kanagawa.json",
      "services/cli/tui/internal/theme/themes/material.json",
      "services/cli/tui/internal/theme/themes/matrix.json",
      "services/cli/tui/internal/theme/themes/monokai.json",
      "services/cli/tui/internal/theme/themes/nord.json",
      "services/cli/tui/internal/theme/themes/one-dark.json",
      "services/cli/tui/internal/theme/themes/opencode.json",
      "services/cli/tui/internal/theme/themes/palenight.json",
      "services/cli/tui/internal/theme/themes/rosepine.json",
      "services/cli/tui/internal/theme/themes/solarized.json",
      "services/cli/tui/internal/theme/themes/synthwave84.json",
      "services/cli/tui/internal/theme/themes/tokyonight.json",
      "services/cli/tui/internal/theme/themes/zenburn.json",
      "services/cli/tui/internal/tui/tui.go",
      "services/cli/tui/internal/util/color.go",
      "services/cli/tui/internal/util/concurrency.go",
      "services/cli/tui/internal/util/file.go",
      "services/cli/tui/internal/util/util.go",
      "services/cli/tui/sdk/.devcontainer/devcontainer.json",
      "services/cli/tui/sdk/.github/workflows/ci.yml",
      "services/cli/tui/sdk/.gitignore",
      "services/cli/tui/sdk/.release-please-manifest.json",
      "services/cli/tui/sdk/.stats.yml",
      "services/cli/tui/sdk/Brewfile",
      "services/cli/tui/sdk/CHANGELOG.md",
      "services/cli/tui/sdk/CONTRIBUTING.md",
      "services/cli/tui/sdk/LICENSE",
      "services/cli/tui/sdk/README.md",
      "services/cli/tui/sdk/SECURITY.md",
      "services/cli/tui/sdk/aliases.go",
      "services/cli/tui/sdk/api.md",
      "services/cli/tui/sdk/app.go",
      "services/cli/tui/sdk/client.go",
      "services/cli/tui/sdk/config.go",
      "services/cli/tui/sdk/event.go",
      "services/cli/tui/sdk/examples/.keep",
      "services/cli/tui/sdk/field.go",
      "services/cli/tui/sdk/file.go",
      "services/cli/tui/sdk/find.go",
      "services/cli/tui/sdk/go.mod",
      "services/cli/tui/sdk/internal/apierror/apierror.go",
      "services/cli/tui/sdk/internal/apiform/encoder.go",
      "services/cli/tui/sdk/internal/apiform/form.go",
      "services/cli/tui/sdk/internal/apiform/tag.go",
      "services/cli/tui/sdk/internal/apijson/decoder.go",
      "services/cli/tui/sdk/internal/apijson/encoder.go",
      "services/cli/tui/sdk/internal/apijson/field.go",
      "services/cli/tui/sdk/internal/apijson/port.go",
      "services/cli/tui/sdk/internal/apijson/registry.go",
      "services/cli/tui/sdk/internal/apijson/tag.go",
      "services/cli/tui/sdk/internal/apiquery/encoder.go",
      "services/cli/tui/sdk/internal/apiquery/query.go",
      "services/cli/tui/sdk/internal/apiquery/tag.go",
      "services/cli/tui/sdk/internal/param/field.go",
      "services/cli/tui/sdk/internal/requestconfig/requestconfig.go",
      "services/cli/tui/sdk/internal/testutil/testutil.go",
      "services/cli/tui/sdk/internal/version.go",
      "services/cli/tui/sdk/option/middleware.go",
      "services/cli/tui/sdk/option/requestoption.go",
      "services/cli/tui/sdk/packages/ssestream/ssestream.go",
      "services/cli/tui/sdk/release-please-config.json",
      "services/cli/tui/sdk/scripts/bootstrap",
      "services/cli/tui/sdk/scripts/format",
      "services/cli/tui/sdk/scripts/lint",
      "services/cli/tui/sdk/scripts/mock",
      "services/cli/tui/sdk/scripts/test",
      "services/cli/tui/sdk/session.go",
      "services/cli/tui/sdk/shared/shared.go",
      "services/contexts/BOUNDED_CONTEXT_MIGRATION_SUMMARY.md",
      "services/contexts/README.md",
      "services/contexts/audit_integrity/domain/entities.py",
      "services/contexts/constitutional_governance/application/amendment_saga.py",
      "services/contexts/constitutional_governance/domain/__init__.py",
      "services/contexts/constitutional_governance/domain/entities.py",
      "services/contexts/constitutional_governance/domain/events.py",
      "services/contexts/constitutional_governance/domain/services.py",
      "services/contexts/constitutional_governance/domain/specifications.py",
      "services/contexts/constitutional_governance/domain/value_objects.py",
      "services/contexts/integration/anti_corruption_layer.py",
      "services/contexts/multi_agent_coordination/api/controllers.py",
      "services/contexts/multi_agent_coordination/api/schemas.py",
      "services/contexts/multi_agent_coordination/application/command_handlers.py",
      "services/contexts/multi_agent_coordination/application/commands.py",
      "services/contexts/multi_agent_coordination/domain/entities.py",
      "services/contexts/multi_agent_coordination/domain/events.py",
      "services/contexts/multi_agent_coordination/domain/value_objects.py",
      "services/contexts/policy_management/domain/entities.py",
      "services/core/agent-hitl/Dockerfile",
      "services/core/agent-hitl/__init__.py",
      "services/core/agent-hitl/main.py",
      "services/core/claude.md",
      "services/core/code-analysis/config/environments/development.env.staging",
      "services/core/code-analysis/Dockerfile",
      "services/core/code-analysis/code_analysis_service/PRIORITY3_VALIDATION_GUIDE.md",
      "services/core/code-analysis/code_analysis_service/app/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/api/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/api/v1/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/api/v1/router.py",
      "services/core/code-analysis/code_analysis_service/app/core/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/core/file_watcher.py",
      "services/core/code-analysis/code_analysis_service/app/core/indexer.py",
      "services/core/code-analysis/code_analysis_service/app/middleware/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/middleware/auth.py",
      "services/core/code-analysis/code_analysis_service/app/middleware/constitutional.py",
      "services/core/code-analysis/code_analysis_service/app/middleware/performance.py",
      "services/core/code-analysis/code_analysis_service/app/models/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/models/schemas.py",
      "services/core/code-analysis/code_analysis_service/app/services/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/services/cache_service.py",
      "services/core/code-analysis/code_analysis_service/app/services/registry_service.py",
      "services/core/code-analysis/code_analysis_service/app/utils/__init__.py",
      "services/core/code-analysis/code_analysis_service/app/utils/constitutional.py",
      "services/core/code-analysis/code_analysis_service/app/utils/logging.py",
      "services/core/code-analysis/code_analysis_service/config/database.py",
      "services/core/code-analysis/code_analysis_service/config/settings.py",
      "services/core/code-analysis/code_analysis_service/deployment_readiness_results.json",
      "services/core/code-analysis/code_analysis_service/deployment_readiness_validation.py",
      "services/core/code-analysis/code_analysis_service/main.py",
      "services/core/code-analysis/code_analysis_service/main_simple.py",
      "services/core/code-analysis/code_analysis_service/requirements.txt",
      "services/core/code-analysis/code_analysis_service/requirements_minimal.txt",
      "services/core/code-analysis/code_analysis_service/run_priority3_validation.py",
      "services/core/code-analysis/code_analysis_service/test_basic.py",
      "services/core/code-analysis/code_analysis_service/test_minimal.py",
      "services/core/code-analysis/code_analysis_service/test_monitoring_setup.py",
      "services/core/code-analysis/code_analysis_service/test_performance_benchmarks.py",
      "services/core/code-analysis/code_analysis_service/test_priority2_validation.py",
      "services/core/code-analysis/code_analysis_service/test_priority3_integration.py",
      "services/core/code-analysis/code_analysis_service/test_server.py",
      "services/core/code-analysis/code_analysis_service/test_startup.py",
      "services/core/code-analysis/code_analysis_service/test_uvicorn_startup.py",
      "services/core/code-analysis/code_analysis_service/validate_test_suite.py",
      "services/core/code-analysis/config/auth-mock.conf",
      "services/core/code-analysis/config/context-mock.conf",
      "services/core/code-analysis/config/prometheus.yml",
      "services/core/code-analysis/config/redis.conf",
      "services/core/code-analysis/database/migrations/001_initial_schema.sql",
      "services/core/code-analysis/database/migrations/001_simple_schema.sql",
      "services/core/code-analysis/database/migrations/002_indexes.sql",
      "services/core/code-analysis/deploy_staging.py",
      "services/core/code-analysis/docker-compose.yml",
      "services/core/code-analysis/grafana_dashboard_config.json",
      "services/core/code-analysis/log_aggregation_config.json",
      "services/core/code-analysis/operational_runbook.md",
      "services/core/code-analysis/phase3_performance_test.py",
      "services/core/code-analysis/phase4_integration_examples_results.json",
      "services/core/code-analysis/phase4_service_integration_examples.py",
      "services/core/code-analysis/phase5_monitoring_setup_results.json",
      "services/core/code-analysis/phase5_production_monitoring_setup.py",
      "services/core/code-analysis/prometheus_alerting_rules.yml",
      "services/core/consensus_engine/__init__.py",
      "services/core/consensus_engine/consensus_mechanisms.py",
      "services/core/constitutional-ai/__init__.py",
      "services/core/constitutional-ai/ac_service/config/environments/developmentconfig/environments/example.env",
      "services/core/constitutional-ai/ac_service/Dockerfile",
      "services/core/constitutional-ai/ac_service/Dockerfile.prod",
      "services/core/constitutional-ai/ac_service/Dockerfile.production",
      "services/core/constitutional-ai/ac_service/ENHANCED_GOVERNANCE_README.md",
      "services/core/constitutional-ai/ac_service/PRODUCTION_DEPLOYMENT_GUIDE.md",
      "services/core/constitutional-ai/ac_service/README.md",
      "services/core/constitutional-ai/ac_service/README_PRODUCTION.md",
      "services/core/constitutional-ai/ac_service/__init__.py",
      "services/core/constitutional-ai/ac_service/acge_single_model_service.py",
      "services/core/constitutional-ai/ac_service/alembic/versions/005_add_qec_conflict_resolution_fields.py",
      "services/core/constitutional-ai/ac_service/app/__init__.py",
      "services/core/constitutional-ai/ac_service/app/api/__init__.py",
      "services/core/constitutional-ai/ac_service/app/api/endpoints.py",
      "services/core/constitutional-ai/ac_service/app/api/hitl_sampling.py",
      "services/core/constitutional-ai/ac_service/app/api/public_consultation.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/.gitkeep",
      "services/core/constitutional-ai/ac_service/app/api/v1/__init__.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/collective_constitutional_ai.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/conflict_resolution.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/constitutional_council.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/constitutional_validation.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/dashboard_websocket.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/democratic_governance.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/enhanced_governance.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/fidelity_monitor.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/principles.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/stakeholder_engagement.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/voting.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/wina_constitutional_updates.py",
      "services/core/constitutional-ai/ac_service/app/api/v1/workflows.py",
      "services/core/constitutional-ai/ac_service/app/cache_manager.py",
      "services/core/constitutional-ai/ac_service/app/compliance/__init__.py",
      "services/core/constitutional-ai/ac_service/app/compliance/calculator.py",
      "services/core/constitutional-ai/ac_service/app/compliance/metrics.py",
      "services/core/constitutional-ai/ac_service/app/config/__init__.py",
      "services/core/constitutional-ai/ac_service/app/config/app_config.py",
      "services/core/constitutional-ai/ac_service/app/core/.gitkeep",
      "services/core/constitutional-ai/ac_service/app/core/__init__.py",
      "services/core/constitutional-ai/ac_service/app/core/amendment_state_machine.py",
      "services/core/constitutional-ai/ac_service/app/core/auth.py",
      "services/core/constitutional-ai/ac_service/app/core/constitutional_council_scalability.py",
      "services/core/constitutional-ai/ac_service/app/core/cryptographic_signing.py",
      "services/core/constitutional-ai/ac_service/app/core/domain_context_manager.py",
      "services/core/constitutional-ai/ac_service/app/crud.py",
      "services/core/constitutional-ai/ac_service/app/framework/__init__.py",
      "services/core/constitutional-ai/ac_service/app/framework/integration.py",
      "services/core/constitutional-ai/ac_service/app/integrations/polis_integration.py",
      "services/core/constitutional-ai/ac_service/app/main.py",
      "services/core/constitutional-ai/ac_service/app/middleware/__init__.py",
      "services/core/constitutional-ai/ac_service/app/middleware/enhanced_security.py",
      "services/core/constitutional-ai/ac_service/app/models.py",
      "services/core/constitutional-ai/ac_service/app/monitoring/scalability_metrics.py",
      "services/core/constitutional-ai/ac_service/app/schemas.py",
      "services/core/constitutional-ai/ac_service/app/sentry_config.py",
      "services/core/constitutional-ai/ac_service/app/services/advanced_democratic_participation.py",
      "services/core/constitutional-ai/ac_service/app/services/automated_resolution_engine.py",
      "services/core/constitutional-ai/ac_service/app/services/collective_constitutional_ai.py",
      "services/core/constitutional-ai/ac_service/app/services/conflict_audit_system.py",
      "services/core/constitutional-ai/ac_service/app/services/conflict_resolution_orchestrator.py",
      "services/core/constitutional-ai/ac_service/app/services/constitutional_council_dashboard.py",
      "services/core/constitutional-ai/ac_service/app/services/constitutional_validation_service.py",
      "services/core/constitutional-ai/ac_service/app/services/democratic_governance.py",
      "services/core/constitutional-ai/ac_service/app/services/enhanced_constitutional_reward.py",
      "services/core/constitutional-ai/ac_service/app/services/enhanced_governance_framework.py",
      "services/core/constitutional-ai/ac_service/app/services/governance_monitoring.py",
      "services/core/constitutional-ai/ac_service/app/services/hitl_cross_service_integration.py",
      "services/core/constitutional-ai/ac_service/app/services/human_escalation_system.py",
      "services/core/constitutional-ai/ac_service/app/services/human_in_the_loop_sampler.py",
      "services/core/constitutional-ai/ac_service/app/services/hybrid_rlhf_constitutional_ai.py",
      "services/core/constitutional-ai/ac_service/app/services/intelligent_conflict_detector.py",
      "services/core/constitutional-ai/ac_service/app/services/llm_as_judge_framework.py",
      "services/core/constitutional-ai/ac_service/app/services/production_governance_framework.py",
      "services/core/constitutional-ai/ac_service/app/services/public_consultation_service.py",
      "services/core/constitutional-ai/ac_service/app/services/qec_conflict_resolver.py",
      "services/core/constitutional-ai/ac_service/app/services/stakeholder_engagement.py",
      "services/core/constitutional-ai/ac_service/app/services/voting_client.py",
      "services/core/constitutional-ai/ac_service/app/services/voting_mechanism.py",
      "services/core/constitutional-ai/ac_service/app/validation/__init__.py",
      "services/core/constitutional-ai/ac_service/app/validation/core.py",
      "services/core/constitutional-ai/ac_service/app/workflows/__init__.py",
      "services/core/constitutional-ai/ac_service/app/workflows/constitutional_council_graph.py",
      "services/core/constitutional-ai/ac_service/app/workflows/democratic_governance.py",
      "services/core/constitutional-ai/ac_service/app/workflows/workflow_manager.py",
      "services/core/constitutional-ai/ac_service/config/auth_config.yaml",
      "services/core/constitutional-ai/ac_service/main.py",
      "services/core/constitutional-ai/ac_service/models.py",
      "services/core/constitutional-ai/ac_service/monitoring/prometheus-alerts.yml",
      "services/core/constitutional-ai/ac_service/openapi.yaml",
      "services/core/constitutional-ai/ac_service/requirements-production.txt",
      "services/core/constitutional-ai/ac_service/requirements.txt",
      "services/core/constitutional-ai/ac_service/test_enhanced_governance_simple.py",
      "services/core/constitutional-ai/ac_service/test_stakeholder_engagement.py",
      "services/core/constitutional-ai/ac_service/test_stakeholder_simple.py",
      "services/core/constitutional-ai/ac_service/validate_stakeholder_system.py",
      "services/core/constitutional-ai/ac_service_standardized/README.md",
      "services/core/constitutional-ai/ac_service_standardized/api/__init__.py",
      "services/core/constitutional-ai/ac_service_standardized/api/endpoints.py",
      "services/core/constitutional-ai/ac_service_standardized/api/hitl_sampling.py",
      "services/core/constitutional-ai/ac_service_standardized/api/public_consultation.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/.gitkeep",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/__init__.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/collective_constitutional_ai.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/conflict_resolution.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/constitutional_council.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/constitutional_validation.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/dashboard_websocket.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/democratic_governance.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/fidelity_monitor.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/principles.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/stakeholder_engagement.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/voting.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/wina_constitutional_updates.py",
      "services/core/constitutional-ai/ac_service_standardized/api/v1/workflows.py",
      "services/core/constitutional-ai/ac_service_standardized/config.py",
      "services/core/constitutional-ai/ac_service_standardized/example_usage.py",
      "services/core/constitutional-ai/ac_service_standardized/main.py",
      "services/core/constitutional-ai/ac_service_standardized/models.py",
      "services/core/constitutional-ai/ac_service_standardized/schemas.py",
      "services/core/constitutional-ai/claude.md",
      "services/core/constitutional-ai/src/__init__.py",
      "services/core/constitutional-core/CONSTITUTIONAL_CONSOLIDATION.md",
      "services/core/constitutional-core/README.md",
      "services/core/constitutional-core/__init__.py",
      "services/core/constitutional-core/app/__init__.py",
      "services/core/constitutional-core/app/fast_constitutional_validator.py",
      "services/core/constitutional-core/app/main.py",
      "services/core/constitutional-core/app/main_simple.py",
      "services/core/constitutional-core/requirements.txt",
      "services/core/context/__init__.py",
      "services/core/context/context_service/README.md",
      "services/core/context/context_service/__init__.py",
      "services/core/context/context_service/app/__init__.py",
      "services/core/context/context_service/app/core/__init__.py",
      "services/core/context/context_service/app/core/context_engine.py",
      "services/core/context/context_service/app/core/embedding_service.py",
      "services/core/context/context_service/app/core/storage_manager.py",
      "services/core/context/context_service/app/core/vector_store.py",
      "services/core/context/context_service/app/models/__init__.py",
      "services/core/context/context_service/app/models/context_models.py",
      "services/core/context/context_service/app/models/storage_models.py",
      "services/core/context/context_service/app/schemas.py",
      "services/core/context/context_service/main.py",
      "services/core/evolutionary-computation/Dockerfile",
      "services/core/evolutionary-computation/README.md",
      "services/core/evolutionary-computation/__init__.py",
      "services/core/evolutionary-computation/app/__init__.py",
      "services/core/evolutionary-computation/app/api/__init__.py",
      "services/core/evolutionary-computation/app/api/v1/__init__.py",
      "services/core/evolutionary-computation/app/api/v1/advanced_wina_oversight.py",
      "services/core/evolutionary-computation/app/api/v1/alphaevolve.py",
      "services/core/evolutionary-computation/app/api/v1/evolution.py",
      "services/core/evolutionary-computation/app/api/v1/monitoring.py",
      "services/core/evolutionary-computation/app/api/v1/oversight.py",
      "services/core/evolutionary-computation/app/api/v1/reporting.py",
      "services/core/evolutionary-computation/app/api/v1/wina_oversight.py",
      "services/core/evolutionary-computation/app/cache_manager.py",
      "services/core/evolutionary-computation/app/core/__init__.py",
      "services/core/evolutionary-computation/app/core/constitutional_validator.py",
      "services/core/evolutionary-computation/app/core/evolution_engine.py",
      "services/core/evolutionary-computation/app/core/wina_oversight_coordinator.py",
      "services/core/evolutionary-computation/app/main.py",
      "services/core/evolutionary-computation/app/middleware/__init__.py",
      "services/core/evolutionary-computation/app/middleware/constitutional.py",
      "services/core/evolutionary-computation/app/middleware/enhanced_security.py",
      "services/core/evolutionary-computation/app/models/__init__.py",
      "services/core/evolutionary-computation/app/models/evolution.py",
      "services/core/evolutionary-computation/app/models/oversight.py",
      "services/core/evolutionary-computation/app/schemas/__init__.py",
      "services/core/evolutionary-computation/app/schemas/evolution.py",
      "services/core/evolutionary-computation/app/schemas/oversight.py",
      "services/core/evolutionary-computation/app/schemas/responses.py",
      "services/core/evolutionary-computation/app/services/__init__.py",
      "services/core/evolutionary-computation/app/services/ac_client.py",
      "services/core/evolutionary-computation/app/services/data_integration_pipeline.py",
      "services/core/evolutionary-computation/app/services/evolution_service.py",
      "services/core/evolutionary-computation/app/services/fitness_service.py",
      "services/core/evolutionary-computation/app/services/gs_client.py",
      "services/core/evolutionary-computation/app/services/hitl_service.py",
      "services/core/evolutionary-computation/app/services/pgc_client.py",
      "services/core/evolutionary-computation/app/wina/__init__.py",
      "services/core/evolutionary-computation/app/wina/config.py",
      "services/core/evolutionary-computation/app/wina/constitutional_integration.py",
      "services/core/evolutionary-computation/app/wina/continuous_learning.py",
      "services/core/evolutionary-computation/app/wina/core.py",
      "services/core/evolutionary-computation/app/wina/gating.py",
      "services/core/evolutionary-computation/app/wina/metrics.py",
      "services/core/evolutionary-computation/app/wina/performance_monitoring.py",
      "services/core/evolutionary-computation/config/auth_config.yaml",
      "services/core/evolutionary-computation/deploy.sh",
      "services/core/evolutionary-computation/ec_service/evolution_engine.py",
      "services/core/evolutionary-computation/ec_service/evolution_oversight_engine.py",
      "services/core/evolutionary-computation/ec_service/health_monitoring.py",
      "services/core/evolutionary-computation/ec_service/human_approval_workflow.py",
      "services/core/evolutionary-computation/ec_service/main.py",
      "services/core/evolutionary-computation/ec_service/security_architecture.py",
      "services/core/evolutionary-computation/ec_service_standardized/README.md",
      "services/core/evolutionary-computation/ec_service_standardized/api/v1/routes.py",
      "services/core/evolutionary-computation/ec_service_standardized/config.py",
      "services/core/evolutionary-computation/ec_service_standardized/example_usage.py",
      "services/core/evolutionary-computation/ec_service_standardized/main.py",
      "services/core/evolutionary-computation/ec_service_standardized/models.py",
      "services/core/evolutionary-computation/ec_service_standardized/schemas.py",
      "services/core/evolutionary-computation/evolutionary_algorithms.py",
      "services/core/evolutionary-computation/main.py",
      "services/core/evolutionary-computation/requirements.txt",
      "services/core/evolutionary-computation/src/__init__.py",
      "services/core/evolutionary-computation/unified_main.py",
      "services/core/formal-verification/ENHANCED_FV_SERVICE_COMPLETION_REPORT.md",
      "services/core/formal-verification/__init__.py",
      "services/core/formal-verification/advanced_proof_engine.py",
      "services/core/formal-verification/app/core/config.py",
      "services/core/formal-verification/app/core/simple_config.py",
      "services/core/formal-verification/app/services/z3_solver.py",
      "services/core/formal-verification/claude.md",
      "services/core/formal-verification/config/auth_config.yaml",
      "services/core/formal-verification/fv_service/config/environments/developmentconfig/environments/example.env",
      "services/core/formal-verification/fv_service/Dockerfile",
      "services/core/formal-verification/fv_service/Dockerfile.prod",
      "services/core/formal-verification/fv_service/Dockerfile.staging",
      "services/core/formal-verification/fv_service/README.md",
      "services/core/formal-verification/fv_service/__init__.py",
      "services/core/formal-verification/fv_service/acge_formal_verification_service.py",
      "services/core/formal-verification/fv_service/app/__init__.py",
      "services/core/formal-verification/fv_service/app/api/__init__.py",
      "services/core/formal-verification/fv_service/app/api/v1/.gitkeep",
      "services/core/formal-verification/fv_service/app/api/v1/__init__.py",
      "services/core/formal-verification/fv_service/app/api/v1/cross_domain_testing.py",
      "services/core/formal-verification/fv_service/app/api/v1/formal_verification.py",
      "services/core/formal-verification/fv_service/app/api/v1/proof_pipeline.py",
      "services/core/formal-verification/fv_service/app/api/v1/verification.py",
      "services/core/formal-verification/fv_service/app/api/v1/verify.py",
      "services/core/formal-verification/fv_service/app/cache_manager.py",
      "services/core/formal-verification/fv_service/app/core/.gitkeep",
      "services/core/formal-verification/fv_service/app/core/__init__.py",
      "services/core/formal-verification/fv_service/app/core/adversarial_robustness_tester.py",
      "services/core/formal-verification/fv_service/app/core/auth.py",
      "services/core/formal-verification/fv_service/app/core/bias_detector.py",
      "services/core/formal-verification/fv_service/app/core/constitutional_verification_engine.py",
      "services/core/formal-verification/fv_service/app/core/cross_domain_testing_engine.py",
      "services/core/formal-verification/fv_service/app/core/enhanced_multi_model_validation.py",
      "services/core/formal-verification/fv_service/app/core/parallel_validation_pipeline.py",
      "services/core/formal-verification/fv_service/app/core/policy_smt_compiler.py",
      "services/core/formal-verification/fv_service/app/core/proof_obligations.py",
      "services/core/formal-verification/fv_service/app/core/proof_verification_pipeline.py",
      "services/core/formal-verification/fv_service/app/core/safety_conflict_checker.py",
      "services/core/formal-verification/fv_service/app/core/smt_solver_integration.py",
      "services/core/formal-verification/fv_service/app/core/tiered_validation.py",
      "services/core/formal-verification/fv_service/app/core/verification_completeness_tester.py",
      "services/core/formal-verification/fv_service/app/core/verification_logic.py",
      "services/core/formal-verification/fv_service/app/middleware/__init__.py",
      "services/core/formal-verification/fv_service/app/middleware/enhanced_security.py",
      "services/core/formal-verification/fv_service/app/models/__init__.py",
      "services/core/formal-verification/fv_service/app/models/constitutional.py",
      "services/core/formal-verification/fv_service/app/models/cross_domain_models.py",
      "services/core/formal-verification/fv_service/app/models/smt.py",
      "services/core/formal-verification/fv_service/app/models/verification.py",
      "services/core/formal-verification/fv_service/app/schemas.py",
      "services/core/formal-verification/fv_service/app/services/.gitkeep",
      "services/core/formal-verification/fv_service/app/services/__init__.py",
      "services/core/formal-verification/fv_service/app/services/ac_client.py",
      "services/core/formal-verification/fv_service/app/services/formal_verification_service.py",
      "services/core/formal-verification/fv_service/app/services/integrity_client.py",
      "services/core/formal-verification/fv_service/app/services/z3_solver.py",
      "services/core/formal-verification/fv_service/formal_verification_engine.py",
      "services/core/formal-verification/fv_service/main.py",
      "services/core/formal-verification/fv_service/models.py",
      "services/core/formal-verification/fv_service/requirements.txt",
      "services/core/formal-verification/services/core/formal-verification/app/core/config.py",
      "services/core/formal-verification/simple_fv_main.py",
      "services/core/formal-verification/src/__init__.py",
      "services/core/governance-engine/Dockerfile",
      "services/core/governance-engine/MIGRATION.md",
      "services/core/governance-engine/README.md",
      "services/core/governance-engine/__init__.py",
      "services/core/governance-engine/app/__init__.py",
      "services/core/governance-engine/app/api/__init__.py",
      "services/core/governance-engine/app/api/v1/__init__.py",
      "services/core/governance-engine/app/core/synthesis/policy_adapter.py",
      "services/core/governance-engine/app/core/synthesis/synthesis_engine.py",
      "services/core/governance-engine/app/main.py",
      "services/core/governance-engine/config/service_config.py",
      "services/core/governance-engine/requirements.txt",
      "services/core/governance-synthesis/__init__.py",
      "services/core/governance-synthesis/advanced_opa_engine.py",
      "services/core/governance-synthesis/gs_service/config/environments/developmentconfig/environments/example.env",
      "services/core/governance-synthesis/gs_service/Dockerfile",
      "services/core/governance-synthesis/gs_service/Dockerfile.prod",
      "services/core/governance-synthesis/gs_service/Dockerfile.staging",
      "services/core/governance-synthesis/gs_service/README.md",
      "services/core/governance-synthesis/gs_service/README_ENHANCED_GOVERNANCE.md",
      "services/core/governance-synthesis/gs_service/__init__.py",
      "services/core/governance-synthesis/gs_service/app/__init__.py",
      "services/core/governance-synthesis/gs_service/app/api/__init__.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/__init__.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/alphaevolve_integration.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/apgf_endpoints.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_reports.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/constitutional_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/enhanced_multi_model.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/enhanced_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/fidelity_monitoring_websocket.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/governance_workflows.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/mab_optimization.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/multi_model_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/performance_monitoring.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/phase2_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/phase_a3_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/policy_management.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/qec_error_correction.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/reliability_metrics.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/synthesize.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/violation_management.py",
      "services/core/governance-synthesis/gs_service/app/api/v1/wina_rego_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/cache_manager.py",
      "services/core/governance-synthesis/gs_service/app/config/opa_config.py",
      "services/core/governance-synthesis/gs_service/app/core/__init__.py",
      "services/core/governance-synthesis/gs_service/app/core/ab_testing_framework.py",
      "services/core/governance-synthesis/gs_service/app/core/auth.py",
      "services/core/governance-synthesis/gs_service/app/core/bias_detection_mitigation.py",
      "services/core/governance-synthesis/gs_service/app/core/conservative_linucb.py",
      "services/core/governance-synthesis/gs_service/app/core/constitutional_council_scalability.py",
      "services/core/governance-synthesis/gs_service/app/core/constitutional_prompting.py",
      "services/core/governance-synthesis/gs_service/app/core/contextual_analyzer.py",
      "services/core/governance-synthesis/gs_service/app/core/datalog_templates.py",
      "services/core/governance-synthesis/gs_service/app/core/distributed_policy_cache.py",
      "services/core/governance-synthesis/gs_service/app/core/enhanced_constitutional_analyzer.py",
      "services/core/governance-synthesis/gs_service/app/core/federated_llm_ensemble.py",
      "services/core/governance-synthesis/gs_service/app/core/heterogeneous_validator.py",
      "services/core/governance-synthesis/gs_service/app/core/llm_circuit_breaker.py",
      "services/core/governance-synthesis/gs_service/app/core/llm_integration.py",
      "services/core/governance-synthesis/gs_service/app/core/llm_reliability_framework.py",
      "services/core/governance-synthesis/gs_service/app/core/mab_integration.py",
      "services/core/governance-synthesis/gs_service/app/core/mab_prompt_optimizer.py",
      "services/core/governance-synthesis/gs_service/app/core/multi_model_coordinator.py",
      "services/core/governance-synthesis/gs_service/app/core/nvidia_qwen_client.py",
      "services/core/governance-synthesis/gs_service/app/core/ollama_client.py",
      "services/core/governance-synthesis/gs_service/app/core/opa_integration.py",
      "services/core/governance-synthesis/gs_service/app/core/performance_optimizer.py",
      "services/core/governance-synthesis/gs_service/app/core/performance_validation.py",
      "services/core/governance-synthesis/gs_service/app/core/phase_a3_multi_model_consensus.py",
      "services/core/governance-synthesis/gs_service/app/core/qec_enhanced_synthesizer.py",
      "services/core/governance-synthesis/gs_service/app/core/rule_generator.py",
      "services/core/governance-synthesis/gs_service/app/core/sliding_window_ucb.py",
      "services/core/governance-synthesis/gs_service/app/core/violation_config.py",
      "services/core/governance-synthesis/gs_service/app/core/wina_llm_integration.py",
      "services/core/governance-synthesis/gs_service/app/core/wina_rego_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/crud_gs.py",
      "services/core/governance-synthesis/gs_service/app/main.py",
      "services/core/governance-synthesis/gs_service/app/middleware/__init__.py",
      "services/core/governance-synthesis/gs_service/app/middleware/enhanced_security.py",
      "services/core/governance-synthesis/gs_service/app/models/mab_models.py",
      "services/core/governance-synthesis/gs_service/app/models/reliability_models.py",
      "services/core/governance-synthesis/gs_service/app/performance_optimizer.py",
      "services/core/governance-synthesis/gs_service/app/schemas.py",
      "services/core/governance-synthesis/gs_service/app/security/adversarial_defenses.py",
      "services/core/governance-synthesis/gs_service/app/services/__init__.py",
      "services/core/governance-synthesis/gs_service/app/services/ac_client.py",
      "services/core/governance-synthesis/gs_service/app/services/advanced_cache.py",
      "services/core/governance-synthesis/gs_service/app/services/alphaevolve_bridge.py",
      "services/core/governance-synthesis/gs_service/app/services/cache_manager.py",
      "services/core/governance-synthesis/gs_service/app/services/constitutional_reporting_service.py",
      "services/core/governance-synthesis/gs_service/app/services/enhanced_governance_synthesis.py",
      "services/core/governance-synthesis/gs_service/app/services/enhanced_multi_model_validation.py",
      "services/core/governance-synthesis/gs_service/app/services/fairness_evaluation_framework.py",
      "services/core/governance-synthesis/gs_service/app/services/federated_learning_orchestrator.py",
      "services/core/governance-synthesis/gs_service/app/services/fv_client.py",
      "services/core/governance-synthesis/gs_service/app/services/groq_tensor_service.py",
      "services/core/governance-synthesis/gs_service/app/services/integrity_client.py",
      "services/core/governance-synthesis/gs_service/app/services/lipschitz_estimator.py",
      "services/core/governance-synthesis/gs_service/app/services/monitoring_service.py",
      "services/core/governance-synthesis/gs_service/app/services/performance_monitor.py",
      "services/core/governance-synthesis/gs_service/app/services/policy_validator.py",
      "services/core/governance-synthesis/gs_service/app/services/qec_error_correction_service.py",
      "services/core/governance-synthesis/gs_service/app/services/security_compliance.py",
      "services/core/governance-synthesis/gs_service/app/services/stakeholder_engagement.py",
      "services/core/governance-synthesis/gs_service/app/services/violation_audit_service.py",
      "services/core/governance-synthesis/gs_service/app/services/violation_detection_service.py",
      "services/core/governance-synthesis/gs_service/app/services/violation_escalation_service.py",
      "services/core/governance-synthesis/gs_service/app/shared/metrics.py",
      "services/core/governance-synthesis/gs_service/app/validators/__init__.py",
      "services/core/governance-synthesis/gs_service/app/validators/gemini_validators.py",
      "services/core/governance-synthesis/gs_service/app/wina/__init__.py",
      "services/core/governance-synthesis/gs_service/app/wina/core.py",
      "services/core/governance-synthesis/gs_service/app/wina/gating.py",
      "services/core/governance-synthesis/gs_service/app/wina/models.py",
      "services/core/governance-synthesis/gs_service/app/wina/svd_utils.py",
      "services/core/governance-synthesis/gs_service/app/workflows/__init__.py",
      "services/core/governance-synthesis/gs_service/app/workflows/multi_model_manager.py",
      "services/core/governance-synthesis/gs_service/app/workflows/phase_a3_governance_orchestrator.py",
      "services/core/governance-synthesis/gs_service/app/workflows/policy_synthesis_workflow.py",
      "services/core/governance-synthesis/gs_service/app/workflows/structured_output_models.py",
      "services/core/governance-synthesis/gs_service/config/auth_config.yaml",
      "services/core/governance-synthesis/gs_service/main.py",
      "services/core/governance-synthesis/gs_service/models.py",
      "services/core/governance-synthesis/gs_service/policies/accountability_governance.rego",
      "services/core/governance-synthesis/gs_service/policies/agent_lifecycle_governance.rego",
      "services/core/governance-synthesis/gs_service/policies/constitutional_principles.rego",
      "services/core/governance-synthesis/gs_service/policies/data_governance.rego",
      "services/core/governance-synthesis/gs_service/policies/evolutionary_governance.rego",
      "services/core/governance-synthesis/gs_service/policies/fairness_governance.rego",
      "services/core/governance-synthesis/gs_service/policies/governance_compliance.rego",
      "services/core/governance-synthesis/gs_service/policies/human_dignity_governance.rego",
      "services/core/governance-synthesis/gs_service/policies/multi_tenant_security.rego",
      "services/core/governance-synthesis/gs_service/policies/policy_index.rego",
      "services/core/governance-synthesis/gs_service/policies/policy_synthesis.rego",
      "services/core/governance-synthesis/gs_service/policies/security_compliance.rego",
      "services/core/governance-synthesis/gs_service/policies/transparency_governance.rego",
      "services/core/governance-synthesis/gs_service/requirements.txt",
      "services/core/governance-synthesis/gs_service/scripts/chaos_testing_framework.py",
      "services/core/governance-synthesis/gs_service/start_minimal.py",
      "services/core/governance-synthesis/gs_service_standardized/README.md",
      "services/core/governance-synthesis/gs_service_standardized/api/__init__.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/__init__.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/alphaevolve_integration.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/apgf_endpoints.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_reports.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/constitutional_synthesis.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/enhanced_multi_model.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/enhanced_synthesis.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/fidelity_monitoring_websocket.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/governance_workflows.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/mab_optimization.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/multi_model_synthesis.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/performance_monitoring.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/phase2_synthesis.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/phase_a3_synthesis.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/policy_management.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/qec_error_correction.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/reliability_metrics.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/synthesize.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/violation_management.py",
      "services/core/governance-synthesis/gs_service_standardized/api/v1/wina_rego_synthesis.py",
      "services/core/governance-synthesis/gs_service_standardized/config.py",
      "services/core/governance-synthesis/gs_service_standardized/example_usage.py",
      "services/core/governance-synthesis/gs_service_standardized/main.py",
      "services/core/governance-synthesis/gs_service_standardized/models.py",
      "services/core/governance-synthesis/gs_service_standardized/schemas.py",
      "services/core/governance-synthesis/opa_client.py",
      "services/core/governance-synthesis/src/__init__.py",
      "services/core/multi_agent_coordinator/__init__.py",
      "services/core/multi_agent_coordinator/app/sentry_agent_monitoring.py",
      "services/core/multi_agent_coordinator/coordinator_agent.py",
      "services/core/multi_agent_coordinator/performance_integration.py",
      "services/core/policy-governance/__init__.py",
      "services/core/policy-governance/app/cache_manager.py",
      "services/core/policy-governance/app/exceptions.py",
      "services/core/policy-governance/chaos-testing/kubernetes_chaos_framework.py",
      "services/core/policy-governance/governance_decision_engine.py",
      "services/core/policy-governance/k8s/hpa-autoscaling.yaml",
      "services/core/policy-governance/monitoring/grafana-dashboard.json",
      "services/core/policy-governance/pgc_service/config/environments/developmentconfig/environments/example.env",
      "services/core/policy-governance/pgc_service/Dockerfile",
      "services/core/policy-governance/pgc_service/Dockerfile.prod",
      "services/core/policy-governance/pgc_service/Dockerfile.staging",
      "services/core/policy-governance/pgc_service/README.md",
      "services/core/policy-governance/pgc_service/__init__.py",
      "services/core/policy-governance/pgc_service/app/__init__.py",
      "services/core/policy-governance/pgc_service/app/algorithms/wina_optimizer.py",
      "services/core/policy-governance/pgc_service/app/api/__init__.py",
      "services/core/policy-governance/pgc_service/app/api/v1/__init__.py",
      "services/core/policy-governance/pgc_service/app/api/v1/alphaevolve_enforcement.py",
      "services/core/policy-governance/pgc_service/app/api/v1/enforcement.py",
      "services/core/policy-governance/pgc_service/app/api/v1/governance_workflows.py",
      "services/core/policy-governance/pgc_service/app/api/v1/incremental_compilation.py",
      "services/core/policy-governance/pgc_service/app/api/v1/quantum_enforcement.py",
      "services/core/policy-governance/pgc_service/app/api/v1/ultra_low_latency.py",
      "services/core/policy-governance/pgc_service/app/config/service_config.py",
      "services/core/policy-governance/pgc_service/app/core/__init__.py",
      "services/core/policy-governance/pgc_service/app/core/auth.py",
      "services/core/policy-governance/pgc_service/app/core/constitutional_hash_validator.py",
      "services/core/policy-governance/pgc_service/app/core/database.py",
      "services/core/policy-governance/pgc_service/app/core/datalog_engine.py",
      "services/core/policy-governance/pgc_service/app/core/federated_llm_ensemble.py",
      "services/core/policy-governance/pgc_service/app/core/hardware_acceleration_manager.py",
      "services/core/policy-governance/pgc_service/app/core/human_review_system.py",
      "services/core/policy-governance/pgc_service/app/core/incremental_compiler.py",
      "services/core/policy-governance/pgc_service/app/core/limiter.py",
      "services/core/policy-governance/pgc_service/app/core/manifest_manager.py",
      "services/core/policy-governance/pgc_service/app/core/metrics.py",
      "services/core/policy-governance/pgc_service/app/core/opa_bundle_manager.py",
      "services/core/policy-governance/pgc_service/app/core/opa_client.py",
      "services/core/policy-governance/pgc_service/app/core/policy_format_router.py",
      "services/core/policy-governance/pgc_service/app/core/policy_manager.py",
      "services/core/policy-governance/pgc_service/app/core/policy_synthesis_engine.py",
      "services/core/policy-governance/pgc_service/app/core/proactive_fairness_generator.py",
      "services/core/policy-governance/pgc_service/app/core/rag_integration.py",
      "services/core/policy-governance/pgc_service/app/core/rag_opa_integration.py",
      "services/core/policy-governance/pgc_service/app/core/rag_rule_generator.py",
      "services/core/policy-governance/pgc_service/app/core/real_database.py",
      "services/core/policy-governance/pgc_service/app/core/realtime_compliance_engine.py",
      "services/core/policy-governance/pgc_service/app/core/redis_cache_manager.py",
      "services/core/policy-governance/pgc_service/app/core/secure_execution.py",
      "services/core/policy-governance/pgc_service/app/core/ultra_low_latency_optimizer.py",
      "services/core/policy-governance/pgc_service/app/core/wina_enforcement_optimizer.py",
      "services/core/policy-governance/pgc_service/app/core/wina_optimization.py",
      "services/core/policy-governance/pgc_service/app/core/wina_policy_compiler.py",
      "services/core/policy-governance/pgc_service/app/main.py",
      "services/core/policy-governance/pgc_service/app/main_enhanced.py",
      "services/core/policy-governance/pgc_service/app/middleware/__init__.py",
      "services/core/policy-governance/pgc_service/app/middleware/constitutional_validation.py",
      "services/core/policy-governance/pgc_service/app/middleware/enhanced_security.py",
      "services/core/policy-governance/pgc_service/app/models/constitutional_principles.py",
      "services/core/policy-governance/pgc_service/app/models/policy_models.py",
      "services/core/policy-governance/pgc_service/app/monitoring/acgs_pgp_metrics.py",
      "services/core/policy-governance/pgc_service/app/monitoring/enterprise_metrics.py",
      "services/core/policy-governance/pgc_service/app/performance_optimizer.py",
      "services/core/policy-governance/pgc_service/app/schemas.py",
      "services/core/policy-governance/pgc_service/app/services/__init__.py",
      "services/core/policy-governance/pgc_service/app/services/advanced_cache.py",
      "services/core/policy-governance/pgc_service/app/services/fv_client.py",
      "services/core/policy-governance/pgc_service/app/services/integrity_client.py",
      "services/core/policy-governance/pgc_service/app/services/qpe_client.py",
      "services/core/policy-governance/pgc_service/app/telemetry.py",
      "services/core/policy-governance/pgc_service/config/auth_config.yaml",
      "services/core/policy-governance/pgc_service/config/performance_optimization.yaml",
      "services/core/policy-governance/pgc_service/docs/constitutional_hash_validation.md",
      "services/core/policy-governance/pgc_service/k8s/service-mesh.yaml",
      "services/core/policy-governance/pgc_service/main.py",
      "services/core/policy-governance/pgc_service/models.py",
      "services/core/policy-governance/pgc_service/optimized_governance_engine.py",
      "services/core/policy-governance/pgc_service/requirements.txt",
      "services/core/policy-governance/pgc_service/start_with_tracing.py",
      "services/core/policy-governance/pgc_service_standardized/README.md",
      "services/core/policy-governance/pgc_service_standardized/api/__init__.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/__init__.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/alphaevolve_enforcement.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/enforcement.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/governance_workflows.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/incremental_compilation.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/quantum_enforcement.py",
      "services/core/policy-governance/pgc_service_standardized/api/v1/ultra_low_latency.py",
      "services/core/policy-governance/pgc_service_standardized/config.py",
      "services/core/policy-governance/pgc_service_standardized/example_usage.py",
      "services/core/policy-governance/pgc_service_standardized/main.py",
      "services/core/policy-governance/pgc_service_standardized/models.py",
      "services/core/policy-governance/pgc_service_standardized/schemas.py",
      "services/core/policy-governance/qpe_service/Dockerfile",
      "services/core/policy-governance/qpe_service/go.mod",
      "services/core/policy-governance/qpe_service/go.sum",
      "services/core/policy-governance/qpe_service/main.go",
      "services/core/policy-governance/qpe_service/proto/qpe.pb.go",
      "services/core/policy-governance/qpe_service/proto/qpe.proto",
      "services/core/policy-governance/qpe_service/proto/qpe_grpc.pb.go",
      "services/core/policy-governance/qpe_service/scripts/smoke_test.sh",
      "services/core/policy-governance/qpe_service/scripts/validation_test.sh",
      "services/core/policy-governance/simple_pgc_main.py",
      "services/core/policy-governance/src/__init__.py",
      "services/core/worker_agents/__init__.py",
      "services/core/worker_agents/carma_enhanced_ethics_agent.py",
      "services/core/worker_agents/enhanced_ethics_agent.py",
      "services/core/worker_agents/ethics/__init__.py",
      "services/core/worker_agents/ethics/analyzers.py",
      "services/core/worker_agents/ethics/detectors.py",
      "services/core/worker_agents/ethics/ethics_agent.py",
      "services/core/worker_agents/ethics/models.py",
      "services/core/worker_agents/ethics_agent.py",
      "services/core/worker_agents/legal_agent.py",
      "services/core/worker_agents/operational_agent.py",
      "services/core/xai-integration/Dockerfile",
      "services/core/xai-integration/xai_service/app/config/service_config.py",
      "services/core/xai-integration/xai_service/app/main.py",
      "services/core/xai-integration/xai_service/requirements.txt",
      "services/examples/context_engineering/README.md",
      "services/examples/context_engineering/multi_agent/blackboard_coordination.py",
      "services/examples/context_engineering/patterns/constitutional_service_pattern.py",
      "services/examples/context_engineering/testing/constitutional_test_case.py",
      "services/platform_services/__init__.py",
      "services/platform_services/api_gateway/AUTHENTICATION_CONSOLIDATION.md",
      "services/platform_services/api_gateway/gateway_service/app/__init__.py",
      "services/platform_services/api_gateway/gateway_service/app/auth/__init__.py",
      "services/platform_services/api_gateway/gateway_service/app/auth/integrated_auth.py",
      "services/platform_services/api_gateway/gateway_service/app/core/gateway_config.py",
      "services/platform_services/api_gateway/gateway_service/app/main.py",
      "services/platform_services/api_gateway/gateway_service/app/middleware/constitutional_compliance.py",
      "services/platform_services/api_gateway/gateway_service/app/models/__init__.py",
      "services/platform_services/api_gateway/gateway_service/app/models/gateway.py",
      "services/platform_services/api_gateway/gateway_service/app/models/routing.py",
      "services/platform_services/api_gateway/gateway_service/app/routing/service_router.py",
      "services/platform_services/api_gateway/gateway_service/app/services/__init__.py",
      "services/platform_services/api_gateway/gateway_service/app/services/gateway_service.py",
      "services/platform_services/api_gateway/gateway_service/app/simple_main.py",
      "services/platform_services/api_gateway/gateway_service/requirements.txt",
      "services/platform_services/api_gateway/gateway_service_standardized/README.md",
      "services/platform_services/api_gateway/gateway_service_standardized/api/v1/routes.py",
      "services/platform_services/api_gateway/gateway_service_standardized/config.py",
      "services/platform_services/api_gateway/gateway_service_standardized/example_usage.py",
      "services/platform_services/api_gateway/gateway_service_standardized/main.py",
      "services/platform_services/api_gateway/gateway_service_standardized/models.py",
      "services/platform_services/api_gateway/gateway_service_standardized/schemas.py",
      "services/platform_services/audit_aggregator/Dockerfile",
      "services/platform_services/audit_aggregator/main.py",
      "services/platform_services/audit_aggregator/requirements.txt",
      "services/platform_services/authentication/ENTERPRISE_FEATURES_SUMMARY.md",
      "services/platform_services/authentication/app/cache_manager.py",
      "services/platform_services/authentication/auth_service/config/environments/developmentconfig/environments/example.env",
      "services/platform_services/authentication/auth_service/AGENT_IDENTITY_MANAGEMENT.md",
      "services/platform_services/authentication/auth_service/Dockerfile",
      "services/platform_services/authentication/auth_service/Dockerfile.acge",
      "services/platform_services/authentication/auth_service/Dockerfile.prod",
      "services/platform_services/authentication/auth_service/README.md",
      "services/platform_services/authentication/auth_service/README_PRODUCTION.md",
      "services/platform_services/authentication/auth_service/acge_integration.py",
      "services/platform_services/authentication/auth_service/app/__init__.py",
      "services/platform_services/authentication/auth_service/app/api/__init__.py",
      "services/platform_services/authentication/auth_service/app/api/agents.py",
      "services/platform_services/authentication/auth_service/app/api/endpoints.py",
      "services/platform_services/authentication/auth_service/app/api/v1/__init__.py",
      "services/platform_services/authentication/auth_service/app/api/v1/api_keys.py",
      "services/platform_services/authentication/auth_service/app/api/v1/api_router.py",
      "services/platform_services/authentication/auth_service/app/api/v1/deps.py",
      "services/platform_services/authentication/auth_service/app/api/v1/endpoints.py",
      "services/platform_services/authentication/auth_service/app/api/v1/endpoints_unified.py",
      "services/platform_services/authentication/auth_service/app/api/v1/mfa.py",
      "services/platform_services/authentication/auth_service/app/api/v1/oauth.py",
      "services/platform_services/authentication/auth_service/app/core/__init__.py",
      "services/platform_services/authentication/auth_service/app/core/api_key_manager.py",
      "services/platform_services/authentication/auth_service/app/core/config.py",
      "services/platform_services/authentication/auth_service/app/core/input_validation.py",
      "services/platform_services/authentication/auth_service/app/core/intrusion_detection.py",
      "services/platform_services/authentication/auth_service/app/core/jwt_security.py",
      "services/platform_services/authentication/auth_service/app/core/limiter.py",
      "services/platform_services/authentication/auth_service/app/core/mfa.py",
      "services/platform_services/authentication/auth_service/app/core/oauth.py",
      "services/platform_services/authentication/auth_service/app/core/password.py",
      "services/platform_services/authentication/auth_service/app/core/security.py",
      "services/platform_services/authentication/auth_service/app/core/security_audit.py",
      "services/platform_services/authentication/auth_service/app/core/session_manager.py",
      "services/platform_services/authentication/auth_service/app/crud/__init__.py",
      "services/platform_services/authentication/auth_service/app/crud/crud_refresh_token.py",
      "services/platform_services/authentication/auth_service/app/crud/crud_user.py",
      "services/platform_services/authentication/auth_service/app/db/__init__.py",
      "services/platform_services/authentication/auth_service/app/db/base_class.py",
      "services/platform_services/authentication/auth_service/app/db/database.py",
      "services/platform_services/authentication/auth_service/app/db/session.py",
      "services/platform_services/authentication/auth_service/app/main.py",
      "services/platform_services/authentication/auth_service/app/main_acge.py",
      "services/platform_services/authentication/auth_service/app/middleware/__init__.py",
      "services/platform_services/authentication/auth_service/app/middleware/agent_auth.py",
      "services/platform_services/authentication/auth_service/app/middleware/enhanced_security.py",
      "services/platform_services/authentication/auth_service/app/middleware/rate_limiter.py",
      "services/platform_services/authentication/auth_service/app/middleware/security_middleware.py",
      "services/platform_services/authentication/auth_service/app/models/__init__.py",
      "services/platform_services/authentication/auth_service/app/models/agent.py",
      "services/platform_services/authentication/auth_service/app/models/refresh_token.py",
      "services/platform_services/authentication/auth_service/app/models/security_event.py",
      "services/platform_services/authentication/auth_service/app/models/user.py",
      "services/platform_services/authentication/auth_service/app/models.py",
      "services/platform_services/authentication/auth_service/app/schemas/__init__.py",
      "services/platform_services/authentication/auth_service/app/schemas/agent.py",
      "services/platform_services/authentication/auth_service/app/schemas/token.py",
      "services/platform_services/authentication/auth_service/app/schemas/user.py",
      "services/platform_services/authentication/auth_service/app/schemas.py",
      "services/platform_services/authentication/auth_service/app/services/__init__.py",
      "services/platform_services/authentication/auth_service/app/services/agent_service.py",
      "services/platform_services/authentication/auth_service/app/services/user_service.py",
      "services/platform_services/authentication/auth_service/config/auth_config.yaml",
      "services/platform_services/authentication/auth_service/migrations/add_agent_tables.sql",
      "services/platform_services/authentication/auth_service/migrations/rename_metadata_columns.sql",
      "services/platform_services/authentication/auth_service/models.py",
      "services/platform_services/authentication/auth_service/openapi.yaml",
      "services/platform_services/authentication/auth_service/requirements.txt",
      "services/platform_services/authentication/auth_service/simple_main.py",
      "services/platform_services/authentication/auth_service/test_agent_system.py",
      "services/platform_services/authentication/auth_service_standardized/README.md",
      "services/platform_services/authentication/auth_service_standardized/api/__init__.py",
      "services/platform_services/authentication/auth_service_standardized/api/agents.py",
      "services/platform_services/authentication/auth_service_standardized/api/endpoints.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/__init__.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/api_keys.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/api_router.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/deps.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/endpoints_unified.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/mfa.py",
      "services/platform_services/authentication/auth_service_standardized/api/v1/oauth.py",
      "services/platform_services/authentication/auth_service_standardized/config.py",
      "services/platform_services/authentication/auth_service_standardized/example_usage.py",
      "services/platform_services/authentication/auth_service_standardized/main.py",
      "services/platform_services/authentication/auth_service_standardized/models.py",
      "services/platform_services/authentication/auth_service_standardized/schemas.py",
      "services/platform_services/blackboard/simple_blackboard_main.py",
      "services/platform_services/claude.md",
      "services/platform_services/coordinator/simple_coordinator_main.py",
      "services/platform_services/formal_verification/README.md",
      "services/platform_services/formal_verification/__init__.py",
      "services/platform_services/formal_verification/conftest.py",
      "services/platform_services/formal_verification/core/__init__.py",
      "services/platform_services/formal_verification/core/adversarial_robustness.py",
      "services/platform_services/formal_verification/core/constitutional_compliance.py",
      "services/platform_services/formal_verification/demos/__init__.py",
      "services/platform_services/formal_verification/demos/demo_adversarial_robustness.py",
      "services/platform_services/formal_verification/demos/simple_demo.py",
      "services/platform_services/formal_verification/docs/BUG_FIXES_REPORT.md",
      "services/platform_services/formal_verification/docs/VALIDATION_REPORT.md",
      "services/platform_services/formal_verification/docs/__init__.py",
      "services/platform_services/formal_verification/pytest.ini",
      "services/platform_services/formal_verification/requirements.txt",
      "services/platform_services/formal_verification/service.py",
      "services/platform_services/integrity/app/cache_manager.py",
      "services/platform_services/integrity/config/auth_config.yaml",
      "services/platform_services/integrity/config/integrity_service_cache_optimization.json",
      "services/platform_services/integrity/integrity_service/config/environments/developmentconfig/environments/example.env",
      "services/platform_services/integrity/integrity_service/Dockerfile",
      "services/platform_services/integrity/integrity_service/Dockerfile.prod",
      "services/platform_services/integrity/integrity_service/README.md",
      "services/platform_services/integrity/integrity_service/README_PERSISTENT_AUDIT.md",
      "services/platform_services/integrity/integrity_service/README_PRODUCTION.md",
      "services/platform_services/integrity/integrity_service/acge_integrity_service.py",
      "services/platform_services/integrity/integrity_service/app/__init__.py",
      "services/platform_services/integrity/integrity_service/app/api/__init__.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/__init__.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/appeals.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/audit.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/crypto.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/database.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/github_webhooks.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/integrity.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/persistent_audit.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/persistent_audit_api.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/pgp_assurance.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/policies.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/research_data.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/schemas/__init__.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/schemas/github_schemas.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/schemas.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/services/__init__.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/services/crypto_service.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/services/key_management.py",
      "services/platform_services/integrity/integrity_service/app/api/v1/services/timestamp_service.py",
      "services/platform_services/integrity/integrity_service/app/core/__init__.py",
      "services/platform_services/integrity/integrity_service/app/core/auth.py",
      "services/platform_services/integrity/integrity_service/app/core/crypto_benchmarking.py",
      "services/platform_services/integrity/integrity_service/app/core/explainability.py",
      "services/platform_services/integrity/integrity_service/app/core/persistent_audit_logger.py",
      "services/platform_services/integrity/integrity_service/app/core/persistent_audit_trail.py",
      "services/platform_services/integrity/integrity_service/app/crud.py",
      "services/platform_services/integrity/integrity_service/app/database.py",
      "services/platform_services/integrity/integrity_service/app/main.py",
      "services/platform_services/integrity/integrity_service/app/middleware/__init__.py",
      "services/platform_services/integrity/integrity_service/app/middleware/enhanced_security.py",
      "services/platform_services/integrity/integrity_service/app/models.py",
      "services/platform_services/integrity/integrity_service/app/schemas.py",
      "services/platform_services/integrity/integrity_service/app/services/__init__.py",
      "services/platform_services/integrity/integrity_service/app/services/crypto_service.py",
      "services/platform_services/integrity/integrity_service/app/services/integrity_verification.py",
      "services/platform_services/integrity/integrity_service/app/services/key_management.py",
      "services/platform_services/integrity/integrity_service/app/services/pgp_assurance.py",
      "services/platform_services/integrity/integrity_service/app/services/research_data_pipeline.py",
      "services/platform_services/integrity/integrity_service/app/services/timestamp_service.py",
      "services/platform_services/integrity/integrity_service/app/simple_main.py",
      "services/platform_services/integrity/integrity_service/core/__init__.py",
      "services/platform_services/integrity/integrity_service/core/persistent_audit_trail.py",
      "services/platform_services/integrity/integrity_service/init_db.py",
      "services/platform_services/integrity/integrity_service/migrations/001_create_audit_logs_table.sql",
      "services/platform_services/integrity/integrity_service/migrations/001_create_audit_tables.sql",
      "services/platform_services/integrity/integrity_service/models.py",
      "services/platform_services/integrity/integrity_service/pytest.ini",
      "services/platform_services/integrity/integrity_service/requirements.txt",
      "services/platform_services/integrity/integrity_service/test_audit_trail.py",
      "services/platform_services/integrity/integrity_service_standardized/README.md",
      "services/platform_services/integrity/integrity_service_standardized/api/__init__.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/__init__.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/appeals.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/audit.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/crypto.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/database.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/integrity.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/persistent_audit.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/pgp_assurance.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/policies.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/research_data.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/schemas.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/services/__init__.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/services/crypto_service.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/services/key_management.py",
      "services/platform_services/integrity/integrity_service_standardized/api/v1/services/timestamp_service.py",
      "services/platform_services/integrity/integrity_service_standardized/config.py",
      "services/platform_services/integrity/integrity_service_standardized/example_usage.py",
      "services/platform_services/integrity/integrity_service_standardized/main.py",
      "services/platform_services/integrity/integrity_service_standardized/models.py",
      "services/platform_services/integrity/integrity_service_standardized/schemas.py",
      "services/platform_services/integrity/simple_integrity_main.py",
      "services/platform_services/shared/__init__.py",
      "services/platform_services/shared/middleware/__init__.py",
      "services/shared/__init__.py",
      "services/shared/acgs_robustness_benchmarks.py",
      "services/shared/acgs_types/__init__.py",
      "services/shared/advanced_redis_client.py",
      "services/shared/agents/__init__.py",
      "services/shared/agents/a2a_protocol_adapter.py",
      "services/shared/agents/apgf_event_publisher.py",
      "services/shared/agents/apgf_orchestrator.py",
      "services/shared/agents/dynamic_agent.py",
      "services/shared/agents/policy_builder.py",
      "services/shared/agents/specialized_agent_roles.py",
      "services/shared/agents/tool_router.py",
      "services/shared/ai_model_service.py",
      "services/shared/alembic/env.py",
      "services/shared/alembic/script.py.mako",
      "services/shared/alembic/versions/001_add_multi_tenant_support.py",
      "services/shared/alembic/versions/002_enhance_rls_security.py",
      "services/shared/alembic/versions/003_comprehensive_acgs_enhancements.py",
      "services/shared/alembic/versions/003_simplify_rls_implementation.py",
      "services/shared/alembic/versions/004_add_missing_user_columns.py",
      "services/shared/alembic/versions/004_add_qec_enhancement_fields.py",
      "services/shared/alembic/versions/005_fix_refresh_token_length.py",
      "services/shared/alembic/versions/006_add_mab_optimization_tables.py",
      "services/shared/alembic/versions/006_add_wina_constitutional_updates.py",
      "services/shared/alembic/versions/007_phase3_z3_integration.py",
      "services/shared/alembic/versions/008_add_federated_evaluation_models.py",
      "services/shared/alembic/versions/009_add_secure_aggregation_privacy_models.py",
      "services/shared/alembic/versions/010_task_13_cross_domain_principle_testing_framework.py",
      "services/shared/alembic/versions/82069bc89d27_initial_migration.py",
      "services/shared/alembic/versions/add_violation_detection_tables.py",
      "services/shared/alembic/versions/c2a48966_modify_policyrule_source_principles.py",
      "services/shared/alembic/versions/eaa5f6249b99_add_policy_and_template_models_fresh.py",
      "services/shared/alembic/versions/f1a2b3c4d5e6_add_constitutional_council_fields.py",
      "services/shared/alembic/versions/task8_incremental_compilation.py",
      "services/shared/alembic.ini",
      "services/shared/api_models.py",
      "services/shared/async_processing/__init__.py",
      "services/shared/async_processing/concurrent_execution_manager.py",
      "services/shared/async_processing/enhanced_task_scheduler.py",
      "services/shared/audit/compliance_audit_logger.py",
      "services/shared/auth/__init__.py",
      "services/shared/auth/multi_tenant_jwt.py",
      "services/shared/auth/tenant_auth.py",
      "services/shared/auth.py",
      "services/shared/blackboard/__init__.py",
      "services/shared/blackboard/blackboard_service.py",
      "services/shared/blackboard/conflict_manager.py",
      "services/shared/blackboard/core_service.py",
      "services/shared/blackboard/event_publisher.py",
      "services/shared/blackboard/knowledge_manager.py",
      "services/shared/blackboard/models.py",
      "services/shared/blackboard/task_manager.py",
      "services/shared/causal_bias_detector.py",
      "services/shared/causal_constitutional_framework.py",
      "services/shared/causal_coordination_model.py",
      "services/shared/clients/tenant_service_client.py",
      "services/shared/common/__init__.py",
      "services/shared/common/error_handling.py",
      "services/shared/common/formatting.py",
      "services/shared/common/validation.py",
      "services/shared/compliance/__init__.py",
      "services/shared/compliance/compliance_monitor.py",
      "services/shared/compliance/eu_ai_act_compliance.py",
      "services/shared/compliance/human_oversight.py",
      "services/shared/compliance/technical_documentation.py",
      "services/shared/config/__init__.py",
      "services/shared/config/ac_service_cache_optimization.json",
      "services/shared/config/auth_service_cache_optimization.json",
      "services/shared/config/blackboard_cache_optimization.json",
      "services/shared/config/code_analysis_cache_optimization.json",
      "services/shared/config/coordinator_cache_optimization.json",
      "services/shared/config/ec_service_cache_optimization.json",
      "services/shared/config/fv_service_cache_optimization.json",
      "services/shared/config/gs_service_cache_optimization.json",
      "services/shared/config/infrastructure_config.py",
      "services/shared/config/pgc_service_cache_optimization.json",
      "services/shared/config/service_registry.py",
      "services/shared/configuration/__init__.py",
      "services/shared/configuration/config_manager.py",
      "services/shared/configuration/feature_flags.py",
      "services/shared/configuration/settings.py",
      "services/shared/constitutional_augmentation_pipeline.py",
      "services/shared/constitutional_cache.py",
      "services/shared/constitutional_counterfactual_generator.py",
      "services/shared/constitutional_mcp_integration.py",
      "services/shared/constitutional_persona_validator.py",
      "services/shared/constitutional_safety_framework.py",
      "services/shared/counterfactual_coordination_tester.py",
      "services/shared/database/connection_pool.py",
      "services/shared/database/database_performance_optimizer.py",
      "services/shared/database/optimized_connection_pool.py",
      "services/shared/database/postgresql_query_optimizer.py",
      "services/shared/database/simplified_rls.py",
      "services/shared/database.py",
      "services/shared/database_optimizer.py",
      "services/shared/domain/__init__.py",
      "services/shared/domain/base.py",
      "services/shared/domain/events.py",
      "services/shared/domain/specifications.py",
      "services/shared/enhanced_auth_middleware.py",
      "services/shared/ethical_scenario_generator.py",
      "services/shared/events/__init__.py",
      "services/shared/events/bus.py",
      "services/shared/exceptions/__init__.py",
      "services/shared/explainability/__init__.py",
      "services/shared/explainability/hybrid_explainability_engine.py",
      "services/shared/explainability/lime_integration.py",
      "services/shared/explainability/shap_integration.py",
      "services/shared/fairness/__init__.py",
      "services/shared/fairness/bias_drift_monitor.py",
      "services/shared/fairness/bias_mitigation_engine.py",
      "services/shared/fairness/enhanced_fairness_framework.py",
      "services/shared/fairness/fairlearn_integration.py",
      "services/shared/fairness/whatif_tool_integration.py",
      "services/shared/infrastructure/__init__.py",
      "services/shared/infrastructure/event_store.py",
      "services/shared/infrastructure/outbox.py",
      "services/shared/infrastructure/repositories.py",
      "services/shared/infrastructure/saga.py",
      "services/shared/infrastructure/unit_of_work.py",
      "services/shared/interfaces/__init__.py",
      "services/shared/middleware/FAST_CONSTITUTIONAL_VALIDATOR_SUMMARY.md",
      "services/shared/middleware/__init__.py",
      "services/shared/middleware/cache_optimization_middleware.py",
      "services/shared/middleware/constitutional_performance_metrics.py",
      "services/shared/middleware/constitutional_validation.py",
      "services/shared/middleware/enhanced_auth_middleware.py",
      "services/shared/middleware/error_handling.py",
      "services/shared/middleware/fast_constitutional_validator.py",
      "services/shared/middleware/health_check_middleware.py",
      "services/shared/middleware/prometheus_metrics.py",
      "services/shared/middleware/prometheus_metrics_middleware.py",
      "services/shared/middleware/service_discovery_middleware.py",
      "services/shared/middleware/simple_tenant_middleware.py",
      "services/shared/middleware/tenant_middleware.py",
      "services/shared/ml_routing_optimizer.py",
      "services/shared/models/__init__.py",
      "services/shared/models/multi_tenant.py",
      "services/shared/monitoring/__init__.py",
      "services/shared/monitoring/advanced_metrics_collector.py",
      "services/shared/monitoring/alerts.py",
      "services/shared/monitoring/dashboard.py",
      "services/shared/monitoring/enhanced_performance_monitor.py",
      "services/shared/monitoring/grafana_integration_service.py",
      "services/shared/monitoring/health_checks.py",
      "services/shared/monitoring/human_intervention_tracker.py",
      "services/shared/monitoring/intelligent_alerting_system.py",
      "services/shared/monitoring/metrics.py",
      "services/shared/monitoring/model_drift_detector.py",
      "services/shared/monitoring/predictive_analytics_service.py",
      "services/shared/monitoring/sentry_alerts.py",
      "services/shared/monitoring/sentry_integration.py",
      "services/shared/monitoring/sentry_releases.py",
      "services/shared/monitoring/tracing.py",
      "services/shared/performance/__init__.py",
      "services/shared/performance/caching.py",
      "services/shared/performance/connection_pool.py",
      "services/shared/performance/enhanced_multi_tier_cache.py",
      "services/shared/performance/multi_tier_cache.py",
      "services/shared/performance/performance_monitoring.py",
      "services/shared/performance_monitoring.py",
      "services/shared/performance_optimizer.py",
      "services/shared/redis_client.py",
      "services/shared/repositories/tenant_repository.py",
      "services/shared/requirements/requirements-analysis.txt",
      "services/shared/requirements/requirements-base.txt",
      "services/shared/requirements/requirements-consolidated.txt",
      "services/shared/requirements/requirements-core.txt",
      "services/shared/requirements/requirements-dev.txt",
      "services/shared/requirements/requirements-monitoring.txt",
      "services/shared/requirements/requirements-security.txt",
      "services/shared/requirements/requirements-test.txt",
      "services/shared/requirements/requirements-web.txt",
      "services/shared/resilience/__init__.py",
      "services/shared/resilience/circuit_breaker.py",
      "services/shared/resilience/error_handlers.py",
      "services/shared/resilience/exceptions.py",
      "services/shared/resilience/retry.py",
      "services/shared/resilience/timeout.py",
      "services/shared/resource_management/__init__.py",
      "services/shared/resource_management/enhanced_resource_manager.py",
      "services/shared/resource_management/memory_isolation.py",
      "services/shared/robust_coordination_metrics.py",
      "services/shared/rollback/operation_rollback_manager.py",
      "services/shared/secrets_manager.py",
      "services/shared/security/__init__.py",
      "services/shared/security/auth_security_integration.py",
      "services/shared/security/csrf_protection.py",
      "services/shared/security/enhanced_audit_logging.py",
      "services/shared/security/enhanced_encryption.py",
      "services/shared/security/enhanced_rbac.py",
      "services/shared/security/middleware_integration.py",
      "services/shared/security/security_config_helper.py",
      "services/shared/security/unified_input_validation.py",
      "services/shared/security_headers_middleware.py",
      "services/shared/security_monitoring.py",
      "services/shared/service_clients/__init__.py",
      "services/shared/service_clients/base_client.py",
      "services/shared/service_clients/registry.py",
      "services/shared/service_mesh/__init__.py",
      "services/shared/service_mesh/circuit_breaker.py",
      "services/shared/service_mesh/client.py",
      "services/shared/service_mesh/common_types.py",
      "services/shared/service_mesh/discovery.py",
      "services/shared/service_mesh/enhanced_service_stabilizer.py",
      "services/shared/service_mesh/failover_circuit_breaker.py",
      "services/shared/service_mesh/governance_session_manager.py",
      "services/shared/service_mesh/infrastructure_integration.py",
      "services/shared/service_mesh/load_balancer.py",
      "services/shared/service_mesh/performance_monitor.py",
      "services/shared/service_mesh/registry.py",
      "services/shared/service_mesh/service_orchestrator.py",
      "services/shared/service_registry.py",
      "services/shared/services/tenant_management.py",
      "services/shared/spurious_correlation_detector.py",
      "services/shared/streaming/__init__.py",
      "services/shared/streaming/deploy_kafka.sh",
      "services/shared/streaming/docker-compose.kafka.yml",
      "services/shared/streaming/event_streaming_manager.py",
      "services/shared/streaming/example_usage.py",
      "services/shared/streaming/kafka_config_manager.py",
      "services/shared/streaming/kafka_integration.py",
      "services/shared/streaming/monitoring/jmx-kafka-config.yml",
      "services/shared/superclaude_performance_monitor.py",
      "services/shared/superclaude_persona_integration.py",
      "services/shared/templates/fastapi_service_template/README.md",
      "services/shared/templates/fastapi_service_template/api/v1/routes.py",
      "services/shared/templates/fastapi_service_template/config.py",
      "services/shared/templates/fastapi_service_template/example_usage.py",
      "services/shared/templates/fastapi_service_template/main.py",
      "services/shared/templates/fastapi_service_template/models.py",
      "services/shared/templates/fastapi_service_template/schemas.py",
      "services/shared/testing/constitutional_compliance_validator.py",
      "services/shared/testing/constitutional_test_case.py",
      "services/shared/testing/multi_tenant_test_validator.py",
      "services/shared/testing/performance_test_automation.py",
      "services/shared/utils/__init__.py",
      "services/shared/validation/__init__.py",
      "services/shared/validation/constitutional_validator.py",
      "services/shared/validation/validators.py",
      "services/shared/validation_helpers.py",
      "services/shared/validation_models.py",
      "services/shared/wina/__init__.py",
      "services/shared/wina/config.py",
      "services/shared/wina/constitutional_integration.py",
      "services/shared/wina/continuous_learning.py",
      "services/shared/wina/core.py",
      "services/shared/wina/dashboard.py",
      "services/shared/wina/exceptions.py",
      "services/shared/wina/gating.py",
      "services/shared/wina/learning_api.py",
      "services/shared/wina/metrics.py",
      "services/shared/wina/model_integration.py",
      "services/shared/wina/performance_api.py",
      "services/shared/wina/performance_monitoring.py",
      "services/shared/wina/svd_transformation.py",
      "services/shared/wina/test_wina_core.py",
      "services/shared/xai_service.py"
    ]
  },
  "time": {
    "rules": [],
    "rules_parse_time": 1.0342130661010742,
    "profiling_times": {
      "config_time": 2.8868062496185303,
      "core_time": 16.664604663848877,
      "ignores_time": 0.0014455318450927734,
      "total_time": 19.553675174713135
    },
    "parsing_time": {
      "total_time": 11.135347843170166,
      "per_file_time": {
        "mean": 0.009038431690884864,
        "std_dev": 0.00015967007829105614
      },
      "very_slow_files": []
    },
    "targets": [],
    "total_bytes": 0,
    "max_memory_bytes": 1117745856
  },
  "skipped_rules": []
}