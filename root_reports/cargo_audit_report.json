{"database":{"advisory-count":787,"last-commit":"7573f55ba337263f61167dbb0ea926cdc7c8eb5d","last-updated":"2025-06-17T11:04:25+02:00"},"lockfile":{"dependency-count":262},"settings":{"target_arch":[],"target_os":[],"severity":null,"ignore":[],"informational_warnings":["unmaintained","unsound","notice"]},"vulnerabilities":{"found":true,"count":1,"list":[{"advisory":{"id":"RUSTSEC-2024-0344","package":"curve25519-dalek","title":"Timing variability in `curve25519-dalek`'s `Scalar29::sub`/`Scalar52::sub`","description":"Timing variability of any kind is problematic when working with  potentially secret values such as\nelliptic curve scalars, and such issues can potentially leak private keys and other secrets. Such a\nproblem was recently discovered in `curve25519-dalek`.\n\nThe `Scalar29::sub` (32-bit) and `Scalar52::sub` (64-bit) functions contained usage of a mask value\ninside a loop where LLVM saw an opportunity to insert a branch instruction (`jns` on x86) to\nconditionally bypass this code section when the mask value is set to zero as can be seen in godbolt:\n\n- 32-bit (see L106): <https://godbolt.org/z/zvaWxzvqv>\n- 64-bit (see L48): <https://godbolt.org/z/PczYj7Pda>\n\nA similar problem was recently discovered in the Kyber reference implementation:\n\n<https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hqbtIGFKIpU/m/cnE3pbueBgAJ>\n\nAs discussed on that thread, one portable solution, which is also used in this PR, is to introduce a\nvolatile read as an optimization barrier, which prevents the compiler from optimizing it away.\n\nThe fix can be validated in godbolt here:\n\n- 32-bit: <https://godbolt.org/z/jc9j7eb8E>\n- 64-bit: <https://godbolt.org/z/x8d46Yfah>\n\nThe problem was discovered and the solution independently verified by \nAlexander Wagner <alexander.wagner@aisec.fraunhofer.de> and Lea Themint <lea.thiemt@tum.de> using\ntheir DATA tool:\n\n<https://github.com/Fraunhofer-AISEC/DATA>","date":"2024-06-18","aliases":[],"related":[],"collection":"crates","categories":["crypto-failure"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/dalek-cryptography/curve25519-dalek/pull/659","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=4.1.3"],"unaffected":[]},"affected":null,"package":{"name":"curve25519-dalek","version":"3.2.1","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"90f9d052967f590a76e62eb387bd0bbb1b000182c3cefe5364db6b7211651bc0","dependencies":[{"name":"byteorder","version":"1.5.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"digest","version":"0.9.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"rand_core","version":"0.5.1","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"serde","version":"1.0.219","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"subtle","version":"2.4.1","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"zeroize","version":"1.3.0","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}}]},"warnings":{"unmaintained":[{"kind":"unmaintained","package":{"name":"atty","version":"0.2.14","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8","dependencies":[{"name":"hermit-abi","version":"0.1.19","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"libc","version":"0.2.173","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"winapi","version":"0.3.9","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":{"id":"RUSTSEC-2024-0375","package":"atty","title":"`atty` is unmaintained","description":"The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0","date":"2024-09-25","aliases":[],"related":[],"collection":"crates","categories":[],"keywords":[],"cvss":null,"informational":"unmaintained","references":[],"source":null,"url":"https://github.com/softprops/atty/issues/57","withdrawn":null,"license":"CC0-1.0"},"affected":null,"versions":{"patched":[],"unaffected":[]}},{"kind":"unmaintained","package":{"name":"derivative","version":"2.2.0","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b","dependencies":[{"name":"proc-macro2","version":"1.0.95","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"quote","version":"1.0.40","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"syn","version":"1.0.109","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":{"id":"RUSTSEC-2024-0388","package":"derivative","title":"`derivative` is unmaintained; consider using an alternative","description":"The [`derivative`](https://crates.io/crates/derivative) crate is no longer maintained.\nConsider using any alternative, for instance:\n- [derive_more](https://crates.io/crates/derive_more)\n- [derive-where](https://crates.io/crates/derive-where)\n- [educe](https://crates.io/crates/educe)","date":"2024-06-26","aliases":[],"related":[],"collection":"crates","categories":[],"keywords":[],"cvss":null,"informational":"unmaintained","references":[],"source":null,"url":"https://github.com/mcarton/rust-derivative/issues/117","withdrawn":null,"license":"CC0-1.0"},"affected":null,"versions":{"patched":[],"unaffected":[]}},{"kind":"unmaintained","package":{"name":"paste","version":"1.0.15","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a","replace":null},"advisory":{"id":"RUSTSEC-2024-0436","package":"paste","title":"paste - no longer maintained","description":"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository","date":"2024-10-07","aliases":[],"related":[],"collection":"crates","categories":[],"keywords":[],"cvss":null,"informational":"unmaintained","references":[],"source":null,"url":"https://github.com/dtolnay/paste","withdrawn":null,"license":"CC0-1.0"},"affected":null,"versions":{"patched":[],"unaffected":[]}}],"unsound":[{"kind":"unsound","package":{"name":"atty","version":"0.2.14","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8","dependencies":[{"name":"hermit-abi","version":"0.1.19","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"libc","version":"0.2.173","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"winapi","version":"0.3.9","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":{"id":"RUSTSEC-2021-0145","package":"atty","title":"Potential unaligned read","description":"On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0","date":"2021-07-04","aliases":["GHSA-g98v-hv3f-hcfr"],"related":[],"collection":"crates","categories":[],"keywords":["unaligned-read"],"cvss":null,"informational":"unsound","references":["https://github.com/softprops/atty/pull/51","https://github.com/softprops/atty/issues/57"],"source":null,"url":"https://github.com/softprops/atty/issues/50","withdrawn":null,"license":"CC0-1.0"},"affected":{"arch":[],"os":["windows"],"functions":{}},"versions":{"patched":[],"unaffected":[]}},{"kind":"unsound","package":{"name":"borsh","version":"0.9.3","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"15bf3650200d8bffa99015595e10f1fbd17de07abbc25bb067da79e769939bfa","dependencies":[{"name":"borsh-derive","version":"0.9.3","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"hashbrown","version":"0.11.2","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":{"id":"RUSTSEC-2023-0033","package":"borsh","title":"Parsing borsh messages with ZST which are not-copy/clone is unsound","description":"Affected versions of borsh cause undefined behavior when zero-sized-types (ZST) \nare parsed and the Copy/Clone traits are not implemented/derived.\nFor instance if 1000 instances of a ZST are deserialized, and the ZST is not copy \n(this can be achieved through a singleton), then accessing/writing to deserialized \ndata will cause a segmentation fault.\n\nThere is currently no way for borsh to read data without also providing a Rust type. \nTherefore, if not ZST are used for serialization, then you are not affected by this issue.","date":"2023-04-12","aliases":["GHSA-fjx5-qpf4-xjf2"],"related":[],"collection":"crates","categories":["memory-corruption"],"keywords":[],"cvss":null,"informational":"unsound","references":["https://github.com/near/borsh-rs/pull/136"],"source":null,"url":"https://github.com/near/borsh-rs/issues/19","withdrawn":null,"license":"CC0-1.0"},"affected":{"arch":[],"os":[],"functions":{}},"versions":{"patched":[">=1.0.0-alpha.1","^0.10.4"],"unaffected":[]}}]}}