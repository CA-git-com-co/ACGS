---
apiVersion: v1
kind: Namespace
metadata:
  name: backup-system
  labels:
    name: backup-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: backup-system
data:
  backup.conf: |
    # ACGS-PGP Backup Configuration
    BACKUP_RETENTION_DAYS=30
    BACKUP_ENCRYPTION_KEY_FILE=/etc/backup/encryption.key
    BACKUP_STORAGE_BUCKET=acgs-pgp-backups
    BACKUP_REGION=us-west-2
    BACKUP_COMPRESSION=gzip
    BACKUP_VERIFICATION=true
    BACKUP_CROSS_REGION_REPLICATION=true
    BACKUP_NOTIFICATION_WEBHOOK=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
    
    # Database backup settings
    DB_BACKUP_PARALLEL_JOBS=4
    DB_BACKUP_TIMEOUT=3600
    DB_BACKUP_FORMAT=custom
    
    # Application backup settings
    APP_BACKUP_INCLUDE_LOGS=true
    APP_BACKUP_INCLUDE_CONFIGS=true
    APP_BACKUP_INCLUDE_SECRETS=false  # Secrets handled separately
    
    # Recovery settings
    RECOVERY_TARGET_TIME_MINUTES=15  # RTO: 15 minutes
    RECOVERY_POINT_OBJECTIVE_HOURS=1  # RPO: 1 hour

---
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: backup-system
type: Opaque
stringData:
  aws-access-key-id: "AWS_ACCESS_KEY_ID_PLACEHOLDER"
  aws-secret-access-key: "AWS_SECRET_ACCESS_KEY_PLACEHOLDER"
  encryption-key: "BACKUP_ENCRYPTION_KEY_PLACEHOLDER"
  postgres-url: "${POSTGRES_URL}"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: backup-system
  labels:
    app: postgres-backup
    component: database-backup
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: postgres-backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: postgres-url
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: aws-secret-access-key
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: encryption-key
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Install required tools
              apk add --no-cache aws-cli gnupg gzip curl
              
              # Set variables
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_FILE="acgs_pgp_backup_${TIMESTAMP}.sql"
              ENCRYPTED_FILE="${BACKUP_FILE}.gpg"
              COMPRESSED_FILE="${ENCRYPTED_FILE}.gz"
              
              echo "Starting PostgreSQL backup at $(date)"
              
              # Create backup
              pg_dump -h postgres-service.acgs-pgp -U backup_user -d acgs_pgp_db \
                --format=custom --compress=9 --verbose \
                --file=/tmp/${BACKUP_FILE}
              
              if [ $? -ne 0 ]; then
                echo "ERROR: PostgreSQL backup failed"
                exit 1
              fi
              
              # Encrypt backup
              echo "${ENCRYPTION_KEY}" | gpg --batch --yes --passphrase-fd 0 \
                --symmetric --cipher-algo AES256 \
                --output /tmp/${ENCRYPTED_FILE} /tmp/${BACKUP_FILE}
              
              # Compress encrypted backup
              gzip /tmp/${ENCRYPTED_FILE}
              
              # Upload to S3
              aws s3 cp /tmp/${COMPRESSED_FILE} \
                s3://acgs-pgp-backups/database/${COMPRESSED_FILE} \
                --region us-west-2 \
                --storage-class STANDARD_IA
              
              # Cross-region replication
              aws s3 cp /tmp/${COMPRESSED_FILE} \
                s3://acgs-pgp-backups-replica/database/${COMPRESSED_FILE} \
                --region eu-west-1 \
                --storage-class STANDARD_IA
              
              # Verify backup integrity
              aws s3api head-object \
                --bucket acgs-pgp-backups \
                --key database/${COMPRESSED_FILE} \
                --region us-west-2
              
              if [ $? -eq 0 ]; then
                echo "SUCCESS: Backup uploaded and verified"
                # Send success notification
                curl -X POST -H 'Content-type: application/json' \
                  --data '{"text":"âœ… ACGS-PGP Database backup completed successfully: '${COMPRESSED_FILE}'"}' \
                  ${BACKUP_NOTIFICATION_WEBHOOK} || true
              else
                echo "ERROR: Backup verification failed"
                exit 1
              fi
              
              # Cleanup local files
              rm -f /tmp/${BACKUP_FILE} /tmp/${ENCRYPTED_FILE} /tmp/${COMPRESSED_FILE}
              
              echo "Backup completed at $(date)"
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
            volumeMounts:
            - name: backup-config
              mountPath: /etc/backup
          volumes:
          - name: backup-config
            configMap:
              name: backup-config

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: application-backup
  namespace: backup-system
  labels:
    app: application-backup
    component: app-backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: application-backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: app-backup
            image: bitnami/kubectl:latest
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: aws-secret-access-key
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Install required tools
              apk add --no-cache aws-cli tar gzip curl
              
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_DIR="/tmp/acgs_backup_${TIMESTAMP}"
              BACKUP_ARCHIVE="acgs_app_backup_${TIMESTAMP}.tar.gz"
              
              echo "Starting application backup at $(date)"
              mkdir -p ${BACKUP_DIR}
              
              # Backup ConfigMaps
              echo "Backing up ConfigMaps..."
              kubectl get configmaps -n acgs-pgp -o yaml > ${BACKUP_DIR}/configmaps.yaml
              
              # Backup Services
              echo "Backing up Services..."
              kubectl get services -n acgs-pgp -o yaml > ${BACKUP_DIR}/services.yaml
              
              # Backup Deployments
              echo "Backing up Deployments..."
              kubectl get deployments -n acgs-pgp -o yaml > ${BACKUP_DIR}/deployments.yaml
              
              # Backup Ingress
              echo "Backing up Ingress..."
              kubectl get ingress -n acgs-pgp -o yaml > ${BACKUP_DIR}/ingress.yaml
              
              # Backup PVCs
              echo "Backing up PVCs..."
              kubectl get pvc -n acgs-pgp -o yaml > ${BACKUP_DIR}/pvcs.yaml
              
              # Backup monitoring configuration
              echo "Backing up monitoring..."
              kubectl get servicemonitors -n acgs-pgp -o yaml > ${BACKUP_DIR}/servicemonitors.yaml || true
              kubectl get prometheusrules -n acgs-pgp -o yaml > ${BACKUP_DIR}/prometheusrules.yaml || true
              
              # Create archive
              cd /tmp
              tar -czf ${BACKUP_ARCHIVE} acgs_backup_${TIMESTAMP}/
              
              # Upload to S3
              aws s3 cp ${BACKUP_ARCHIVE} \
                s3://acgs-pgp-backups/application/${BACKUP_ARCHIVE} \
                --region us-west-2
              
              # Cross-region replication
              aws s3 cp ${BACKUP_ARCHIVE} \
                s3://acgs-pgp-backups-replica/application/${BACKUP_ARCHIVE} \
                --region eu-west-1
              
              echo "Application backup completed at $(date)"
              
              # Cleanup
              rm -rf ${BACKUP_DIR} ${BACKUP_ARCHIVE}
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "512Mi"
                cpu: "200m"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: backup-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backup-operator
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets", "services", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "prometheusrules"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backup-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backup-operator
subjects:
- kind: ServiceAccount
  name: backup-service-account
  namespace: backup-system

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cleanup
  namespace: backup-system
  labels:
    app: backup-cleanup
spec:
  schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup-cleanup
            image: amazon/aws-cli:latest
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: aws-secret-access-key
            command:
            - /bin/sh
            - -c
            - |
              set -e

              echo "Starting backup cleanup at $(date)"

              # Delete backups older than 30 days
              CUTOFF_DATE=$(date -d '30 days ago' +%Y%m%d)

              echo "Cleaning up database backups older than $CUTOFF_DATE"
              aws s3 ls s3://acgs-pgp-backups/database/ --region us-west-2 | while read -r line; do
                backup_date=$(echo $line | awk '{print $4}' | grep -o '[0-9]\{8\}' | head -1)
                backup_file=$(echo $line | awk '{print $4}')

                if [ "$backup_date" -lt "$CUTOFF_DATE" ]; then
                  echo "Deleting old backup: $backup_file"
                  aws s3 rm s3://acgs-pgp-backups/database/$backup_file --region us-west-2
                  aws s3 rm s3://acgs-pgp-backups-replica/database/$backup_file --region eu-west-1 || true
                fi
              done

              echo "Cleaning up application backups older than $CUTOFF_DATE"
              aws s3 ls s3://acgs-pgp-backups/application/ --region us-west-2 | while read -r line; do
                backup_date=$(echo $line | awk '{print $4}' | grep -o '[0-9]\{8\}' | head -1)
                backup_file=$(echo $line | awk '{print $4}')

                if [ "$backup_date" -lt "$CUTOFF_DATE" ]; then
                  echo "Deleting old backup: $backup_file"
                  aws s3 rm s3://acgs-pgp-backups/application/$backup_file --region us-west-2
                  aws s3 rm s3://acgs-pgp-backups-replica/application/$backup_file --region eu-west-1 || true
                fi
              done

              echo "Backup cleanup completed at $(date)"
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
