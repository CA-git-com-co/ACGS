# ACGS-2 Staging Environment Override
# Constitutional Hash: cdd01ef066bc6cf2
# Staging-specific configurations and overrides

version: '3.8'

x-staging-environment: &staging-environment
  ENVIRONMENT: staging
  DEBUG: false
  LOG_LEVEL: INFO
  RELOAD: false
  WORKERS: 2

x-staging-resources: &staging-resources
  deploy:
    resources:
      reservations:
        memory: 128M
        cpus: '0.1'
      limits:
        memory: 1G
        cpus: '1.0'
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s

services:
  # Staging Database Configuration
  postgres:
    environment:
      POSTGRES_DB: acgs_staging
      POSTGRES_USER: acgs_staging
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 512MB
    ports:
      - "5434:5432"
    <<: *staging-resources
    deploy:
      resources:
        reservations:
          memory: 512M
          cpus: '0.25'
        limits:
          memory: 2G
          cpus: '1.0'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${ACGS_ROOT}/infrastructure/scripts/docker/init-db-staging.sql:/docker-entrypoint-initdb.d/init-db-staging.sql:ro

  # Staging Redis Configuration
  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6381:6379"
    <<: *staging-resources
    deploy:
      resources:
        reservations:
          memory: 256M
          cpus: '0.1'
        limits:
          memory: 1G
          cpus: '0.5'

  # Staging Monitoring Configuration
  prometheus:
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://prometheus-staging.acgs.internal'
    ports:
      - "9092:9090"
    <<: *staging-resources
    deploy:
      resources:
        reservations:
          memory: 512M
          cpus: '0.25'
        limits:
          memory: 2G
          cpus: '1.0'
    volumes:
      - prometheus_data:/prometheus
      - ${ACGS_ROOT}/infrastructure/monitoring/prometheus/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - ${ACGS_ROOT}/infrastructure/monitoring/prometheus/rules:/etc/prometheus/rules:ro

  grafana:
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_SERVER_ROOT_URL: https://grafana-staging.acgs.internal
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    ports:
      - "3002:3000"
    <<: *staging-resources
    volumes:
      - grafana_data:/var/lib/grafana
      - ${ACGS_ROOT}/infrastructure/monitoring/grafana/dashboards-staging:/etc/grafana/provisioning/dashboards:ro
      - ${ACGS_ROOT}/infrastructure/monitoring/grafana/datasources-staging:/etc/grafana/provisioning/datasources:ro

  # ACGS Core Services - Staging Configuration
  constitutional_ai:
    image: acgs/constitutional-ai:${ACGS_VERSION:-staging}
    container_name: acgs_constitutional_ai_staging
    environment:
      <<: *staging-environment
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
      DATABASE_URL: postgresql+asyncpg://acgs_staging:${POSTGRES_PASSWORD}@postgres:5432/acgs_staging
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SERVICE_PORT: 8001
      MAX_WORKERS: 2
      WORKER_CONNECTIONS: 500
    ports:
      - "8001:8001"
    <<: *staging-resources
    volumes:
      - acgs_logs:/app/logs:rw
    networks:
      - acgs_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "acgs.service=core"
      - "acgs.component=constitutional-ai"
      - "acgs.environment=staging"
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"

  integrity_service:
    image: acgs/integrity-service:${ACGS_VERSION:-staging}
    container_name: acgs_integrity_staging
    environment:
      <<: *staging-environment
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
      DATABASE_URL: postgresql+asyncpg://acgs_staging:${POSTGRES_PASSWORD}@postgres:5432/acgs_staging
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      SERVICE_PORT: 8002
      MAX_WORKERS: 2
      WORKER_CONNECTIONS: 500
    ports:
      - "8002:8002"
    <<: *staging-resources
    volumes:
      - acgs_logs:/app/logs:rw
    networks:
      - acgs_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "acgs.service=core"
      - "acgs.component=integrity"
      - "acgs.environment=staging"
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"

  formal_verification:
    image: acgs/formal-verification:${ACGS_VERSION:-staging}
    container_name: acgs_formal_verification_staging
    environment:
      <<: *staging-environment
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
      DATABASE_URL: postgresql+asyncpg://acgs_staging:${POSTGRES_PASSWORD}@postgres:5432/acgs_staging
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      SERVICE_PORT: 8003
      MAX_WORKERS: 2
      WORKER_CONNECTIONS: 500
    ports:
      - "8003:8003"
    <<: *staging-resources
    volumes:
      - acgs_logs:/app/logs:rw
    networks:
      - acgs_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "acgs.service=core"
      - "acgs.component=formal-verification"
      - "acgs.environment=staging"
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"

  governance_synthesis:
    image: acgs/governance-synthesis:${ACGS_VERSION:-staging}
    container_name: acgs_governance_synthesis_staging
    environment:
      <<: *staging-environment
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
      DATABASE_URL: postgresql+asyncpg://acgs_staging:${POSTGRES_PASSWORD}@postgres:5432/acgs_staging
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/3
      SERVICE_PORT: 8004
      MAX_WORKERS: 2
      WORKER_CONNECTIONS: 500
    ports:
      - "8004:8004"
    <<: *staging-resources
    volumes:
      - acgs_logs:/app/logs:rw
    networks:
      - acgs_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "acgs.service=core"
      - "acgs.component=governance-synthesis"
      - "acgs.environment=staging"
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"

# Constitutional Compliance for Staging
x-constitutional-compliance-staging:
  hash: cdd01ef066bc6cf2
  environment: staging
  performance_targets:
    p99_latency_ms: 7   # Slightly relaxed from production
    throughput_rps: 75  # Moderate load testing
    cache_hit_rate: 0.80 # Good but not production level
  staging_features:
    - "Production-like configuration"
    - "Performance testing enabled"
    - "Integration testing environment"
    - "Pre-production validation"
