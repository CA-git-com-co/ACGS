# ACGS-2 Production Docker Compose Configuration
# Constitutional Hash: cdd01ef066bc6cf2
# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit
version: "3.8"

networks:
  acgs_production:
    driver: bridge
    ipam:
      config:
        - subnet: 10.200.0.0/16
    labels:
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"
      - "acgs.environment=production"

volumes:
  postgres_data:
    driver: local
    labels:
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"
      - "acgs.volume_type=database"
  redis_data:
    driver: local
    labels:
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"
      - "acgs.volume_type=cache"
  acgs_logs:
    driver: local
    labels:
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"
      - "acgs.volume_type=logs"
  prometheus_data:
    driver: local
    labels:
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"
      - "acgs.volume_type=monitoring"
  grafana_data:
    driver: local
    labels:
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"
      - "acgs.volume_type=monitoring"

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: acgs_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-acgs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-acgs_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5439:5432"
    networks:
      - acgs_production
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-acgs_user} -d ${POSTGRES_DB:-acgs_production}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: acgs_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    volumes:
      - redis_data:/data
    ports:
      - "6389:6379"
    networks:
      - acgs_production
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Core ACGS Services
  auth-service:
    build:
      context: ./services/platform_services/authentication
      dockerfile: Dockerfile
      args:
        CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    container_name: acgs_auth_service_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
      ENVIRONMENT: "production"
      DEBUG: "false"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-acgs_production}"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      SECRET_KEY: "${SECRET_KEY}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
      CSRF_SECRET_KEY: "${CSRF_SECRET_KEY}"
      CORS_ORIGINS: "${CORS_ORIGINS}"
      RATE_LIMIT_PER_MINUTE: "${RATE_LIMIT_PER_MINUTE:-100}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    ports:
      - "8016:8016"
    networks:
      - acgs_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    volumes:
      - acgs_logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  constitutional-ai-service:
    build:
      context: ./services/core/constitutional-ai
      dockerfile: Dockerfile
      args:
        CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    container_name: acgs_constitutional_ai_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
      ENVIRONMENT: "production"
      DEBUG: "false"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-acgs_production}"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/1"
      AUTH_SERVICE_URL: "http://auth-service:8016"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
      ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
    ports:
      - "8001:8001"
    networks:
      - acgs_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
    volumes:
      - acgs_logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  integrity-service:
    build:
      context: ./services/platform_services/integrity
      dockerfile: Dockerfile
      args:
        CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    container_name: acgs_integrity_service_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
      ENVIRONMENT: "production"
      DEBUG: "false"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-acgs_production}"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/2"
      AUTH_SERVICE_URL: "http://auth-service:8016"
      CONSTITUTIONAL_AI_URL: "http://constitutional-ai-service:8001"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    ports:
      - "8002:8002"
    networks:
      - acgs_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      constitutional-ai-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    volumes:
      - acgs_logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  blackboard-service:
    build:
      context: ./services/platform_services/blackboard
      dockerfile: Dockerfile
      args:
        CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    container_name: acgs_blackboard_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
      ENVIRONMENT: "production"
      DEBUG: "false"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-acgs_production}"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/4"
      AUTH_SERVICE_URL: "http://auth-service:8016"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    ports:
      - "8010:8010"
    networks:
      - acgs_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    volumes:
      - acgs_logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs_prometheus_prod
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - acgs_production
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: acgs_grafana_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - acgs_production
    depends_on:
      - prometheus
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M
          cpus: "0.1"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: acgs_nginx_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - acgs_production
    depends_on:
      - auth-service
      - constitutional-ai-service
      - integrity-service
      - multi-agent-coordinator
      - blackboard-service
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  multi-agent-coordinator:
    build:
      context: ./services/core/multi_agent_coordinator
      dockerfile: Dockerfile
      args:
        CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
    container_name: acgs_coordinator_prod
    restart: unless-stopped
    environment:
      CONSTITUTIONAL_HASH: "cdd01ef066bc6cf2"
      ENVIRONMENT: "production"
      DEBUG: "false"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-acgs_production}"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/3"
      AUTH_SERVICE_URL: "http://auth-service:8016"
      CONSTITUTIONAL_AI_URL: "http://constitutional-ai-service:8001"
      INTEGRITY_SERVICE_URL: "http://integrity-service:8002"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    ports:
      - "8008:8008"
    networks:
      - acgs_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      constitutional-ai-service:
        condition: service_healthy
      integrity-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    volumes:
      - acgs_logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
