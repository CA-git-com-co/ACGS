# ACGS-2 Production Environment Override
# Constitutional Hash: cdd01ef066bc6cf2
# Production-specific configurations and overrides

version: '3.8'

x-production-environment: &production-environment
  ENVIRONMENT: production
  DEBUG: false
  LOG_LEVEL: WARNING
  RELOAD: false
  WORKERS: 4

x-production-security: &production-security
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m

x-production-resources: &production-resources
  deploy:
    resources:
      reservations:
        memory: 256M
        cpus: '0.25'
      limits:
        memory: 2G
        cpus: '2.0'
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s

networks:
  acgs_network:
    driver: bridge
    name: acgs-production-network
    labels:
      - "acgs.network=production"
      - "acgs.constitutional_hash=cdd01ef066bc6cf2"

services:
  # Production Database Configuration
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: acgs_production
      POSTGRES_USER: acgs_prod
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    ports:
      - "5439:5432"
    <<: *production-security
    <<: *production-resources
    deploy:
      resources:
        reservations:
          memory: 1G
          cpus: '0.5'
        limits:
          memory: 4G
          cpus: '2.0'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${ACGS_ROOT}/infrastructure/scripts/docker/init-db-prod.sql:/docker-entrypoint-initdb.d/init-db-prod.sql:ro
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /var/run/postgresql:noexec,nosuid,size=100m

  grafana:
    image: grafana/grafana:10.2.0
    container_name: acgs-grafana-production
    depends_on:
    - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: true
      GF_SERVER_ROOT_URL: https://grafana.acgs.internal
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
    networks:
    - acgs_network
    ports:
    - 3000:3000
    restart: unless-stopped
    <<: *production-resources
    volumes:
    - grafana_data:/var/lib/grafana
    - ${ACGS_ROOT}/infrastructure/monitoring/grafana/dashboards-prod:/etc/grafana/provisioning/dashboards:ro
  hybrid-router:
    build:
      context: ./services/shared/routing
      dockerfile: Dockerfile.production
    container_name: acgs-hybrid-router-production
    depends_on:
    - postgres
    - redis
    environment:
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - ENVIRONMENT=production
    - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    - GROQ_API_KEY=${GROQ_API_KEY}
    - REDIS_URL=redis://redis:6379/0
    - DATABASE_URL=postgresql+asyncpg://acgs_user:${POSTGRES_PASSWORD}@postgres:5432/acgs_production
    expose:
    - '8000'
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      timeout: 10s
    networks:
    - acgs-production
    restart: unless-stopped
  nginx:
    container_name: acgs-nginx-production
    depends_on:
    - hybrid-router
    environment:
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    image: nginx:alpine
    networks:
    - acgs-production
    ports:
    - 80:80
    - 443:443
    restart: unless-stopped
    volumes:
    - ./nginx.production.conf:/etc/nginx/nginx.conf:ro
    - ssl_certs:/etc/ssl:ro
  postgres:
    container_name: acgs-postgres-production
    environment:
    - POSTGRES_USER=acgs_user
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=acgs_production
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    expose:
    - '5432'
    healthcheck:
      interval: 30s
      retries: 5
      test:
      - CMD-SHELL
      - pg_isready -U acgs_user -d acgs_production
      timeout: 10s
    image: postgres:15-alpine
    networks:
    - acgs-production
    restart: unless-stopped
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  prometheus:
    container_name: acgs-prometheus-production
    environment:
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    image: prom/prometheus:latest
    networks:
    - acgs-production
    ports:
    - 9090:9090
    restart: unless-stopped
    volumes:
    - ./monitoring/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
    - ./monitoring/rules:/etc/prometheus/rules:ro
    - prometheus_data:/prometheus
  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    container_name: acgs-redis-production
    environment:
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    expose:
    - '6379'
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - redis-cli
      - --raw
      - incr
      - ping
      timeout: 10s
    image: redis:7-alpine
    networks:
    - acgs-production
    restart: unless-stopped
    volumes:
    - redis_data:/data
version: '3.8'
volumes:
  grafana_data: {}
  postgres_data: {}
  prometheus_data: {}
  redis_data: {}
  ssl_certs: {}

# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit rates

**Constitutional Hash**: `cdd01ef066bc6cf2`

**Constitutional Hash**: `cdd01ef066bc6cf2`
# Constitutional Compliance: cdd01ef066bc6cf2
# Implementation Status: ðŸ”„ IN PROGRESS

# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit rates
# Constitutional Compliance: cdd01ef066bc6cf2
# Implementation Status: ðŸ”„ IN PROGRESS

---

**Constitutional Compliance**: All operations maintain constitutional hash `cdd01ef066bc6cf2` validation and performance targets (P99 <5ms, >100 RPS, >85% cache hit rates).
