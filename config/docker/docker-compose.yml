# ACGS/docker-compose.yml
version: '3.8'

services:
  postgres_db:
    image: postgres:15-alpine
    container_name: acgs_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-acgs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-acgs_password}
      POSTGRES_DB: ${POSTGRES_DB:-acgs_pgp_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Expose PostgreSQL port to host (optional, for direct access)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-acgs_user} -d ${POSTGRES_DB:-acgs_pgp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  alembic-runner:
    build:
      context: ../.. # Build context is the root directory
      dockerfile: ./src/backend/shared/Dockerfile.alembic
    container_name: acgs_alembic_runner
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      # POSTGRES_USER and POSTGRES_PASSWORD needed by wait-for-postgres.sh
      - POSTGRES_USER=${POSTGRES_USER:-acgs_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-acgs_password}
    # Command to wait for DB, run migrations, then exit.
    command: >
      sh -c "echo 'Waiting for database...' &&
             chmod +x /app/shared/wait-for-postgres.sh &&
             /app/shared/wait-for-postgres.sh postgres_db ${POSTGRES_USER:-acgs_user} ${POSTGRES_PASSWORD:-acgs_password} echo 'DB Ready' &&
             echo 'Running Alembic migrations...' &&
             alembic -c /app/alembic.ini upgrade head &&
             echo 'Migrations complete. Container will exit.'"
    # This service should run to completion and exit.
    # No restart policy is needed unless you want it to retry on failure.

  auth_service:
    build: ../../src/backend/auth_service
    container_name: acgs_auth_service
    expose:
      - "8000" # Internal port only, Nginx will proxy
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      - SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-your_strong_jwt_secret_key_for_auth_service}
      - ALGORITHM=${AUTH_SERVICE_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${AUTH_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${AUTH_SERVICE_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - CSRF_SECRET_KEY=${AUTH_SERVICE_CSRF_SECRET_KEY:-your_strong_csrf_secret_key_for_auth_service}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres_db:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully # Depends on alembic-runner exiting cleanly
    volumes:
      - ../../src/backend/auth_service:/app
      - ../../src/backend/shared:/app/shared
    restart: unless-stopped

  ac_service:
    build: ../../src/backend/ac_service
    container_name: acgs_ac_service
    ports:
      - "8001:8001" # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres_db:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully
    volumes:
      - ../../src/backend/ac_service:/app
      - ../../src/backend/shared:/app/shared
    restart: unless-stopped

  integrity_service:
    build: ../../src/backend/integrity_service
    container_name: acgs_integrity_service
    ports:
      - "8002:8002" # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres_db:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully
    volumes:
      - ../../src/backend/integrity_service:/app
      - ../../src/backend/shared:/app/shared
    restart: unless-stopped

  fv_service:
    build: ../../src/backend/fv_service
    container_name: acgs_fv_service
    ports:
      - "8003:8003" # Internal port
    environment:
      - VERIFICATION_TOOL_ENDPOINT=${VERIFICATION_TOOL_ENDPOINT:-http://mock_verification_tool:80/verify}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      ac_service:
        condition: service_started # Or healthy if healthcheck is added to ac_service
      integrity_service:
        condition: service_started # Or healthy
    volumes:
      - ../../src/backend/fv_service:/app
      - ../../src/backend/shared:/app/shared
    restart: unless-stopped

  gs_service:
    build: ../../src/backend/gs_service
    container_name: acgs_gs_service
    ports:
      - "8004:8004" # Internal port
    environment:
      - LLM_API_ENDPOINT=${LLM_API_ENDPOINT:-http://mock_llm_service/generate}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - FV_SERVICE_URL=${FV_SERVICE_URL:-http://fv_service:8003/api/v1}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      ac_service:
        condition: service_started
      integrity_service:
        condition: service_started
      fv_service:
        condition: service_started
    volumes:
      - ../../src/backend/gs_service:/app
      - ../../src/backend/shared:/app/shared
    restart: unless-stopped

  pgc_service:
    build: ../../src/backend/pgc_service
    container_name: acgs_pgc_service
    ports:
      - "8005:8005" # Internal port
    environment:
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      integrity_service:
        condition: service_started
    volumes:
      - ../../src/backend/pgc_service:/app
      - ../../src/backend/shared:/app/shared
    restart: unless-stopped

  nginx_gateway:
    image: nginx:1.25-alpine
    container_name: acgs_nginx_gateway
    ports:
      - "8000:80" # Main entry point for backend APIs via Nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth_service
      - ac_service
      - integrity_service
      - fv_service
      - gs_service
      - pgc_service
    restart: unless-stopped

  frontend:
    build: ../../src/frontend
    container_name: acgs_frontend
    ports:
      - "3000:3000" # React development server port (host:container)
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-/api} # Points to Nginx gateway
      - CHOKIDAR_USEPOLLING=true # For Docker hot-reloading on some systems
    volumes:
      - ../../src/frontend:/app
      - /app/node_modules # Use node_modules from image, not host, to avoid OS conflicts
    depends_on:
      - nginx_gateway # Frontend makes API calls through Nginx
    restart: unless-stopped

volumes:
  postgres_data:
