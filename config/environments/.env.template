# ACGS Multi-Agent Coordination System - MCP Server Stack
# Environment Configuration Template
# Constitutional Hash: cdd01ef066bc6cf2
# 
# SECURITY NOTICE:
# - Never commit actual secrets to version control
# - Use strong, unique passwords for production
# - Rotate secrets regularly (every 90 days minimum)
# - Store production secrets in secure secret management systems

# =============================================================================
# ACGS Constitutional Compliance
# =============================================================================
# Constitutional compliance hash - DO NOT MODIFY
CONSTITUTIONAL_HASH=cdd01ef066bc6cf2

# Environment type (development, staging, production)
ENVIRONMENT=development

# Logging configuration
LOG_LEVEL=INFO
LOG_FORMAT=json

# =============================================================================
# GitHub Integration (Required for GitHub MCP Service)
# =============================================================================
# GitHub Personal Access Token
# Required scopes: repo, read:org, read:user
# Generate at: https://github.com/settings/tokens
# SECURITY: Use fine-grained tokens when possible
GITHUB_TOKEN=ghp_your_github_token_here

# GitHub API configuration
GITHUB_API_BASE_URL=https://api.github.com
GITHUB_RATE_LIMIT_REQUESTS=5000
GITHUB_RATE_LIMIT_WINDOW=3600

# =============================================================================
# MCP Service Configuration
# =============================================================================
# MCP Aggregator settings
MCP_AGGREGATOR_PORT=3000
MCP_AGGREGATOR_TIMEOUT=30s
MCP_AGGREGATOR_RETRY_COUNT=3

# Filesystem MCP settings
MCP_FILESYSTEM_PORT=3001
MCP_FILESYSTEM_ALLOWED_PATH=/workspace
MCP_FILESYSTEM_MAX_FILE_SIZE=100MB
MCP_FILESYSTEM_ALLOWED_EXTENSIONS=.txt,.md,.json,.yaml,.yml,.py,.js,.ts

# GitHub MCP settings
MCP_GITHUB_PORT=3002

# Browser MCP settings
MCP_BROWSER_PORT=3003
MCP_BROWSER_HEADLESS=true
MCP_BROWSER_TIMEOUT=30000
MCP_BROWSER_MAX_CONCURRENT_PAGES=5
MCP_BROWSER_DISABLE_IMAGES=true
MCP_BROWSER_DISABLE_JAVASCRIPT=false

# =============================================================================
# Security Configuration
# =============================================================================
# Service user configuration (non-root)
SERVICE_USER_ID=1000
SERVICE_GROUP_ID=1000

# Network security
BIND_ADDRESS=127.0.0.1
NETWORK_SUBNET=172.21.0.0/16

# Container security
ENABLE_SECCOMP=true
ENABLE_APPARMOR=true
DROP_ALL_CAPABILITIES=true

# =============================================================================
# Performance & Resource Limits
# =============================================================================
# Memory limits (in MB)
MCP_AGGREGATOR_MEMORY_LIMIT=512
MCP_FILESYSTEM_MEMORY_LIMIT=256
MCP_GITHUB_MEMORY_LIMIT=512
MCP_BROWSER_MEMORY_LIMIT=1024

# CPU limits (in cores)
MCP_AGGREGATOR_CPU_LIMIT=0.5
MCP_FILESYSTEM_CPU_LIMIT=0.25
MCP_GITHUB_CPU_LIMIT=0.5
MCP_BROWSER_CPU_LIMIT=0.75

# Shared memory for browser service (in GB)
BROWSER_SHM_SIZE=2

# =============================================================================
# Health Check Configuration
# =============================================================================
# Health check intervals (in seconds)
HEALTH_CHECK_INTERVAL=15
HEALTH_CHECK_TIMEOUT=5
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=30

# Service startup timeouts
MCP_AGGREGATOR_START_PERIOD=30
MCP_FILESYSTEM_START_PERIOD=20
MCP_GITHUB_START_PERIOD=20
MCP_BROWSER_START_PERIOD=30

# =============================================================================
# Monitoring & Observability
# =============================================================================
# Enable monitoring features
MONITORING_ENABLED=true
METRICS_ENABLED=true
TRACING_ENABLED=false

# Prometheus metrics
PROMETHEUS_PORT=9090
PROMETHEUS_SCRAPE_INTERVAL=15s

# Grafana dashboard
GRAFANA_PORT=3001
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=change_me_in_production

# =============================================================================
# Integration with Existing ACGS Infrastructure
# =============================================================================
# ACGS service endpoints (avoid port conflicts)
ACGS_AUTH_SERVICE_URL=http://localhost:8016
ACGS_CONSTITUTIONAL_AI_URL=http://localhost:8001
ACGS_INTEGRITY_SERVICE_URL=http://localhost:8002
ACGS_FORMAL_VERIFICATION_URL=http://localhost:8003
ACGS_GOVERNANCE_SYNTHESIS_URL=http://localhost:8004
ACGS_POLICY_GOVERNANCE_URL=http://localhost:8005
ACGS_EVOLUTIONARY_COMPUTATION_URL=http://localhost:8006
ACGS_CONSENSUS_ENGINE_URL=http://localhost:8007
ACGS_MULTI_AGENT_COORDINATOR_URL=http://localhost:8008
ACGS_WORKER_AGENTS_URL=http://localhost:8009
ACGS_BLACKBOARD_SERVICE_URL=http://localhost:8010
ACGS_CODE_ANALYSIS_SERVICE_URL=http://localhost:8011
ACGS_CONTEXT_SERVICE_URL=http://localhost:8012

# Claude-MCP-ACGS Integration Settings
CLAUDE_MCP_INTEGRATION_ENABLED=true
CLAUDE_AGENT_COORDINATION_ENABLED=true
MCP_ACGS_CONSTITUTIONAL_VALIDATION=true
MCP_ACGS_AUDIT_LOGGING=true
MCP_ACGS_PERFORMANCE_MONITORING=true

# ACGS database configuration (existing infrastructure)
ACGS_POSTGRES_HOST=localhost
ACGS_POSTGRES_PORT=5439
ACGS_POSTGRES_DB=acgs_db
ACGS_POSTGRES_USER=acgs_user
ACGS_POSTGRES_PASSWORD=acgs_password

# ACGS Redis configuration (existing infrastructure)
ACGS_REDIS_HOST=localhost
ACGS_REDIS_PORT=6389
ACGS_REDIS_DB=0

# =============================================================================
# Development & Testing Configuration
# =============================================================================
# Development mode settings
DEV_MODE=false
DEBUG_LOGGING=false
ENABLE_CORS=false

# Testing configuration
TEST_MODE=false
TEST_GITHUB_TOKEN=test_token_for_ci
TEST_WORKSPACE_PATH=/tmp/test_workspace

# =============================================================================
# Backup & Disaster Recovery
# =============================================================================
# Backup configuration
BACKUP_ENABLED=true
BACKUP_INTERVAL=24h
BACKUP_RETENTION_DAYS=30
BACKUP_STORAGE_PATH=/var/backups/acgs-mcp

# Disaster recovery
DR_ENABLED=false
DR_REPLICA_COUNT=1
DR_FAILOVER_TIMEOUT=30s

# =============================================================================
# Security Guidelines & Best Practices
# =============================================================================
# 
# 1. TOKEN SECURITY:
#    - Use fine-grained GitHub tokens with minimal required scopes
#    - Rotate tokens every 90 days
#    - Never log or expose tokens in application output
#    - Use environment-specific tokens (dev/staging/prod)
#
# 2. NETWORK SECURITY:
#    - Bind services to localhost (127.0.0.1) only
#    - Use custom Docker networks for service isolation
#    - Implement proper firewall rules in production
#    - Enable TLS for all external communications
#
# 3. CONTAINER SECURITY:
#    - Run all services as non-root user (1000:1000)
#    - Drop all capabilities and add only required ones
#    - Use read-only filesystems where possible
#    - Enable security profiles (seccomp, AppArmor)
#
# 4. RESOURCE MANAGEMENT:
#    - Set appropriate memory and CPU limits
#    - Monitor resource usage and adjust limits as needed
#    - Implement proper health checks and restart policies
#    - Use tmpfs for temporary files to avoid disk I/O
#
# 5. MONITORING & ALERTING:
#    - Enable comprehensive logging and monitoring
#    - Set up alerts for service failures and resource exhaustion
#    - Implement distributed tracing for complex workflows
#    - Regular security audits and vulnerability scanning
#
# 6. CONSTITUTIONAL COMPLIANCE:
#    - Never modify the constitutional hash (cdd01ef066bc6cf2)
#    - Ensure all services validate constitutional compliance
#    - Implement audit trails for all coordination decisions
#    - Regular compliance validation and reporting
#
# =============================================================================
# Production Deployment Checklist
# =============================================================================
#
# Before deploying to production:
# □ Replace all default passwords and tokens
# □ Configure proper TLS certificates
# □ Set up monitoring and alerting
# □ Configure backup and disaster recovery
# □ Perform security audit and penetration testing
# □ Validate constitutional compliance (hash: cdd01ef066bc6cf2)
# □ Test failover and recovery procedures
# □ Document operational procedures
# □ Train operations team on troubleshooting
# □ Establish incident response procedures
