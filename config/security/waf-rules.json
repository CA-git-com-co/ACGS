{
  "waf_configuration": {
    "name": "ACGS-PGP-Security-Rules",
    "description": "WAF rules for ACGS-PGP based on Sprint 0 security findings",
    "version": "1.0.0",
    "last_updated": "2025-01-29",
    "priority_ranges": {
      "critical": "100-199",
      "high": "200-299", 
      "medium": "300-399",
      "low": "400-499"
    }
  },
  "rule_groups": {
    "injection_protection": {
      "description": "Protection against injection attacks discovered in S0-1",
      "priority_base": 100,
      "rules": [
        {
          "id": "101",
          "name": "BlockDatalogInjection",
          "description": "Block Datalog injection patterns found in enforcement.py",
          "priority": 101,
          "enabled": true,
          "action": "block",
          "conditions": {
            "or": [
              {
                "field": "request_body",
                "operator": "contains",
                "value": "'; drop_all_rules"
              },
              {
                "field": "request_body", 
                "operator": "regex",
                "value": "allow\\('.*'\\s*(;|and|or)\\s*"
              },
              {
                "field": "request_body",
                "operator": "contains_any",
                "values": ["'nested'", "user()", "action,", "resource;"]
              }
            ]
          },
          "response": {
            "status_code": 403,
            "body": "Datalog injection attempt blocked",
            "headers": {
              "X-WAF-Rule": "BlockDatalogInjection"
            }
          }
        },
        {
          "id": "102", 
          "name": "BlockSQLInjection",
          "description": "Standard SQL injection protection",
          "priority": 102,
          "enabled": true,
          "action": "block",
          "conditions": {
            "or": [
              {
                "field": "request_body",
                "operator": "regex",
                "value": "('|(\\-\\-)|(;)|(\\||\\|)|(\\*|\\*))"
              },
              {
                "field": "query_string",
                "operator": "contains_any", 
                "values": ["'; DROP", "' OR 1=1", "UNION SELECT", "'; DELETE"]
              }
            ]
          },
          "response": {
            "status_code": 403,
            "body": "SQL injection attempt blocked"
          }
        }
      ]
    },
    "api_endpoint_protection": {
      "description": "Protection for sensitive API endpoints discovered in S0-2",
      "priority_base": 200,
      "rules": [
        {
          "id": "201",
          "name": "ProtectExportEndpoints", 
          "description": "Require admin authorization for export endpoints",
          "priority": 201,
          "enabled": true,
          "action": "block",
          "conditions": {
            "and": [
              {
                "field": "uri_path",
                "operator": "contains",
                "value": "/export"
              },
              {
                "not": {
                  "field": "header_authorization",
                  "operator": "regex",
                  "value": "Bearer\\s+(admin-token|admin-[a-zA-Z0-9]+)"
                }
              }
            ]
          },
          "response": {
            "status_code": 403,
            "body": "Admin privileges required for data export",
            "headers": {
              "X-WAF-Rule": "ProtectExportEndpoints"
            }
          }
        },
        {
          "id": "202",
          "name": "RateLimitSensitiveEndpoints",
          "description": "Rate limit audit and export endpoints",
          "priority": 202,
          "enabled": true,
          "action": "rate_limit",
          "conditions": {
            "or": [
              {
                "field": "uri_path",
                "operator": "starts_with",
                "value": "/api/v1/audit"
              },
              {
                "field": "uri_path", 
                "operator": "contains",
                "value": "/export"
              }
            ]
          },
          "rate_limit": {
            "requests": 10,
            "window": 60,
            "key": "client_ip"
          },
          "response": {
            "status_code": 429,
            "body": "Rate limit exceeded for sensitive endpoint"
          }
        }
      ]
    },
    "authentication_protection": {
      "description": "Authentication and authorization protection",
      "priority_base": 300,
      "rules": [
        {
          "id": "301",
          "name": "ValidateJWTFormat",
          "description": "Validate JWT token format",
          "priority": 301,
          "enabled": true,
          "action": "block",
          "conditions": {
            "and": [
              {
                "field": "header_authorization",
                "operator": "exists"
              },
              {
                "not": {
                  "field": "header_authorization",
                  "operator": "regex", 
                  "value": "^Bearer\\s+[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$"
                }
              }
            ]
          },
          "response": {
            "status_code": 401,
            "body": "Invalid JWT token format"
          }
        },
        {
          "id": "302",
          "name": "BlockUnauthorizedAdminAccess",
          "description": "Block access to admin endpoints without proper authorization",
          "priority": 302,
          "enabled": true,
          "action": "block",
          "conditions": {
            "and": [
              {
                "field": "uri_path",
                "operator": "contains",
                "value": "/admin"
              },
              {
                "not": {
                  "field": "header_authorization",
                  "operator": "contains",
                  "value": "admin-token"
                }
              }
            ]
          },
          "response": {
            "status_code": 403,
            "body": "Admin access denied"
          }
        }
      ]
    },
    "owasp_protection": {
      "description": "OWASP Top 10 protection rules",
      "priority_base": 400,
      "rules": [
        {
          "id": "401",
          "name": "BlockXSSAttempts",
          "description": "Block cross-site scripting attempts",
          "priority": 401,
          "enabled": true,
          "action": "block",
          "conditions": {
            "or": [
              {
                "field": "request_body",
                "operator": "regex",
                "value": "<script[^>]*>.*?</script>"
              },
              {
                "field": "query_string",
                "operator": "contains_any",
                "values": ["<script>", "javascript:", "onload=", "onerror="]
              }
            ]
          },
          "response": {
            "status_code": 403,
            "body": "XSS attempt blocked"
          }
        },
        {
          "id": "402",
          "name": "BlockDangerousFileUploads",
          "description": "Block uploads of dangerous file types",
          "priority": 402,
          "enabled": true,
          "action": "block",
          "conditions": {
            "and": [
              {
                "field": "http_method",
                "operator": "equals",
                "value": "POST"
              },
              {
                "field": "header_content_type",
                "operator": "contains",
                "value": "multipart/form-data"
              },
              {
                "field": "request_body",
                "operator": "regex",
                "value": "\\.(exe|bat|sh|cmd|scr|vbs|jar)[\"\\'\\s]"
              }
            ]
          },
          "response": {
            "status_code": 403,
            "body": "Dangerous file upload blocked"
          }
        }
      ]
    }
  },
  "global_settings": {
    "default_action": "allow",
    "log_blocked_requests": true,
    "log_allowed_requests": false,
    "response_headers": {
      "X-WAF-Enabled": "true",
      "X-WAF-Version": "1.0.0"
    },
    "rate_limiting": {
      "global_limit": {
        "requests": 1000,
        "window": 300,
        "key": "client_ip"
      }
    }
  },
  "monitoring": {
    "metrics": [
      "blocked_requests_total",
      "allowed_requests_total", 
      "rule_matches_by_id",
      "response_time_impact",
      "false_positive_rate"
    ],
    "alerts": [
      {
        "name": "high_volume_attack",
        "condition": "blocked_requests_total > 1000 in 5m",
        "severity": "critical"
      },
      {
        "name": "new_attack_pattern",
        "condition": "unique_blocked_patterns > 10 in 1h", 
        "severity": "high"
      },
      {
        "name": "false_positive_spike",
        "condition": "false_positive_rate > 0.05 in 1h",
        "severity": "medium"
      }
    ]
  },
  "testing": {
    "test_cases": [
      {
        "name": "datalog_injection_test",
        "request": {
          "method": "POST",
          "path": "/api/v1/policy/evaluate",
          "body": "{\"user_id\": \"admin'; drop_all_rules; allow('admin\"}"
        },
        "expected_response": {
          "status_code": 403,
          "blocked_by_rule": "101"
        }
      },
      {
        "name": "unauthorized_export_test",
        "request": {
          "method": "POST",
          "path": "/api/v1/audit/export",
          "headers": {
            "Authorization": "Bearer invalid-token"
          }
        },
        "expected_response": {
          "status_code": 403,
          "blocked_by_rule": "201"
        }
      }
    ]
  }
}
