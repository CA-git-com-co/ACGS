# Constitutional Hash: cdd01ef066bc6cf2
# ACGS-1 HAProxy Load Balancer Docker Compose
# Phase 2 - Enterprise Scalability & Performance
# High availability load balancing for >1000 concurrent users

version: '3.8'

services:
  # HAProxy Load Balancer
  haproxy:
    image: haproxy:2.8-alpine
    container_name: acgs_haproxy
    ports:
      - '80:80' # HTTP
      - '443:443' # HTTPS
      - '8080:8080' # HAProxy Stats
      - '5433:5433' # PostgreSQL Load Balancer
      - '6380:6380' # Redis Load Balancer
      - '9090:9090' # Monitoring Load Balancer
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./errors:/etc/haproxy/errors:ro
      - haproxy_socket:/var/run/haproxy
    networks:
      - acgs_network
    restart: unless-stopped
    depends_on:
      - haproxy-exporter
    environment:
      - HAPROXY_USER=haproxy
      - HAPROXY_GROUP=haproxy
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    ulimits:
      nofile: 65536
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:8080/stats']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # HAProxy Exporter for Prometheus monitoring
  haproxy-exporter:
    image: prom/haproxy-exporter:latest
    container_name: acgs_haproxy_exporter
    ports:
      - '9101:9101'
    command:
      - '--haproxy.scrape-uri=http://admin:acgs_haproxy_admin_2024@haproxy:8080/stats?stats;csv'
      - '--web.listen-address=:9101'
      - '--web.telemetry-path=/metrics'
    networks:
      - acgs_network
    restart: unless-stopped
    depends_on:
      - haproxy
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:9101/metrics']
      interval: 30s
      timeout: 10s
      retries: 3

  # HAProxy Log Aggregator (rsyslog)
  haproxy-logs:
    image: rsyslog/syslog_appliance_alpine:latest
    container_name: acgs_haproxy_logs
    ports:
      - '514:514/udp'
    volumes:
      - haproxy_logs:/var/log
      - ./rsyslog.conf:/etc/rsyslog.conf:ro
    networks:
      - acgs_network
    restart: unless-stopped
    environment:
      - RSYSLOG_CONF=/etc/rsyslog.conf

  # HAProxy Configuration Validator
  haproxy-validator:
    image: haproxy:2.8-alpine
    container_name: acgs_haproxy_validator
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    command: ['haproxy', '-f', '/usr/local/etc/haproxy/haproxy.cfg', '-c']
    networks:
      - acgs_network
    profiles:
      - tools

  # HAProxy Backup Instance (for high availability)
  haproxy-backup:
    image: haproxy:2.8-alpine
    container_name: acgs_haproxy_backup
    ports:
      - '8081:80' # Backup HTTP
      - '8443:443' # Backup HTTPS
      - '8082:8080' # Backup Stats
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./errors:/etc/haproxy/errors:ro
      - haproxy_backup_socket:/var/run/haproxy
    networks:
      - acgs_network
    restart: unless-stopped
    environment:
      - HAPROXY_USER=haproxy
      - HAPROXY_GROUP=haproxy
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    ulimits:
      nofile: 65536
    profiles:
      - backup
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost:8080/stats']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  haproxy_socket:
    driver: local
  haproxy_backup_socket:
    driver: local
  haproxy_logs:
    driver: local

networks:
  acgs_network:
    external: true
