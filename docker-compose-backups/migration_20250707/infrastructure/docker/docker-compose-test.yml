# ACGS/docker-compose-test.yml - Simplified for testing shared module imports
# Constitutional Hash: cdd01ef066bc6cf2
version: '3.8'

services:
  postgres_db:
    image: postgres:15-alpine
    container_name: acgs_postgres_db_test
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-acgs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-acgs_password}
      POSTGRES_DB: ${POSTGRES_DB:-acgs_pgp_db}
    volumes:
      - postgres_data_test:/var/lib/postgresql/data
    ports:
      - '5434:5432' # Expose PostgreSQL port to host (optional, for direct access)
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-acgs_user} -d ${POSTGRES_DB:-acgs_pgp_db}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth_service:
    build: ./services/platform/authentication/auth_service
    container_name: acgs_auth_service_test
    ports:
      - '8000:8000' # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      - SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-your_strong_jwt_secret_key_for_auth_service}
      - ALGORITHM=${AUTH_SERVICE_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${AUTH_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${AUTH_SERVICE_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - CSRF_SECRET_KEY=${AUTH_SERVICE_CSRF_SECRET_KEY:-your_strong_csrf_secret_key_for_auth_service}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./services/platform/authentication/auth_service:/app
      - ./services/shared:/app/shared
    restart: unless-stopped

  ac_service:
    build: ./services/core/constitutional-ai/ac_service
    container_name: acgs_ac_service_test
    ports:
      - '8001:8001' # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./services/core/constitutional-ai/ac_service:/app
      - ./services/shared:/app/shared
    restart: unless-stopped

  integrity_service:
    build: ./services/platform/integrity/integrity_service
    container_name: acgs_integrity_service_test
    ports:
      - '8002:8002' # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://acgs_user:acgs_password@postgres_db:5432/acgs_pgp_db}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./services/platform/integrity/integrity_service:/app
      - ./services/shared:/app/shared
    restart: unless-stopped

  fv_service:
    build: ./services/core/formal-verification/fv_service
    container_name: acgs_fv_service_test
    ports:
      - '8003:8003' # Internal port
    environment:
      - VERIFICATION_TOOL_ENDPOINT=${VERIFICATION_TOOL_ENDPOINT:-http://mock_verification_tool:80/verify}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      ac_service:
        condition: service_started
      integrity_service:
        condition: service_started
    volumes:
      - ./services/core/formal-verification/fv_service:/app
      - ./services/shared:/app/shared
    restart: unless-stopped

  gs_service:
    build: ./services/core/governance-synthesis/gs_service
    container_name: acgs_gs_service_test
    ports:
      - '8004:8004' # Internal port
    environment:
      - LLM_API_ENDPOINT=${LLM_API_ENDPOINT:-http://mock_llm_service/generate}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - FV_SERVICE_URL=${FV_SERVICE_URL:-http://fv_service:8003/api/v1}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      ac_service:
        condition: service_started
      integrity_service:
        condition: service_started
      fv_service:
        condition: service_started
    volumes:
      - ./services/core/governance-synthesis/gs_service:/app
      - ./services/shared:/app/shared
    restart: unless-stopped

  pgc_service:
    build: ./services/core/policy-governance/pgc_service
    container_name: acgs_pgc_service_test
    ports:
      - '8005:8005' # Internal port
    environment:
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      integrity_service:
        condition: service_started
    volumes:
      - ./services/core/policy-governance/pgc_service:/app
      - ./services/shared:/app/shared
    restart: unless-stopped

volumes:
  postgres_data_test:
