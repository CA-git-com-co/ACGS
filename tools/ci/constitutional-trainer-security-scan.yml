name: Constitutional Trainer Security Scan
true:
  push:
    branches:
    - main
    - master
    - develop
    paths:
    - services/core/constitutional-trainer/**
    - infrastructure/kubernetes/acgs-lite/**
    - scripts/security/**
  pull_request:
    branches:
    - main
    - master
    paths:
    - services/core/constitutional-trainer/**
    - infrastructure/kubernetes/acgs-lite/**
  schedule:
  - cron: 0 2 * * 1
  workflow_dispatch:
    inputs:
      scan_type:
        description: Type of security scan to run
        required: false
        default: all
        type: choice
        options:
        - all
        - container-only
        - k8s-only
        - sast-only
      fail_on_high:
        description: Fail on high severity vulnerabilities
        required: false
        default: true
        type: boolean
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: constitutional-trainer
  PYTHON_VERSION: '3.11'
jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read
    strategy:
      matrix:
        scan-type:
        - container-vulnerabilities
        - k8s-manifest-audit
        - static-analysis
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: 'type=ref,event=branch

          type=ref,event=pr

          type=sha,prefix={{branch}}-

          type=raw,value=latest,enable={{is_default_branch}}

          '
    - name: Build Container Image
      if: matrix.scan-type == 'container-vulnerabilities'
      uses: docker/build-push-action@v5
      with:
        context: ./services/core/constitutional-trainer
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Install Security Tools
      run: '# Install Trivy

        sudo apt-get update

        sudo apt-get install wget apt-transport-https gnupg lsb-release

        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo
        apt-key add -

        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc)
        main" | sudo tee -a /etc/apt/sources.list.d/trivy.list

        sudo apt-get update

        sudo apt-get install trivy


        # Install kube-score

        wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz

        tar xzf kube-score_1.16.1_linux_amd64.tar.gz

        sudo mv kube-score /usr/local/bin/


        # Install Python security tools

        pip install bandit[toml] safety

        '
    - name: Run Container Vulnerability Scan
      if: matrix.scan-type == 'container-vulnerabilities'
      run: "echo \"\U0001F50D Running container vulnerability scan...\"\n\n# Create\
        \ results directory\nmkdir -p security-scan-results\n\n# Get the first tag\
        \ from metadata\nIMAGE_TAG=$(echo \"${{ steps.meta.outputs.tags }}\" | head\
        \ -n1)\n\n# Run Trivy scan\ntrivy image \\\n  --format sarif \\\n  --output\
        \ security-scan-results/trivy-results.sarif \\\n  --severity HIGH,CRITICAL\
        \ \\\n  \"$IMAGE_TAG\"\n\n# Run Trivy scan for JSON output\ntrivy image \\\
        \n  --format json \\\n  --output security-scan-results/trivy-results.json\
        \ \\\n  \"$IMAGE_TAG\"\n\n# Generate summary\ntrivy image \\\n  --format table\
        \ \\\n  --output security-scan-results/trivy-summary.txt \\\n  \"$IMAGE_TAG\"\
        \n\n# Check for high/critical vulnerabilities\nHIGH_CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]?\
        \ | select(.Severity == \"HIGH\" or .Severity == \"CRITICAL\")] | length'\
        \ security-scan-results/trivy-results.json)\n\necho \"Found $HIGH_CRITICAL_COUNT\
        \ high/critical vulnerabilities\"\n\nif [[ \"$HIGH_CRITICAL_COUNT\" -gt 0\
        \ && \"${{ inputs.fail_on_high || 'true' }}\" == \"true\" ]]; then\n  echo\
        \ \"::error::Found $HIGH_CRITICAL_COUNT high/critical vulnerabilities\"\n\
        \  exit 1\nfi\n"
    - name: Run Kubernetes Manifest Audit
      if: matrix.scan-type == 'k8s-manifest-audit'
      run: "echo \"\U0001F50D Running Kubernetes manifest security audit...\"\n\n\
        mkdir -p security-scan-results\n\n# Run kube-score on all manifests\nfind\
        \ infrastructure/kubernetes/acgs-lite -name \"*.yaml\" -exec kube-score score\
        \ {} \\; > security-scan-results/kube-score-results.txt || true\n\n# Check\
        \ for security issues\nif grep -q \"CRITICAL\\|HIGH\" security-scan-results/kube-score-results.txt;\
        \ then\n  echo \"::warning::Found security issues in Kubernetes manifests\"\
        \nfi\n\n# Validate specific security requirements\necho \"Validating security\
        \ requirements...\"\n\n# Check for runAsNonRoot\nif ! grep -r \"runAsNonRoot:\
        \ true\" infrastructure/kubernetes/acgs-lite/; then\n  echo \"::warning::runAsNonRoot:\
        \ true not found in manifests\"\nfi\n\n# Check for resource limits\nif ! grep\
        \ -r \"limits:\" infrastructure/kubernetes/acgs-lite/; then\n  echo \"::warning::Resource\
        \ limits not found in manifests\"\nfi\n\n# Check for NetworkPolicy\nif ! find\
        \ infrastructure/kubernetes/acgs-lite -name \"*network*policy*\" | grep -q\
        \ .; then\n  echo \"::warning::No NetworkPolicy manifests found\"\nfi\n"
    - name: Run Static Application Security Testing
      if: matrix.scan-type == 'static-analysis'
      run: "echo \"\U0001F50D Running static application security testing...\"\n\n\
        mkdir -p security-scan-results\n\n# Run Bandit SAST\nbandit -r services/core/constitutional-trainer\
        \ \\\n  -f json \\\n  -o security-scan-results/bandit-results.json \\\n  --skip\
        \ B101,B601 || true\n\n# Generate human-readable report\nbandit -r services/core/constitutional-trainer\
        \ \\\n  -f txt \\\n  -o security-scan-results/bandit-report.txt \\\n  --skip\
        \ B101,B601 || true\n\n# Run Safety check for known vulnerabilities in dependencies\n\
        if [[ -f services/core/constitutional-trainer/requirements.txt ]]; then\n\
        \  safety check \\\n    --json \\\n    --output security-scan-results/safety-results.json\
        \ \\\n    -r services/core/constitutional-trainer/requirements.txt || true\n\
        fi\n\n# Check for high severity issues\nHIGH_ISSUES=$(jq '[.results[] | select(.issue_severity\
        \ == \"HIGH\")] | length' security-scan-results/bandit-results.json 2>/dev/null\
        \ || echo \"0\")\n\nif [[ \"$HIGH_ISSUES\" -gt 0 ]]; then\n  echo \"::warning::Found\
        \ $HIGH_ISSUES high severity security issues in code\"\nfi\n"
    - name: Upload Security Scan Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results-${{ matrix.scan-type }}
        path: security-scan-results/
        retention-days: 30
    - name: Upload SARIF Results to GitHub Security
      if: matrix.scan-type == 'container-vulnerabilities' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-scan-results/trivy-results.sarif
        category: container-vulnerabilities
    - name: Comment on PR with Security Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: "const fs = require('fs');\nconst path = require('path');\n\nlet comment\
          \ = `## Security Scan Results - ${{ matrix.scan-type }}\\n\\n`;\n\n// Read\
          \ and format results based on scan type\ntry {\n  if ('${{ matrix.scan-type\
          \ }}' === 'container-vulnerabilities') {\n    const trivyResults = JSON.parse(fs.readFileSync('security-scan-results/trivy-results.json',\
          \ 'utf8'));\n    const vulns = trivyResults.Results?.flatMap(r => r.Vulnerabilities\
          \ || []) || [];\n    const critical = vulns.filter(v => v.Severity === 'CRITICAL').length;\n\
          \    const high = vulns.filter(v => v.Severity === 'HIGH').length;\n   \
          \ \n    comment += `### Container Vulnerabilities\\n`;\n    comment += `-\
          \ Critical: ${critical}\\n`;\n    comment += `- High: ${high}\\n`;\n   \
          \ comment += `- Total: ${vulns.length}\\n\\n`;\n  }\n  \n  if ('${{ matrix.scan-type\
          \ }}' === 'static-analysis') {\n    const banditResults = JSON.parse(fs.readFileSync('security-scan-results/bandit-results.json',\
          \ 'utf8'));\n    const issues = banditResults.results || [];\n    const\
          \ high = issues.filter(i => i.issue_severity === 'HIGH').length;\n    const\
          \ medium = issues.filter(i => i.issue_severity === 'MEDIUM').length;\n \
          \   \n    comment += `### Static Analysis Issues\\n`;\n    comment += `-\
          \ High: ${high}\\n`;\n    comment += `- Medium: ${medium}\\n`;\n    comment\
          \ += `- Total: ${issues.length}\\n\\n`;\n  }\n  \n  if ('${{ matrix.scan-type\
          \ }}' === 'k8s-manifest-audit') {\n    comment += `### Kubernetes Manifest\
          \ Audit\\n`;\n    comment += `See uploaded artifacts for detailed results.\\\
          n\\n`;\n  }\n  \n} catch (error) {\n  comment += `Error reading results:\
          \ ${error.message}\\n\\n`;\n}\n\ncomment += `\U0001F4CA Detailed results\
          \ available in the [workflow artifacts](${context.payload.pull_request.html_url}/checks).`;\n\
          \ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n\
          \  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: comment\n\
          });\n"
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
    - name: Generate Security Summary
      run: "echo \"# Constitutional Trainer Security Scan Summary\" > security-summary.md\n\
        echo \"\" >> security-summary.md\necho \"**Scan Date:** $(date)\" >> security-summary.md\n\
        echo \"**Repository:** ${{ github.repository }}\" >> security-summary.md\n\
        echo \"**Branch/PR:** ${{ github.ref_name }}\" >> security-summary.md\necho\
        \ \"\" >> security-summary.md\n\n# Process container vulnerability results\n\
        if [[ -f security-scan-results-container-vulnerabilities/trivy-results.json\
        \ ]]; then\n  echo \"## Container Vulnerabilities\" >> security-summary.md\n\
        \  echo \"\" >> security-summary.md\n  \n  CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]?\
        \ | select(.Severity == \"CRITICAL\")] | length' security-scan-results-container-vulnerabilities/trivy-results.json\
        \ 2>/dev/null || echo \"0\")\n  HIGH=$(jq '[.Results[]?.Vulnerabilities[]?\
        \ | select(.Severity == \"HIGH\")] | length' security-scan-results-container-vulnerabilities/trivy-results.json\
        \ 2>/dev/null || echo \"0\")\n  MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]?\
        \ | select(.Severity == \"MEDIUM\")] | length' security-scan-results-container-vulnerabilities/trivy-results.json\
        \ 2>/dev/null || echo \"0\")\n  \n  echo \"| Severity | Count |\" >> security-summary.md\n\
        \  echo \"|----------|-------|\" >> security-summary.md\n  echo \"| Critical\
        \ | $CRITICAL |\" >> security-summary.md\n  echo \"| High | $HIGH |\" >> security-summary.md\n\
        \  echo \"| Medium | $MEDIUM |\" >> security-summary.md\n  echo \"\" >> security-summary.md\n\
        fi\n\n# Process static analysis results\nif [[ -f security-scan-results-static-docs/reports/bandit-results.json\
        \ ]]; then\n  echo \"## Static Analysis Issues\" >> security-summary.md\n\
        \  echo \"\" >> security-summary.md\n  \n  HIGH_ISSUES=$(jq '[.results[] |\
        \ select(.issue_severity == \"HIGH\")] | length' security-scan-results-static-docs/reports/bandit-results.json\
        \ 2>/dev/null || echo \"0\")\n  MEDIUM_ISSUES=$(jq '[.results[] | select(.issue_severity\
        \ == \"MEDIUM\")] | length' security-scan-results-static-docs/reports/bandit-results.json\
        \ 2>/dev/null || echo \"0\")\n  LOW_ISSUES=$(jq '[.results[] | select(.issue_severity\
        \ == \"LOW\")] | length' security-scan-results-static-docs/reports/bandit-results.json\
        \ 2>/dev/null || echo \"0\")\n  \n  echo \"| Severity | Count |\" >> security-summary.md\n\
        \  echo \"|----------|-------|\" >> security-summary.md\n  echo \"| High |\
        \ $HIGH_ISSUES |\" >> security-summary.md\n  echo \"| Medium | $MEDIUM_ISSUES\
        \ |\" >> security-summary.md\n  echo \"| Low | $LOW_ISSUES |\" >> security-summary.md\n\
        \  echo \"\" >> security-summary.md\nfi\n\necho \"## Recommendations\" >>\
        \ security-summary.md\necho \"\" >> security-summary.md\necho \"1. Review\
        \ and remediate all high and critical severity vulnerabilities\" >> security-summary.md\n\
        echo \"2. Implement security best practices in Kubernetes manifests\" >> security-summary.md\n\
        echo \"3. Address static analysis findings in source code\" >> security-summary.md\n\
        echo \"4. Regularly update dependencies to latest secure versions\" >> security-summary.md\n\
        echo \"\" >> security-summary.md\n"
    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90
constitutional_hash: cdd01ef066bc6cf2
