# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import evaluation_pb2 as evaluation__pb2
import grpc

GRPC_GENERATED_VERSION = "1.72.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in evaluation_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class NodeAgentServiceStub:
    """The service definition for the Node Agent"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DispatchTest = channel.unary_unary(
            "/federated_evaluation.NodeAgentService/DispatchTest",
            request_serializer=evaluation__pb2.TestPackage.SerializeToString,
            response_deserializer=evaluation__pb2.DispatchResponse.FromString,
            _registered_method=True,
        )


class NodeAgentServiceServicer:
    """The service definition for the Node Agent"""

    def DispatchTest(self, request, context):
        """Dispatches a test to a node agent"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_NodeAgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "DispatchTest": grpc.unary_unary_rpc_method_handler(
            servicer.DispatchTest,
            request_deserializer=evaluation__pb2.TestPackage.FromString,
            response_serializer=evaluation__pb2.DispatchResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "federated_evaluation.NodeAgentService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "federated_evaluation.NodeAgentService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class NodeAgentService:
    """The service definition for the Node Agent"""

    @staticmethod
    def DispatchTest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/federated_evaluation.NodeAgentService/DispatchTest",
            evaluation__pb2.TestPackage.SerializeToString,
            evaluation__pb2.DispatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
