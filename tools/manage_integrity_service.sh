#!/bin/bash
# Automated service management script for integrity_service
# Generated by ACGS-1 Alerting System Deployment

SERVICE_NAME="integrity_service"
SERVICE_PORT=8002
PROJECT_ROOT="/home/dislove/ACGS-1"
LOG_DIR="$PROJECT_ROOT/logs"
PID_DIR="$PROJECT_ROOT/pids"

# Ensure directories exist
mkdir -p "$LOG_DIR" "$PID_DIR"

# Function to check if service is running
check_service() {
    if curl -s "http://localhost:$SERVICE_PORT/health" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to start service
start_service() {
    echo "Starting $SERVICE_NAME..."
    
    # Kill existing processes
    pkill -f "$SERVICE_NAME" || true
    sleep 2
    
    # Start service based on type
    case "$SERVICE_NAME" in
        "auth_service"|"ac_service"|"integrity_service"|"fv_service"|"ec_service")
            cd "$PROJECT_ROOT/services/core/$SERVICE_NAME"
            python -m uvicorn app.main:app --host 0.0.0.0 --port $SERVICE_PORT > "$LOG_DIR/$SERVICE_NAME.log" 2>&1 &
            ;;
        "gs_service")
            cd "$PROJECT_ROOT/services/core/governance-synthesis"
            python -m uvicorn gs_service.app.main:app --host 0.0.0.0 --port $SERVICE_PORT > "$LOG_DIR/$SERVICE_NAME.log" 2>&1 &
            ;;
        "pgc_service")
            cd "$PROJECT_ROOT/services/core/policy-governance-compliance"
            python -m uvicorn pgc_service.app.main:app --host 0.0.0.0 --port $SERVICE_PORT > "$LOG_DIR/$SERVICE_NAME.log" 2>&1 &
            ;;
    esac
    
    # Save PID
    echo $! > "$PID_DIR/$SERVICE_NAME.pid"
    
    # Wait for service to start
    sleep 5
    
    if check_service; then
        echo "$SERVICE_NAME started successfully"
        return 0
    else
        echo "$SERVICE_NAME failed to start"
        return 1
    fi
}

# Function to stop service
stop_service() {
    echo "Stopping $SERVICE_NAME..."
    
    if [ -f "$PID_DIR/$SERVICE_NAME.pid" ]; then
        PID=$(cat "$PID_DIR/$SERVICE_NAME.pid")
        kill "$PID" 2>/dev/null || true
        rm -f "$PID_DIR/$SERVICE_NAME.pid"
    fi
    
    pkill -f "$SERVICE_NAME" || true
    echo "$SERVICE_NAME stopped"
}

# Function to restart service
restart_service() {
    stop_service
    sleep 2
    start_service
}

# Main script logic
case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        if check_service; then
            echo "$SERVICE_NAME is running"
            exit 0
        else
            echo "$SERVICE_NAME is not running"
            exit 1
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac
