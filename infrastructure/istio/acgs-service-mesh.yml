# ACGS-2 Istio Service Mesh Configuration
# Constitutional Hash: cdd01ef066bc6cf2

apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: acgs-control-plane
  namespace: istio-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  values:
    global:
      meshID: acgs-mesh
      multiCluster:
        clusterName: acgs-cluster
      network: acgs-network
    pilot:
      env:
        EXTERNAL_ISTIOD: false
        CONSTITUTIONAL_HASH: cdd01ef066bc6cf2
  components:
    pilot:
      k8s:
        env:
        - name: CONSTITUTIONAL_HASH
          value: cdd01ef066bc6cf2
        resources:
          requests:
            cpu: 500m
            memory: 2048Mi
          limits:
            cpu: 1000m
            memory: 4096Mi
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        env:
        - name: CONSTITUTIONAL_HASH
          value: cdd01ef066bc6cf2
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1024Mi
        service:
          type: LoadBalancer
          ports:
          - port: 15021
            targetPort: 15021
            name: status-port
          - port: 80
            targetPort: 8080
            name: http2
          - port: 443
            targetPort: 8443
            name: https
          - port: 31400
            targetPort: 31400
            name: tcp
          - port: 15443
            targetPort: 15443
            name: tls
    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        env:
        - name: CONSTITUTIONAL_HASH
          value: cdd01ef066bc6cf2
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 2000m
            memory: 1024Mi

---
# ACGS Gateway
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: acgs-gateway
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "acgs.local"
    - "*.acgs.local"
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "acgs.local"
    - "*.acgs.local"
    tls:
      mode: SIMPLE
      credentialName: acgs-tls-secret

---
# ACGS Virtual Service
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: acgs-services
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  hosts:
  - "acgs.local"
  gateways:
  - acgs-gateway
  - mesh
  http:
  - match:
    - uri:
        prefix: /api/v1/constitutional
    route:
    - destination:
        host: constitutional-ai
        port:
          number: 8001
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream
    headers:
      request:
        add:
          x-constitutional-hash: cdd01ef066bc6cf2
  - match:
    - uri:
        prefix: /api/v1/governance
    route:
    - destination:
        host: governance-synthesis
        port:
          number: 8004
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream
    headers:
      request:
        add:
          x-constitutional-hash: cdd01ef066bc6cf2
  - match:
    - uri:
        prefix: /api/v1/verification
    route:
    - destination:
        host: formal-verification
        port:
          number: 8003
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
      retryOn: 5xx,reset,connect-failure,refused-stream
    headers:
      request:
        add:
          x-constitutional-hash: cdd01ef066bc6cf2

---
# Destination Rules for ACGS Services
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: acgs-services
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  host: "*.acgs.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        http2MaxRequests: 200
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    loadBalancer:
      simple: LEAST_CONN
  exportTo:
  - "."

---
# Constitutional AI Destination Rule
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: constitutional-ai
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  host: constitutional-ai
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 50
      http:
        http1MaxPendingRequests: 25
        http2MaxRequests: 100
        maxRequestsPerConnection: 5
        maxRetries: 3
        consecutiveGatewayErrors: 3
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    loadBalancer:
      simple: ROUND_ROBIN
  subsets:
  - name: v1
    labels:
      version: v1
    trafficPolicy:
      portLevelSettings:
      - port:
          number: 8001
        connectionPool:
          tcp:
            maxConnections: 25

---
# Service Mesh Security Policies
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: acgs-mtls
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  mtls:
    mode: STRICT

---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: acgs-authz
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/acgs/sa/constitutional-ai"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/*"]
    when:
    - key: request.headers[x-constitutional-hash]
      values: ["cdd01ef066bc6cf2"]
  - from:
    - source:
        principals: ["cluster.local/ns/acgs/sa/governance-synthesis"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/v1/*"]
    when:
    - key: request.headers[x-constitutional-hash]
      values: ["cdd01ef066bc6cf2"]

---
# Telemetry Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: acgs-metrics
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        constitutional_hash:
          value: "cdd01ef066bc6cf2"
        service_domain:
          value: "acgs"
  accessLogging:
  - providers:
    - name: otel

---
# Envoy Filter for Constitutional Compliance
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: constitutional-compliance-filter
  namespace: acgs
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inline_code: |
            function envoy_on_request(request_handle)
              -- Constitutional compliance validation
              local constitutional_hash = request_handle:headers():get("x-constitutional-hash")
              if constitutional_hash ~= "cdd01ef066bc6cf2" then
                request_handle:respond(
                  {[":status"] = "403"},
                  "Constitutional compliance validation failed"
                )
                return
              end
              
              -- Add constitutional compliance headers
              request_handle:headers():add("x-constitutional-validated", "true")
              request_handle:headers():add("x-constitutional-timestamp", os.time())
            end
            
            function envoy_on_response(response_handle)
              -- Add constitutional compliance to response
              response_handle:headers():add("x-constitutional-hash", "cdd01ef066bc6cf2")
              response_handle:headers():add("x-constitutional-compliant", "true")
            end

---
# Service Monitor for Istio Metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh
  namespace: istio-system
  labels:
    constitutional-hash: cdd01ef066bc6cf2
spec:
  selector:
    matchLabels:
      app: istiod
  endpoints:
  - port: http-monitoring
    interval: 15s
    path: /stats/prometheus
