# HAProxy Configuration for GroqCloud Policy Integration
# Constitutional Hash: cdd01ef066bc6cf2

global
    daemon
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # Constitutional compliance metadata
    description "ACGS-2 GroqCloud Policy Integration Load Balancer"
    node "acgs-haproxy-groq"
    
    # Performance tuning
    maxconn 4096
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor except 127.0.0.0/8
    option redispatch
    
    # Timeouts optimized for AI inference
    timeout connect 5s
    timeout client 60s
    timeout server 60s
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Error handling
    retries 3
    option abortonclose
    
    # Constitutional compliance headers
    http-request set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    http-request set-header X-ACGS-Service "groq-policy-integration"
    
    # Health check configuration
    default-server inter 30s rise 2 fall 3

# Frontend for GroqCloud Policy Integration
frontend groq_policy_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/acgs.pem
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'"
    
    # Constitutional compliance headers
    http-response set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    http-response set-header X-ACGS-Version "2.0"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # Request routing based on path
    acl is_groq_policy path_beg /api/groq-policy
    acl is_groq_inference path_beg /inference
    acl is_health_check path_beg /health
    acl is_metrics path_beg /metrics
    acl is_docs path_beg /docs
    
    # Backend selection
    use_backend groq_policy_backend if is_groq_policy or is_groq_inference or is_health_check or is_metrics or is_docs
    
    # Default redirect to documentation
    default_backend groq_policy_backend

# Backend for GroqCloud Policy Integration Service
backend groq_policy_backend
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost\r\nUser-Agent:\ HAProxy-HealthCheck
    http-check expect status 200
    
    # Constitutional compliance validation
    http-request set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    
    # Connection pooling and keep-alive
    option http-keep-alive
    option prefer-last-server
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json
    
    # Server definitions (scaled for high availability)
    server groq-policy-1 groq-policy-integration:8015 check maxconn 100 weight 100
    server groq-policy-2 groq-policy-integration:8015 check maxconn 100 weight 100 backup
    server groq-policy-3 groq-policy-integration:8015 check maxconn 100 weight 100 backup

# Frontend for metrics and monitoring
frontend metrics_frontend
    bind *:8404
    
    # Metrics endpoints
    acl is_stats path_beg /stats
    acl is_prometheus path_beg /metrics
    
    use_backend stats_backend if is_stats
    use_backend prometheus_backend if is_prometheus

# Backend for HAProxy statistics
backend stats_backend
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:acgs-admin-2024
    
    # Constitutional compliance in stats
    stats show-desc "ACGS-2 GroqCloud Policy Integration Load Balancer Stats"
    stats show-node "Constitutional Hash: cdd01ef066bc6cf2"

# Backend for Prometheus metrics
backend prometheus_backend
    server prometheus prometheus:9090 check

# Backend for OPA policy service
backend opa_backend
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    server opa-1 opa:8181 check maxconn 50 weight 100

# Backend for Redis caching
backend redis_backend
    mode tcp
    balance roundrobin
    option tcp-check
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    server redis-1 redis:6379 check

# Frontend for administrative interface
frontend admin_frontend
    bind *:8405 ssl crt /etc/ssl/certs/acgs.pem
    
    # Admin authentication
    acl is_admin_auth http_auth(admin-users)
    http-request auth realm "ACGS-2 Admin" if !is_admin_auth
    
    # Admin endpoints
    acl is_admin_stats path_beg /admin/stats
    acl is_admin_config path_beg /admin/config
    
    use_backend admin_stats_backend if is_admin_stats
    use_backend admin_config_backend if is_admin_config

# Admin authentication users
userlist admin-users
    user admin password $6$rounds=10000$acgs2024$hash

# Admin statistics backend
backend admin_stats_backend
    stats enable
    stats uri /admin/stats
    stats refresh 10s
    stats admin if TRUE
    stats show-desc "ACGS-2 GroqCloud Policy Integration - Administrative Interface"

# Configuration management backend
backend admin_config_backend
    http-request return status 200 content-type "application/json" string '{"status":"ok","constitutional_hash":"cdd01ef066bc6cf2","service":"groq-policy-integration"}'

# Global error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http

# Logging configuration
log-tag "acgs-groq-policy-lb"

# Performance monitoring
# Capture request details for analysis
capture request header User-Agent len 64
capture request header Host len 32
capture request header X-Constitutional-Hash len 16
capture response header X-Response-Time len 10

# Custom log format for GroqCloud Policy Integration
log-format "%ci:%cp [%t] %ft %b/%s %Tq/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"