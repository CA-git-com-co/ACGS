# HAProxy Configuration for ACGS-1 Load Balancing and High Availability
# Enterprise-grade load balancing for 7 core ACGS services
# Target: >1000 concurrent users, >99.9% availability, <500ms response times

global
    # Process management
    daemon
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 4096
    nbproc 1
    nbthread 4
    
    # Logging
    log stdout local0 info
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Statistics socket for runtime management
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    # Mode and timeouts
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 3s
    
    # Retries and redispatch
    retries 3
    option redispatch
    
    # HTTP options
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option originalto
    
    # Health checks
    option httpchk GET /health
    http-check expect status 200
    
    # Load balancing algorithm
    balance roundrobin
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface with Prometheus metrics
listen stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:acgs_haproxy_admin_2024

    # Prometheus metrics endpoint
    http-request use-service prometheus-exporter if { path /metrics }

    # Enhanced statistics for monitoring integration
    stats show-legends
    stats show-node
    stats show-desc "ACGS-1 Load Balancer Statistics"

# Frontend for ACGS services
frontend acgs_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/acgs.pem
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Service routing based on path
    acl is_auth_service path_beg /api/v1/auth
    acl is_ac_service path_beg /api/v1/constitutional
    acl is_integrity_service path_beg /api/v1/integrity
    acl is_fv_service path_beg /api/v1/formal-verification
    acl is_gs_service path_beg /api/v1/governance
    acl is_pgc_service path_beg /api/v1/policy
    acl is_ec_service path_beg /api/v1/evolutionary
    
    # Health check routing
    acl is_health_check path_beg /health
    
    # Backend selection
    use_backend auth_backend if is_auth_service
    use_backend ac_backend if is_ac_service
    use_backend integrity_backend if is_integrity_service
    use_backend fv_backend if is_fv_service
    use_backend gs_backend if is_gs_service
    use_backend pgc_backend if is_pgc_service
    use_backend ec_backend if is_ec_service
    use_backend health_backend if is_health_check
    
    # Default backend for unmatched requests
    default_backend gs_backend

# Backend configurations for each ACGS service

# Authentication Service Backend (Port 8000)
backend auth_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Session affinity using consistent hashing
    hash-type consistent
    
    # Server definitions with health checks
    server auth1 auth_service:8000 check inter 10s fall 3 rise 2 weight 100
    server auth2 auth_service_2:8000 check inter 10s fall 3 rise 2 weight 100 backup
    
    # Circuit breaker simulation
    timeout server 30s
    retries 2

# Constitutional AI Service Backend (Port 8001)
backend ac_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    hash-type consistent
    
    server ac1 ac_service:8001 check inter 10s fall 3 rise 2 weight 100
    server ac2 ac_service_2:8001 check inter 10s fall 3 rise 2 weight 100 backup
    
    timeout server 30s
    retries 2

# Integrity Service Backend (Port 8002)
backend integrity_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    hash-type consistent
    
    server integrity1 integrity_service:8002 check inter 10s fall 3 rise 2 weight 100
    server integrity2 integrity_service_2:8002 check inter 10s fall 3 rise 2 weight 100 backup
    
    timeout server 30s
    retries 2

# Formal Verification Service Backend (Port 8003)
backend fv_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    hash-type consistent
    
    server fv1 fv_service:8003 check inter 10s fall 3 rise 2 weight 100
    server fv2 fv_service_2:8003 check inter 10s fall 3 rise 2 weight 100 backup
    
    timeout server 45s  # Longer timeout for formal verification
    retries 2

# Governance Synthesis Service Backend (Port 8004) - High load expected
backend gs_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    hash-type consistent
    
    # Multiple instances for high-load LLM operations
    server gs1 gs_service:8004 check inter 10s fall 3 rise 2 weight 100
    server gs2 gs_service_2:8004 check inter 10s fall 3 rise 2 weight 100
    server gs3 gs_service_3:8004 check inter 10s fall 3 rise 2 weight 80 backup
    
    timeout server 60s  # Longer timeout for LLM operations
    retries 2

# Policy Governance Control Backend (Port 8005)
backend pgc_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200

    hash-type consistent

    # Enhanced health checks with OPA dependency validation
    server pgc1 pgc_service:8005 check inter 5s fall 2 rise 3 weight 100
    server pgc2 pgc_service_2:8005 check inter 5s fall 2 rise 3 weight 100 backup

    # Extended timeout for OPA operations
    timeout server 45s
    retries 3

    # Circuit breaker for OPA failures
    option redispatch

# Evolutionary Computation Service Backend (Port 8006)
backend ec_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    hash-type consistent
    
    server ec1 ec_service:8006 check inter 10s fall 3 rise 2 weight 100
    server ec2 ec_service_2:8006 check inter 10s fall 3 rise 2 weight 100 backup
    
    timeout server 45s  # Longer timeout for evolutionary computation
    retries 2

# Health check backend for load balancer health
backend health_backend
    balance roundrobin
    
    server health1 127.0.0.1:8080 check inter 5s fall 2 rise 1 weight 100
    
    timeout server 10s
    retries 1

# Maintenance backend for service unavailability
backend maintenance_backend
    mode http
    errorfile 503 /etc/haproxy/errors/maintenance.http
