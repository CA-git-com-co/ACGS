# ACGS-1 Production-Ready Container-Based Development Environment
# Maintains compatibility with host-based architecture while enabling cloud-native deployment
version: "3.8"

# Custom network for service communication
networks:
  acgs_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent volumes for data storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  solana_keypairs:
    driver: local
  acgs_logs:
    driver: local
  acgs_data:
    driver: local

services:
  # =============================================================================
  # Infrastructure Services
  # =============================================================================

  # PostgreSQL Database with ACGS-specific configuration
  postgres:
    image: postgres:15-alpine
    container_name: acgs_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-acgs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-acgs_password}
      POSTGRES_DB: ${POSTGRES_DB:-acgs_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5439:5432"
    networks:
      - acgs_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-acgs_user} -d ${POSTGRES_DB:-acgs_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Redis Cache with optimized configuration
  redis:
    image: redis:7-alpine
    container_name: acgs_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6389:6379"
    networks:
      - acgs_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"

  # HAProxy Load Balancer for service distribution
  haproxy:
    image: haproxy:2.8-alpine
    container_name: acgs_haproxy
    volumes:
      - ./scripts/docker/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./ssl/certs/acgs.pem:/usr/local/etc/haproxy/ssl/acgs.pem:ro
    ports:
      - "80:80"
      - "443:443" # HTTPS
      - "8080:8080" # Stats interface
    networks:
      - acgs_network
    depends_on:
      - opa
      - auth_service
      - ac_service
      - integrity_service
      - fv_service
      - gs_service
      - pgc_service
      - ec_service
      - opencode_cli
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"

  # Open Policy Agent (OPA) - Policy Enforcement Engine
  opa:
    image: openpolicyagent/opa:latest-envoy
    container_name: acgs_opa
    command:
      [
        "run",
        "--server",
        "--addr",
        "0.0.0.0:8181",
        "--log-level",
        "info",
        "--config-file",
        "/config/opa-config.yaml",
        "/policies",
      ]
    ports:
      - "8181:8181" # OPA API port
      - "8282:8282" # OPA diagnostic port
    volumes:
      # Policy files
      - ./config/opa/policies:/policies:ro
      # Configuration
      - ./infrastructure/docker/opa-config.yaml:/config/opa-config.yaml:ro
      # Logs
      - acgs_logs:/var/log/opa
    environment:
      # Constitutional governance
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - CONSTITUTIONAL_COMPLIANCE_THRESHOLD=0.8
      - GOVERNANCE_VALIDATION_ENABLED=true

      # Performance settings
      - OPA_LOG_LEVEL=info
      - OPA_LOG_FORMAT=json
      - OPA_DECISION_LOGS_CONSOLE=true
      - OPA_STATUS_CONSOLE=true

      # Security settings
      - OPA_AUTHENTICATION_ENABLED=false # Internal service
      - OPA_AUTHORIZATION_ENABLED=true

      # Integration settings
      - GOVERNANCE_ENGINE_URL=http://governance_engine:8004
      - AC_SERVICE_URL=http://ac_service:8001
    networks:
      - acgs_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8181/health",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.2"

  # =============================================================================
  # ACGS Core Services (in dependency order)
  # =============================================================================

  # Enhanced API Gateway (Port 8080) - Unified Entry Point with Integrated Auth
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: production-runtime
    container_name: acgs_api_gateway
    environment:
      - SERVICE_NAME=api_gateway
      - SERVICE_PORT=8080
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${AUTH_SECRET_KEY:-acgs-gateway-secret-key-2024}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - OPA_SERVER_URL=http://opa:8181
      # Service URLs for routing
      - CONSTITUTIONAL_CORE_URL=http://constitutional_core:8001
      - GOVERNANCE_ENGINE_URL=http://governance_engine:8004
      - INTEGRITY_SERVICE_URL=http://integrity_service:8002
      # Gateway configuration
      - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      - RATE_LIMIT_BURST=100
      - ENABLE_DOCS=${GATEWAY_ENABLE_DOCS:-true}
      # Real AI Model Integrations
      - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
      - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
      - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
      - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/platform_services/api_gateway/gateway_service
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]
    ports:
      - "8080:8080"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opa:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/gateway/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

      # Constitutional compliance healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/constitutional", "||", "exit", "1"]
      interval: 1m
      timeout: 20s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5Gi  # Increased for integrated auth
          cpus: "750m"   # Increased for integrated auth
        reservations:
          memory: 768Mi
          cpus: "300m"

  # Auth Service (Port 8016) - Backend Authentication (Optional)
  auth_service:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: production-runtime
    container_name: acgs_auth_service
    environment:
      - SERVICE_NAME=auth_service
      - SERVICE_PORT=8016
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=${AUTH_SECRET_KEY:-acgs-development-secret-key-2024}
      - JWT_SECRET_KEY=${AUTH_SECRET_KEY:-acgs-development-secret-key-2024}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - OPA_SERVER_URL=http://opa:8181
      # Real AI Model Integrations
      - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
      - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
      - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
      - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/platform/authentication/auth_service
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8016"]
    ports:
      - "8016:8016"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      api_gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512Mi  # Reduced since primary auth is in gateway
          cpus: "250m"   # Reduced since primary auth is in gateway
        reservations:
          memory: 256Mi
          cpus: "100m"
    profiles: ["full", "backend-auth"]  # Optional service

  # Constitutional Core (Port 8001) - Unified Constitutional AI & Formal Verification
  constitutional_core:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: production-runtime
    container_name: acgs_constitutional_core
    environment:
      - SERVICE_NAME=constitutional_core
      - SERVICE_PORT=8001
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
      - REDIS_URL=redis://redis:6379/1
      - API_GATEWAY_URL=http://api_gateway:8080
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONSTITUTIONAL_FIDELITY_THRESHOLD=${CONSTITUTIONAL_FIDELITY_THRESHOLD:-0.85}
      - OPA_SERVER_URL=http://opa:8181
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      # Real AI Model Integrations
      - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
      - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
      - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
      - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/core/constitutional-core
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001"]
    ports:
      - "8001:8001"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      api_gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

      # Constitutional compliance healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/constitutional", "||", "exit", "1"]
      interval: 1m
      timeout: 20s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5Gi  # Increased for unified service
          cpus: "750m"   # Increased for unified service
        reservations:
          memory: 768Mi
          cpus: "300m"

  # Integrity Service (Port 8002) - Data Integrity and Cryptographic Verification
  integrity_service:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: production-runtime
    container_name: acgs_integrity_service
    environment:
      - SERVICE_NAME=integrity_service
      - SERVICE_PORT=8002
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
      - REDIS_URL=redis://redis:6379/2
      - API_GATEWAY_URL=http://api_gateway:8080
      - CONSTITUTIONAL_CORE_URL=http://constitutional_core:8001
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - OPA_SERVER_URL=http://opa:8181
      # Real AI Model Integrations
      - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
      - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
      - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
      - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/platform/integrity/integrity_service
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002"]
    ports:
      - "8002:8002"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      constitutional_core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1Gi
          cpus: "500m"
        reservations:
          memory: 512Mi
          cpus: "200m"

  # Governance Engine (Port 8004) - Unified Governance Synthesis & Policy Compliance
  governance_engine:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: production-runtime
    container_name: acgs_governance_engine
    environment:
      - SERVICE_NAME=governance_engine
      - SERVICE_PORT=8004
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
      - REDIS_URL=redis://redis:6379/4
      - AUTH_SERVICE_URL=http://auth_service:8016
      - AC_SERVICE_URL=http://ac_service:8001
      - INTEGRITY_SERVICE_URL=http://integrity_service:8002
      - FV_SERVICE_URL=http://fv_service:8003
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - POLICY_QUALITY_THRESHOLD=${POLICY_QUALITY_THRESHOLD:-0.80}
      - MAX_SYNTHESIS_LOOPS=${MAX_SYNTHESIS_LOOPS:-3}
      - PGC_LATENCY_TARGET=${PGC_LATENCY_TARGET:-25}
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - OPA_SERVER_URL=http://opa:8181
      # Real AI Model Integrations
      - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
      - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
      - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
      - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/core/governance-engine
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8004"]
    ports:
      - "8004:8004"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      constitutional_core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

      # Constitutional compliance healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8004/health/constitutional", "||", "exit", "1"]
      interval: 1m
      timeout: 20s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5Gi  # Increased for unified service
          cpus: "750m"   # Increased for unified service
        reservations:
          memory: 768Mi
          cpus: "300m"

  # EC Service (Port 8006) - Evolutionary Computation
  ec_service:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: production-runtime
    container_name: acgs_ec_service
    environment:
      - SERVICE_NAME=ec_service
      - SERVICE_PORT=8006
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
      - REDIS_URL=redis://redis:6379/6
      - AUTH_SERVICE_URL=http://auth_service:8016
      - AC_SERVICE_URL=http://ac_service:8001
      - GOVERNANCE_ENGINE_URL=http://governance_engine:8004
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WINA_ENABLED=${WINA_ENABLED:-true}
      - EVOLUTIONARY_COMPUTATION_ENABLED=${EVOLUTIONARY_COMPUTATION_ENABLED:-true}
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - OPA_SERVER_URL=http://opa:8181
      # Real AI Model Integrations
      - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
      - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
      - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
      - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/core/evolutionary-computation/ec_service
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8006"]
    ports:
      - "8006:8006"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      governance_engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1Gi
          cpus: "500m"
        reservations:
          memory: 512Mi
          cpus: "200m"

  # =============================================================================
  # CLI Services
  # =============================================================================

  # OpenCode CLI with ACGS Integration (Port 8020)
  opencode_cli:
    build:
      context: ../../services/cli/opencode
      dockerfile: Dockerfile
    container_name: acgs_opencode_cli
    environment:
      - SERVICE_NAME=opencode_cli
      - SERVICE_PORT=8020
      - ACGS_CONFIG_PATH=/app/acgs-config.json
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - AUTH_SERVICE_URL=http://auth_service:8016
      - CONSTITUTIONAL_AI_URL=http://ac_service:8001
      - INTEGRITY_SERVICE_URL=http://integrity_service:8002
      - FORMAL_VERIFICATION_URL=http://fv_service:8003
      - GOVERNANCE_SYNTHESIS_URL=http://gs_service:8004
      - POLICY_GOVERNANCE_URL=http://pgc_service:8005
      - EVOLUTIONARY_COMPUTATION_URL=http://ec_service:8006
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    working_dir: /app
    command: ["bun", "run", "start"]
    ports:
      - "8020:8020"
    volumes:
      - acgs_logs:/app/logs
      - acgs_data:/app/data
    networks:
      - acgs_network
    depends_on:
      ec_service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bun", "run", "acgs-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512Mi
          cpus: "250m"
        reservations:
          memory: 256Mi
          cpus: "100m"

  # =============================================================================
  # Development Tools and Solana Environment
  # =============================================================================

  # Solana Development Container with Anchor support
  solana_dev:
    build:
      context: .
      dockerfile: Dockerfile.acgs
      target: development
    container_name: acgs_solana_dev
    environment:
      - SOLANA_NETWORK=${SOLANA_NETWORK:-devnet}
      - ANCHOR_PROVIDER_URL=${ANCHOR_PROVIDER_URL:-https://api.devnet.solana.com}
      - CONSTITUTIONAL_HASH=${CONSTITUTIONAL_HASH:-cdd01ef066bc6cf2}
    working_dir: /app/blockchain
    command: ["tail", "-f", "/dev/null"] # Keep container running
    volumes:
      - ./blockchain:/app/blockchain
      - solana_keypairs:/root/.config/solana
      - acgs_logs:/app/logs
    networks:
      - acgs_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # Log Aggregation Service
  log_aggregator:
    image: fluent/fluent-bit:2.2
    container_name: acgs_log_aggregator
    volumes:
      - acgs_logs:/fluent-bit/logs:ro
      - ./scripts/docker/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - acgs_network
    depends_on:
      - auth_service
      - ac_service
      - integrity_service
      - fv_service
      - gs_service
      - pgc_service
      - ec_service
      - opencode_cli
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"

  # Agent HITL Service - Human Oversight Integration
  agent_hitl_service:
    build:
      context: ./services/core/agent-hitl
      dockerfile: Dockerfile
    container_name: acgs_agent_hitl
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-acgs_secure_2024}@postgres:5432/agent_hitl
      - REDIS_URL=redis://redis:6379
      - AGENT_IDENTITY_SERVICE_URL=http://auth_service:8016
      - CONSTITUTIONAL_AI_SERVICE_URL=http://ac_service:8001
      - POLICY_GOVERNANCE_SERVICE_URL=http://pgc_service:8005
      - AGENT_HITL_SERVICE_PORT=8008
      - REDIS_CACHE_TTL_CONFIDENCE=3600
      - REDIS_CACHE_TTL_PATTERNS=86400
      - DECISION_CACHE_SIZE=10000
      - MAX_CONCURRENT_REVIEWS=100
      - CONFIDENCE_LEARNING_RATE=0.1
    ports:
      - "8008:8008"
    volumes:
      - ./logs/agent-hitl:/app/logs
    networks:
      - acgs_network
    depends_on:
      - postgres
      - redis
      - auth_service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: acgs_prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    volumes:
      - ./scripts/docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - acgs_network
    depends_on:
      - auth_service
      - ac_service
      - integrity_service
      - fv_service
      - gs_service
      - pgc_service
      - ec_service
      - opencode_cli
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: acgs_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./scripts/docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./scripts/docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - acgs_network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
