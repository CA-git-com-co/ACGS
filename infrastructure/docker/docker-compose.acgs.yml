networks:
  acgs_network:
    driver: bridge
    ipam:
      config:
      - subnet: 10.200.0.0/16
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  solana_keypairs:
    driver: local
  acgs_logs:
    driver: local
  acgs_data:
    driver: local
services:
  postgres:
    image: postgres:15-alpine
    container_name: acgs_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-acgs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-acgs_password}
      POSTGRES_DB: ${POSTGRES_DB:-acgs_db}
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=C
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ${ACGS_ROOT}/infrastructure/scripts/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
    - 5439:5432
    networks:
    - acgs_network
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-acgs_user} -d ${POSTGRES_DB:-acgs_db}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
  redis:
    image: redis:7-alpine
    container_name: acgs_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
    - redis_data:/data
    ports:
    - 6389:6379
    networks:
    - acgs_network
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
  haproxy:
    image: haproxy:2.8-alpine
    container_name: acgs_haproxy
    volumes:
    - ${ACGS_ROOT}/infrastructure/scripts/docker/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    - ${ACGS_SSL_CERTS_PATH:-${ACGS_ROOT}/infrastructure/ssl/certs/acgs.pem}:/usr/local/etc/haproxy/ssl/acgs.pem:ro
    ports:
    - 80:80
    - 443:443
    - ${API_GATEWAY_PORT}:8080
    networks:
    - acgs_network
    depends_on:
    - opa
    - api_gateway
    - constitutional_core
    - integrity_service
    - governance_engine
    - ec_service
    - opencode_cli
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
  opa:
    image: openpolicyagent/opa:latest-envoy
    container_name: acgs_opa
    command:
    - run
    - --server
    - --addr
    - 0.0.0.0:8181
    - --log-level
    - info
    - /policies
    ports:
    - 8181:8181
    - 8282:8282
    volumes:
    - ${ACGS_ROOT}/config/opa/policies:/policies:ro
    - acgs_logs:/var/log/opa
    environment:
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - CONSTITUTIONAL_COMPLIANCE_THRESHOLD=0.8
    - GOVERNANCE_VALIDATION_ENABLED=true
    - OPA_LOG_LEVEL=info
    - OPA_LOG_FORMAT=json
    - OPA_DECISION_LOGS_CONSOLE=true
    - OPA_STATUS_CONSOLE=true
    - OPA_AUTHENTICATION_ENABLED=false
    - OPA_AUTHORIZATION_ENABLED=true
    - GOVERNANCE_ENGINE_URL=http://governance_engine:8004
    - AC_SERVICE_URL=http://constitutional_core:8001
    networks:
    - acgs_network
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:8181/health
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
  api_gateway:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: production-runtime
    container_name: acgs_api_gateway
    environment:
    - SERVICE_NAME=api_gateway
    - SERVICE_PORT=8080
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
    - REDIS_URL=redis://redis:6379/0
    - JWT_SECRET_KEY=${AUTH_SECRET_KEY:-acgs-gateway-secret-key-2024}
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - OPA_SERVER_URL=http://opa:8181
    - CONSTITUTIONAL_CORE_URL=http://constitutional_core:8001
    - GOVERNANCE_ENGINE_URL=http://governance_engine:8004
    - INTEGRITY_SERVICE_URL=http://integrity_service:8002
    - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
    - RATE_LIMIT_BURST=100
    - ENABLE_DOCS=${GATEWAY_ENABLE_DOCS:-true}
    - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
    - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
    - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
    - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/platform_services/api_gateway/gateway_service
    command:
    - uvicorn
    - app.main:app
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    ports:
    - ${API_GATEWAY_PORT}:8080
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # opa:
      #   condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8080/gateway/health
      - '||'
      - exit
      - '1'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 768M
          cpus: '0.3'
  auth_service:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: production-runtime
    container_name: acgs_auth_service
    environment:
    - SERVICE_NAME=auth_service
    - SERVICE_PORT=8016
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
    - REDIS_URL=redis://redis:6379/1
    - SECRET_KEY=${AUTH_SECRET_KEY:-acgs-development-secret-key-2024}
    - JWT_SECRET_KEY=${AUTH_SECRET_KEY:-acgs-development-secret-key-2024}
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - OPA_SERVER_URL=http://opa:8181
    - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
    - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
    - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
    - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/platform_services/authentication/auth_service
    command:
    - uvicorn
    - app.main:app
    - --host
    - 0.0.0.0
    - --port
    - '8016'
    ports:
    - 8016:8016
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    depends_on:
      api_gateway:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8016/health
      - '||'
      - exit
      - '1'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    profiles:
    - full
    - backend-auth
  constitutional_core:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: production-runtime
    container_name: acgs_constitutional_core
    environment:
    - SERVICE_NAME=constitutional_core
    - SERVICE_PORT=8001
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
    - REDIS_URL=redis://redis:6379/1
    - API_GATEWAY_URL=http://api_gateway:8080
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - CONSTITUTIONAL_FIDELITY_THRESHOLD=${CONSTITUTIONAL_FIDELITY_THRESHOLD:-0.85}
    - OPA_SERVER_URL=http://opa:8181
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
    - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
    - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
    - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/core/constitutional-core
    command:
    - uvicorn
    - app.main_simple:app
    - --host
    - 0.0.0.0
    - --port
    - '8001'
    ports:
    - ${CONSTITUTIONAL_AI_PORT}:8001
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    # depends_on:
    #   api_gateway:
    #     condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8001/health
      - '||'
      - exit
      - '1'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 768M
          cpus: '0.3'
  integrity_service:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: production-runtime
    container_name: acgs_integrity_service
    environment:
    - SERVICE_NAME=integrity_service
    - SERVICE_PORT=8002
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
    - REDIS_URL=redis://redis:6379/2
    - API_GATEWAY_URL=http://api_gateway:8080
    - CONSTITUTIONAL_CORE_URL=http://constitutional_core:8001
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - OPA_SERVER_URL=http://opa:8181
    - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
    - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
    - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
    - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/platform_services/integrity/integrity_service
    command:
    - uvicorn
    - app.main:app
    - --host
    - 0.0.0.0
    - --port
    - '8002'
    ports:
    - ${INTEGRITY_SERVICE_PORT}:8002
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    depends_on:
      constitutional_core:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8002/health
      - '||'
      - exit
      - '1'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
  governance_engine:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: production-runtime
    container_name: acgs_governance_engine
    environment:
    - SERVICE_NAME=governance_engine
    - SERVICE_PORT=8004
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
    - REDIS_URL=redis://redis:6379/4
    - AUTH_SERVICE_URL=http://auth_service:8016
    - AC_SERVICE_URL=http://constitutional_core:8001
    - INTEGRITY_SERVICE_URL=http://integrity_service:8002
    - FV_SERVICE_URL=http://constitutional_core:8001
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - POLICY_QUALITY_THRESHOLD=${POLICY_QUALITY_THRESHOLD:-0.80}
    - MAX_SYNTHESIS_LOOPS=${MAX_SYNTHESIS_LOOPS:-3}
    - PGC_LATENCY_TARGET=${PGC_LATENCY_TARGET:-25}
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - OPA_SERVER_URL=http://opa:8181
    - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
    - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
    - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
    - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/core/governance-engine
    command:
    - uvicorn
    - app.main:app
    - --host
    - 0.0.0.0
    - --port
    - '8004'
    ports:
    - 8004:8004
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    depends_on:
      constitutional_core:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8004/health
      - '||'
      - exit
      - '1'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.75'
        reservations:
          memory: 768M
          cpus: '0.3'
  ec_service:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: production-runtime
    container_name: acgs_ec_service
    environment:
    - SERVICE_NAME=ec_service
    - SERVICE_PORT=8006
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_user}:${POSTGRES_PASSWORD:-acgs_password}@postgres:5432/${POSTGRES_DB:-acgs_db}
    - REDIS_URL=redis://redis:6379/6
    - AUTH_SERVICE_URL=http://auth_service:8016
    - AC_SERVICE_URL=http://constitutional_core:8001
    - GOVERNANCE_ENGINE_URL=http://governance_engine:8004
    - ENVIRONMENT=${ENVIRONMENT:-development}
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - WINA_ENABLED=${WINA_ENABLED:-true}
    - EVOLUTIONARY_COMPUTATION_ENABLED=${EVOLUTIONARY_COMPUTATION_ENABLED:-true}
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - OPA_SERVER_URL=http://opa:8181
    - GOOGLE_GEMINI_ENABLED=${GOOGLE_GEMINI_ENABLED:-true}
    - DEEPSEEK_R1_ENABLED=${DEEPSEEK_R1_ENABLED:-true}
    - NVIDIA_QWEN_ENABLED=${NVIDIA_QWEN_ENABLED:-true}
    - NANO_VLLM_ENABLED=${NANO_VLLM_ENABLED:-true}
    working_dir: /app/services/core/evolutionary-computation/ec_service
    command:
    - uvicorn
    - main:app
    - --host
    - 0.0.0.0
    - --port
    - '8006'
    ports:
    - 8006:8006
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    depends_on:
      governance_engine:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - /app/health_check.sh
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
  opencode_cli:
    build:
      context: ../../services/cli/opencode
      dockerfile: Dockerfile
    container_name: acgs_opencode_cli
    environment:
    - SERVICE_NAME=opencode_cli
    - SERVICE_PORT=8020
    - ACGS_CONFIG_PATH=/app/acgs-config.json
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - AUTH_SERVICE_URL=http://auth_service:8016
    - CONSTITUTIONAL_AI_URL=http://constitutional_core:8001
    - INTEGRITY_SERVICE_URL=http://integrity_service:8002
    - FORMAL_VERIFICATION_URL=http://constitutional_core:8001
    - GOVERNANCE_SYNTHESIS_URL=http://governance_engine:8004
    - POLICY_GOVERNANCE_URL=http://governance_engine:8004
    - EVOLUTIONARY_COMPUTATION_URL=http://ec_service:8006
    - NODE_ENV=production
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    working_dir: /app
    command:
    - bun
    - run
    - start
    ports:
    - 8020:8020
    volumes:
    - acgs_logs:/app/logs
    - acgs_data:/app/data
    networks:
    - acgs_network
    depends_on:
      ec_service:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - bun
      - run
      - acgs-health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
  solana_dev:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.acgs
      target: development
    container_name: acgs_solana_dev
    environment:
    - SOLANA_NETWORK=${SOLANA_NETWORK:-devnet}
    - ANCHOR_PROVIDER_URL=${ANCHOR_PROVIDER_URL:-https://api.devnet.solana.com}
    - CONSTITUTIONAL_HASH=${CONSTITUTIONAL_HASH:-cdd01ef066bc6cf2}
    working_dir: /app/blockchain
    command:
    - tail
    - -f
    - /dev/null
    volumes:
    - ${ACGS_BLOCKCHAIN_PATH:-${ACGS_ROOT}/blockchain}:/app/blockchain
    - solana_keypairs:/root/.config/solana
    - acgs_logs:/app/logs
    networks:
    - acgs_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
  log_aggregator:
    image: fluent/fluent-bit:2.2
    container_name: acgs_log_aggregator
    volumes:
    - acgs_logs:/fluent-bit/logs:ro
    - ${ACGS_ROOT}/infrastructure/scripts/docker/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
    - acgs_network
    depends_on:
    - constitutional_core
    - integrity_service
    - governance_engine
    - ec_service
    - opencode_cli
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
  agent_hitl_service:
    build:
      context: ${ACGS_ROOT}/services/core/agent-hitl
      dockerfile: Dockerfile
    container_name: acgs_agent_hitl
    environment:
    - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-acgs_secure_2024}@postgres:5432/agent_hitl
    - REDIS_URL=redis://redis:6379
    - AGENT_IDENTITY_SERVICE_URL=http://auth_service:8016
    - CONSTITUTIONAL_AI_SERVICE_URL=http://constitutional_core:8001
    - POLICY_GOVERNANCE_SERVICE_URL=http://governance_engine:8004
    - AGENT_HITL_SERVICE_PORT=8008
    - REDIS_CACHE_TTL_CONFIDENCE=3600
    - REDIS_CACHE_TTL_PATTERNS=86400
    - DECISION_CACHE_SIZE=10000
    - MAX_CONCURRENT_REVIEWS=100
    - CONFIDENCE_LEARNING_RATE=0.1
    ports:
    - 8008:8008
    volumes:
    - ${ACGS_AGENT_HITL_LOGS_PATH:-${ACGS_ROOT}/logs/agent-hitl}:/app/logs
    networks:
    - acgs_network
    depends_on:
    - postgres
    - redis
    - constitutional_core
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8008/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: acgs_prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=200h
    - --web.enable-lifecycle
    volumes:
    - ${ACGS_ROOT}/infrastructure/scripts/docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
    - ${PROMETHEUS_PORT}:9090
    networks:
    - acgs_network
    depends_on:
    - constitutional_core
    - integrity_service
    - governance_engine
    - ec_service
    - opencode_cli
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
  grafana:
    image: grafana/grafana:10.2.0
    container_name: acgs_grafana
    environment:
    - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
    - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
    - ${ACGS_ROOT}/infrastructure/scripts/docker/grafana/provisioning:/etc/grafana/provisioning:ro
    - ${ACGS_ROOT}/infrastructure/scripts/docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
    - 3001:3000
    networks:
    - acgs_network
    depends_on:
    - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
