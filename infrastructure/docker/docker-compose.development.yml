# ACGS-2 Development Environment Override
# Use with: docker-compose -f docker-compose.base-infrastructure.yml -f docker-compose.development.yml up -d

version: '3.8'

# Development-specific overrides for base infrastructure services
services:
  postgres:
    environment:
      POSTGRES_DB: acgs_development
      POSTGRES_USER: acgs_dev
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 -c log_statement=all"
    ports:
      - "5433:5432"  # Use alternative port to avoid conflicts
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./config/database/development_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro

  redis:
    ports:
      - "6380:6379"  # Use alternative port to avoid conflicts
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-dev_password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly no
      --loglevel debug
    volumes:
      - redis_dev_data:/data

  # Development tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: acgs-pgadmin-dev
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@acgs.dev}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-dev_password}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - acgs-network
    depends_on:
      - postgres
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "development"
      com.acgs.component: "dev-tools"

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: acgs-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_PASSWORD:-dev_password}"
    networks:
      - acgs-network
    depends_on:
      - redis
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "development"
      com.acgs.component: "dev-tools"
  auth_service:
    build:
      context: ../../services/platform/authentication
      dockerfile: Dockerfile
      target: development
    container_name: acgs-auth-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/0
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    ports:
    - 8000:8000
    networks:
    - acgs-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
    - ../../services/platform/authentication:/app
    - /app/node_modules
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  ac_service:
    build:
      context: ../../services/core/constitutional-ai
      dockerfile: Dockerfile
      target: development
    container_name: acgs-ac-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/1
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    - AUTH_SERVICE_URL=http://auth_service:8000
    ports:
    - 8001:8001
    networks:
    - acgs-dev
    depends_on:
      auth_service:
        condition: service_healthy
    volumes:
    - ../../services/core/constitutional-ai:/app
    - /app/__pycache__
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8001/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  integrity_service:
    build:
      context: ../../services/platform/integrity
      dockerfile: Dockerfile
      target: development
    container_name: acgs-integrity-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/2
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    - AUTH_SERVICE_URL=http://auth_service:8000
    ports:
    - 8002:8002
    networks:
    - acgs-dev
    depends_on:
      auth_service:
        condition: service_healthy
    volumes:
    - ../../services/platform/integrity:/app
    - /app/__pycache__
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8002/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  fv_service:
    build:
      context: ../../services/core/formal-verification
      dockerfile: Dockerfile
      target: development
    container_name: acgs-fv-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/3
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    - AUTH_SERVICE_URL=http://auth_service:8000
    - AC_SERVICE_URL=http://ac_service:8001
    - INTEGRITY_SERVICE_URL=http://integrity_service:8002
    ports:
    - 8003:8003
    networks:
    - acgs-dev
    depends_on:
      ac_service:
        condition: service_healthy
      integrity_service:
        condition: service_healthy
    volumes:
    - ../../services/core/formal-verification:/app
    - /app/__pycache__
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8003/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  gs_service:
    build:
      context: ../../services/core/governance-synthesis
      dockerfile: Dockerfile
      target: development
    container_name: acgs-gs-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/4
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    - AUTH_SERVICE_URL=http://auth_service:8000
    - AC_SERVICE_URL=http://ac_service:8001
    - INTEGRITY_SERVICE_URL=http://integrity_service:8002
    - FV_SERVICE_URL=http://fv_service:8003
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - GEMINI_API_KEY=${GEMINI_API_KEY}
    - GROQ_API_KEY=${GROQ_API_KEY}
    ports:
    - 8004:8004
    networks:
    - acgs-dev
    depends_on:
      ac_service:
        condition: service_healthy
      fv_service:
        condition: service_healthy
    volumes:
    - ../../services/core/governance-synthesis:/app
    - /app/__pycache__
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8004/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  pgc_service:
    build:
      context: ../../services/core/policy-governance
      dockerfile: Dockerfile
      target: development
    container_name: acgs-pgc-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/5
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    - AUTH_SERVICE_URL=http://auth_service:8000
    - AC_SERVICE_URL=http://ac_service:8001
    - GS_SERVICE_URL=http://gs_service:8004
    ports:
    - 8005:8005
    networks:
    - acgs-dev
    depends_on:
      ac_service:
        condition: service_healthy
      gs_service:
        condition: service_healthy
    volumes:
    - ../../services/core/policy-governance:/app
    - /app/__pycache__
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8005/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
  ec_service:
    build:
      context: ../../services/core/evolutionary-computation
      dockerfile: Dockerfile
      target: development
    container_name: acgs-ec-service-dev
    environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-acgs_dev}:${POSTGRES_PASSWORD:os.environ.get("PASSWORD")
    - REDIS_URL=redis://redis:6379/6
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_jwt_secret_key_change_in_production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
    - ENVIRONMENT=development
    - LOG_LEVEL=DEBUG
    - RELOAD=true
    - DEBUG=true
    - AUTH_SERVICE_URL=http://auth_service:8000
    ports:
    - 8006:8006
    networks:
    - acgs-dev
    depends_on:
      auth_service:
        condition: service_healthy
    volumes:
    - ../../services/core/evolutionary-computation:/app
    - /app/__pycache__
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8006/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
volumes:
  postgres_dev_data: null
  redis_dev_data: null
constitutional_hash: cdd01ef066bc6cf2

# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit rates
# Constitutional Compliance: cdd01ef066bc6cf2
# Implementation Status: 🔄 IN PROGRESS

# Performance Targets: P99 <5ms, >100 RPS, >85% cache hit rates
# Constitutional Compliance: cdd01ef066bc6cf2
# Implementation Status: 🔄 IN PROGRESS
