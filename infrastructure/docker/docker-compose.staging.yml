# ACGS-2 Staging Environment Override
# Use with: docker-compose -f config/docker/docker-compose.base-infrastructure.yml -f docker-compose.acgs-services.yml -f docker-compose.staging.yml

version: '3.8'

# Staging-specific resource limits
x-staging-resources: &staging-resources
  deploy:
    resources:
      limits:
        cpus: '1.5'
        memory: 1.5G
      reservations:
        cpus: '0.3'
        memory: 256M

services:
  # Infrastructure overrides for staging
  postgres:
    <<: *staging-resources
    environment:
      POSTGRES_DB: acgs_staging
      POSTGRES_USER: acgs_staging
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Staging password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5434:5432"  # Staging port
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=8MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB

  redis:
    <<: *staging-resources
    ports:
      - "6381:6379"  # Staging port
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?Staging password required}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
    volumes:
      - redis_staging_data:/data

  # Service overrides for staging
  auth_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 2
      DATABASE_POOL_SIZE: 15
      DATABASE_MAX_OVERFLOW: 25

  ac_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 2

  integrity_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 2

  fv_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 1

  gs_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 1

  pgc_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 1

  ec_service:
    <<: *staging-resources
    environment:
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      DEBUG: "false"
      RELOAD: "false"
      WORKERS: 1

  # Staging monitoring (lighter than production)
  prometheus:
    image: prom/prometheus:latest
    container_name: acgs-prometheus-staging
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - acgs-network
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "staging"
      com.acgs.component: "monitoring"

  grafana:
    image: grafana/grafana:latest
    container_name: acgs-grafana-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-staging_password}
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - acgs-network
    depends_on:
      - prometheus
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "staging"
      com.acgs.component: "monitoring"

volumes:
  postgres_staging_data:
    driver: local
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "staging"
      com.acgs.volume: "postgres-data"
  
  redis_staging_data:
    driver: local
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "staging"
      com.acgs.volume: "redis-data"
  
  prometheus_staging_data:
    driver: local
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "staging"
      com.acgs.volume: "prometheus-data"
  
  grafana_staging_data:
    driver: local
    labels:
      com.acgs.constitutional-hash: "cdd01ef066bc6cf2"
      com.acgs.environment: "staging"
      com.acgs.volume: "grafana-data"