# ACGS API Gateway Configuration
# Production-grade reverse proxy with TLS termination and security policies

# Upstream backend services
upstream auth_backend {
    least_conn;
    server auth-service:8000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream constitutional_ai_backend {
    least_conn;
    server constitutional-ai-service:8001 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream integrity_backend {
    least_conn;
    server integrity-service:8002 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream governance_synthesis_backend {
    least_conn;
    server governance-synthesis-service:8004 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream policy_governance_backend {
    least_conn;
    server policy-governance-service:8005 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Rate limiting maps
map $request_uri $rate_limit_key {
    ~*/api/v1/auth/ $binary_remote_addr;
    default "";
}

# HTTP to HTTPS redirect
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # Security headers for HTTP
    add_header X-Constitutional-Hash "cdd01ef066bc6cf2" always;
    add_header X-ACGS-Security "redirect-to-https" always;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name acgs.local acgs.example.com;

    # SSL Certificate Configuration
    ssl_certificate /etc/nginx/certs/acgs.crt;
    ssl_certificate_key /etc/nginx/certs/acgs.key;
    ssl_trusted_certificate /etc/nginx/certs/acgs-chain.crt;

    # Enhanced SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Enhanced Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data: https:; connect-src 'self' ws: wss: https:; media-src 'self'; object-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self'; upgrade-insecure-requests" always;

    # Constitutional Compliance Headers
    add_header X-Constitutional-Hash "cdd01ef066bc6cf2" always;
    add_header X-ACGS-Security "enabled" always;
    add_header X-Multi-Tenant "enabled" always;
    add_header X-Gateway-Version "1.0.0" always;

    # Global rate limiting
    limit_req zone=global burst=20 nodelay;
    limit_conn addr 10;

    # Root location (API documentation)
    location / {
        return 301 https://$host/docs;
    }

    # Health check endpoint (bypasses rate limiting)
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"acgs-gateway","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json always;
        add_header X-Constitutional-Hash "cdd01ef066bc6cf2" always;
    }

    # Authentication Service
    location /api/v1/auth/ {
        # Strict rate limiting for auth endpoints
        limit_req zone=auth burst=10 nodelay;

        # Security headers specific to auth
        add_header X-Service-Backend "auth" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        # Proxy to auth service
        proxy_pass http://auth_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_cache_bypass $http_upgrade;

        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Constitutional AI Service
    location /api/v1/constitutional/ {
        # API rate limiting
        limit_req zone=api burst=50 nodelay;

        add_header X-Service-Backend "constitutional-ai" always;

        proxy_pass http://constitutional_ai_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_cache_bypass $http_upgrade;

        # Extended timeouts for AI processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # Integrity Service
    location /api/v1/integrity/ {
        limit_req zone=api burst=30 nodelay;

        add_header X-Service-Backend "integrity" always;

        proxy_pass http://integrity_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_cache_bypass $http_upgrade;

        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Governance Synthesis Service
    location /api/v1/synthesize/ {
        limit_req zone=api burst=20 nodelay;

        add_header X-Service-Backend "governance-synthesis" always;

        proxy_pass http://governance_synthesis_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_Set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_cache_bypass $http_upgrade;

        # Extended timeouts for synthesis processing
        proxy_connect_timeout 10s;
        proxy_send_timeout 180s;
        proxy_read_timeout 180s;
    }

    # Policy Governance Service
    location /api/v1/validate/ {
        limit_req zone=api burst=40 nodelay;

        add_header X-Service-Backend "policy-governance" always;

        proxy_pass http://policy_governance_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_cache_bypass $http_upgrade;

        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # General API routes (catch-all for service discovery)
    location /api/ {
        limit_req zone=api burst=30 nodelay;

        # Try each service in order for unmatched API routes
        error_page 404 = @try_auth_service;
    }

    # Service discovery fallback locations
    location @try_auth_service {
        internal;
        proxy_pass http://auth_backend;
        proxy_intercept_errors on;
        error_page 404 = @try_constitutional_ai;
    }

    location @try_constitutional_ai {
        internal;
        proxy_pass http://constitutional_ai_backend;
        proxy_intercept_errors on;
        error_page 404 = @try_integrity;
    }

    location @try_integrity {
        internal;
        proxy_pass http://integrity_backend;
        proxy_intercept_errors on;
        error_page 404 = @not_found;
    }

    location @not_found {
        internal;
        return 404 '{"error":"API endpoint not found","constitutional_hash":"cdd01ef066bc6cf2"}';
        add_header Content-Type application/json always;
    }

    # Security: Block direct access to sensitive files
    location ~ /\.(ht|git|svn) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Security: Block access to backup files
    location ~ \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Monitoring endpoint for Prometheus
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 172.21.0.0/24;  # Backend network only
        deny all;
    }

    # Error pages
    error_page 400 /400.html;
    error_page 401 /401.html;
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
        add_header X-Constitutional-Hash "cdd01ef066bc6cf2" always;
    }
}
