version: '3.8'

networks:
  acgs-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  acgs-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  acgs-database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  acgs_logs:
    driver: local
  acgs_certs:
    driver: local

services:
  # Load Balancer / API Gateway
  nginx:
    image: nginx:1.25-alpine
    container_name: acgs-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    networks:
      - acgs-frontend
      - acgs-backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - acgs_certs:/etc/nginx/certs:ro
      - acgs_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - auth-service
      - constitutional-ai-service
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE

  # Authentication Service
  auth-service:
    build:
      context: ../../services/platform_services/authentication/auth_service
      dockerfile: Dockerfile.prod
    container_name: acgs-auth-service
    restart: unless-stopped
    networks:
      - acgs-backend
      - acgs-database
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=${CORS_ORIGINS:-https://acgs.example.com}
      - ALLOWED_HOSTS=auth-service,localhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - acgs_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/logs:exec,nosuid,size=100m
    cap_drop:
      - ALL

  # Constitutional AI Service
  constitutional-ai-service:
    build:
      context: ../../services/core/constitutional-ai/ac_service
      dockerfile: Dockerfile.prod
    container_name: acgs-constitutional-ai
    restart: unless-stopped
    networks:
      - acgs-backend
      - acgs-database
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/1
      - LOG_LEVEL=INFO
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - acgs_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/logs:exec,nosuid,size=100m
    cap_drop:
      - ALL

  # Integrity Service
  integrity-service:
    build:
      context: ../../services/platform_services/integrity/integrity_service
      dockerfile: Dockerfile.prod
    container_name: acgs-integrity
    restart: unless-stopped
    networks:
      - acgs-backend
      - acgs-database
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - acgs_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/logs:exec,nosuid,size=100m
    cap_drop:
      - ALL

  # Policy Governance Service
  policy-governance-service:
    build:
      context: ../../services/core/policy-governance/pgc_service
      dockerfile: Dockerfile.prod
    container_name: acgs-policy-governance
    restart: unless-stopped
    networks:
      - acgs-backend
      - acgs-database
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/3
      - LOG_LEVEL=INFO
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - acgs_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/logs:exec,nosuid,size=100m
    cap_drop:
      - ALL

  # Governance Synthesis Service
  governance-synthesis-service:
    build:
      context: ../../services/core/governance-synthesis/gs_service
      dockerfile: Dockerfile.prod
    container_name: acgs-governance-synthesis
    restart: unless-stopped
    networks:
      - acgs-backend
      - acgs-database
    environment:
      - ENVIRONMENT=production
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/4
      - LOG_LEVEL=INFO
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - ENABLE_LEADER_ELECTION=true
      - KUBERNETES_NAMESPACE=acgs-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - acgs_logs:/app/logs
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /app/logs:exec,nosuid,size=100m
    cap_drop:
      - ALL

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: acgs-postgres
    restart: unless-stopped
    networks:
      - acgs-database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - acgs_logs:/var/log/postgresql
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_destination=stderr
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on
      -c log_checkpoints=on
      -c log_lock_waits=on
      -c log_temp_files=0
      -c shared_preload_libraries=pg_stat_statements
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=10m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - FOWNER
      - DAC_OVERRIDE

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: acgs-redis
    restart: unless-stopped
    networks:
      - acgs-database
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 128
      --maxclients 128
      --protected-mode yes
      --port 6379
      --bind 0.0.0.0
      --loglevel notice
      --syslog-enabled yes
      --syslog-ident acgs-redis
    volumes:
      - redis_data:/data
      - acgs_logs:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL

  # Security Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: acgs-prometheus
    restart: unless-stopped
    networks:
      - acgs-backend
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - acgs_logs:/prometheus/logs
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.size=10GB'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL