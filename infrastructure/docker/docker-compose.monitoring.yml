version: '3.8'

# ACGS-2 Monitoring Stack with Sentry Integration
# Includes Prometheus, Grafana, and Sentry Self-Hosted for comprehensive monitoring
# Constitutional Hash: cdd01ef066bc6cf2

networks:
  acgs_monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 10.201.0.0/16

services:
  # Existing Prometheus setup (enhanced with Sentry metrics)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: acgs_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.10
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    labels:
      - "acgs.service=monitoring"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Enhanced Grafana with Sentry plugin
  grafana:
    image: grafana/grafana:10.1.0
    container_name: acgs_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=os.environ.get("PASSWORD")
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-sentry-datasource
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.11
    depends_on:
      - prometheus
    labels:
      - "acgs.service=monitoring"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # AlertManager for Prometheus alerts
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: acgs_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.12
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    labels:
      - "acgs.service=monitoring"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Redis for Sentry (if using self-hosted)
  redis_sentry:
    image: redis:7.0-alpine
    container_name: acgs_redis_sentry
    restart: unless-stopped
    volumes:
      - redis_sentry_data:/data
    command: redis-server --appendonly yes
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.20
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    labels:
      - "acgs.service=monitoring-storage"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # PostgreSQL for Sentry (if using self-hosted)
  postgres_sentry:
    image: postgres:15
    container_name: acgs_postgres_sentry
    restart: unless-stopped
    environment:
      - POSTGRES_USER=sentry
      - POSTGRES_PASSWORD=os.environ.get("PASSWORD")
      - POSTGRES_DB=sentry
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    volumes:
      - postgres_sentry_data:/var/lib/postgresql/data
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.21
    labels:
      - "acgs.service=monitoring-storage"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Sentry Self-Hosted (optional - can use sentry.io instead)
  sentry_web:
    image: getsentry/sentry:latest
    container_name: acgs_sentry_web
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY:-your-secret-key-change-in-production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
      - SENTRY_POSTGRES_HOST=postgres_sentry
      - SENTRY_POSTGRES_PORT=5432
      - SENTRY_DB_NAME=sentry
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=os.environ.get("PASSWORD")
      - SENTRY_REDIS_HOST=redis_sentry
      - SENTRY_REDIS_PORT=6379
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    volumes:
      - sentry_data:/var/lib/sentry/files
    depends_on:
      - redis_sentry
      - postgres_sentry
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.30
    labels:
      - "acgs.service=monitoring-sentry"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Sentry Worker (for background processing)
  sentry_worker:
    image: getsentry/sentry:latest
    container_name: acgs_sentry_worker
    restart: unless-stopped
    command: sentry run worker
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY:-your-secret-key-change-in-production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
      - SENTRY_POSTGRES_HOST=postgres_sentry
      - SENTRY_POSTGRES_PORT=5432
      - SENTRY_DB_NAME=sentry
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=os.environ.get("PASSWORD")
      - SENTRY_REDIS_HOST=redis_sentry
      - SENTRY_REDIS_PORT=6379
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    volumes:
      - sentry_data:/var/lib/sentry/files
    depends_on:
      - redis_sentry
      - postgres_sentry
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.31
    labels:
      - "acgs.service=monitoring-sentry"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Sentry Cron (for scheduled tasks)
  sentry_cron:
    image: getsentry/sentry:latest
    container_name: acgs_sentry_cron
    restart: unless-stopped
    command: sentry run cron
    environment:
      - SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY:-your-secret-key-change-in-production}  # TODO: Replace with environment variable - Constitutional Hash: cdd01ef066bc6cf2
      - SENTRY_POSTGRES_HOST=postgres_sentry
      - SENTRY_POSTGRES_PORT=5432
      - SENTRY_DB_NAME=sentry
      - SENTRY_DB_USER=sentry
      - SENTRY_DB_PASSWORD=os.environ.get("PASSWORD")
      - SENTRY_REDIS_HOST=redis_sentry
      - SENTRY_REDIS_PORT=6379
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    volumes:
      - sentry_data:/var/lib/sentry/files
    depends_on:
      - redis_sentry
      - postgres_sentry
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.32
    labels:
      - "acgs.service=monitoring-sentry"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:v1.6.0
    container_name: acgs_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.40
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    labels:
      - "acgs.service=monitoring-metrics"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: acgs_cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    # Use specific capabilities instead of privileged mode for security
    cap_add:
      - SYS_ADMIN
      - DAC_READ_SEARCH
    devices:
      - /dev/kmsg
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.41
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    labels:
      - "acgs.service=monitoring-metrics"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # Jaeger for distributed tracing (complements Sentry)
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: acgs_jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP receiver
      - "14250:14250"  # gRPC receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.50
    labels:
      - "acgs.service=monitoring-tracing"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

  # ACGS-specific metrics collector
  acgs_metrics_collector:
    build:
      context: ../../
      dockerfile: scripts/monitoring/Dockerfile.metrics-collector
    container_name: acgs_metrics_collector
    restart: unless-stopped
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - PROMETHEUS_URL=http://prometheus:9090
      - SENTRY_DSN=${SENTRY_DSN}
      - COLLECTION_INTERVAL=30
    volumes:
      - ../../:/app/acgs
    networks:
      acgs_monitoring:
        ipv4_address: 10.201.1.60
    depends_on:
      - prometheus
    labels:
      - "acgs.service=monitoring-custom"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"

volumes:
  prometheus_data:
    driver: local
    labels:
      - "acgs.data=prometheus"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"
  
  grafana_data:
    driver: local
    labels:
      - "acgs.data=grafana"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"
  
  alertmanager_data:
    driver: local
    labels:
      - "acgs.data=alertmanager"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"
  
  redis_sentry_data:
    driver: local
    labels:
      - "acgs.data=redis-sentry"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"
  
  postgres_sentry_data:
    driver: local
    labels:
      - "acgs.data=postgres-sentry"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"
  
  sentry_data:
    driver: local
    labels:
      - "acgs.data=sentry"
      - "acgs.constitutional-hash=cdd01ef066bc6cf2"