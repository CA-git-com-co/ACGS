# ACGS/docker-compose.yml
version: '3.8'

services:
  postgres_db:
    image: postgres:15-alpine
    container_name: acgs_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-acgs_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-acgs_password}
      POSTGRES_DB: ${POSTGRES_DB:-acgs_pgp_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Expose PostgreSQL port to host (optional, for direct access)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-acgs_user} -d ${POSTGRES_DB:-acgs_pgp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Task 7: Redis for parallel processing and caching
  redis:
    image: redis:7-alpine
    container_name: acgs_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # LangGraph Redis for workflow state management
  langgraph_redis:
    image: redis:6
    container_name: acgs_langgraph_redis
    ports:
      - "6381:6379"  # LangGraph Redis on port 6381
    volumes:
      - langgraph_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 1s
      retries: 5
    restart: unless-stopped

  # Task 8: OPA service for incremental policy compilation
  opa:
    image: openpolicyagent/opa:0.58.0-envoy
    container_name: acgs_opa
    ports:
      - "8181:8181"  # OPA REST API
    volumes:
      - opa_policies:/policies
      - opa_data:/data
      - ./opa-config.yaml:/config/opa-config.yaml:ro
    command: >
      run --server
      --addr=0.0.0.0:8181
      --diagnostic-addr=0.0.0.0:8282
      --set=decision_logs.console=true
      --set=status.console=true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8181/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  alembic-runner:
    build:
      context: ../.. # Build context is the root directory
      dockerfile: ./services/shared/Dockerfile.alembic
    container_name: acgs_alembic_runner
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://USER:PASSWORD@postgres_db:5432/DBNAME}
      # POSTGRES_USER and POSTGRES_PASSWORD needed by wait-for-postgres.sh
      - POSTGRES_USER=${POSTGRES_USER:-acgs_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-acgs_password}
    # Command to wait for DB, run migrations, then exit.
    command: >
      sh -c "echo 'Waiting for database...' &&
             chmod +x /app/shared/wait-for-postgres.sh &&
             /app/shared/wait-for-postgres.sh postgres_db ${POSTGRES_USER:-acgs_user} ${POSTGRES_PASSWORD:-acgs_password} &&
             echo 'DB Ready' &&
             echo 'Running Alembic migrations...' &&
             alembic -c /app/alembic.ini upgrade head &&
             echo 'Migrations complete. Container will exit.'"
    # This service should run to completion and exit.
    # No restart policy is needed unless you want it to retry on failure.

  auth_service:
    build: ../../services/platform/authentication
    container_name: acgs_auth_service
    ports:
      - "8000:8000" # External port mapping for direct access
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://USER:PASSWORD@postgres_db:5432/DBNAME}
      - SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - ALGORITHM=${AUTH_SERVICE_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${AUTH_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${AUTH_SERVICE_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - CSRF_SECRET_KEY=${AUTH_SERVICE_CSRF_SECRET_KEY:-your_strong_csrf_secret_key_for_auth_service}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      postgres_db:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully # Depends on alembic-runner exiting cleanly
    volumes:
      - ../../services/platform/authentication:/app
      - ../../services/shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ac_service:
    build: ../../services/core/constitutional-ai
    container_name: acgs_ac_service
    ports:
      - "8001:8001" # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://USER:PASSWORD@postgres_db:5432/DBNAME}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
      # LangGraph configuration
      - LANGGRAPH_REDIS_URL=${LANGGRAPH_REDIS_URL:-redis://langgraph_redis:6379}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - CONSTITUTIONAL_FIDELITY_THRESHOLD=${CONSTITUTIONAL_FIDELITY_THRESHOLD:-0.85}
      - MAX_REFINEMENT_ITERATIONS=${MAX_REFINEMENT_ITERATIONS:-5}
    depends_on:
      postgres_db:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully
      langgraph_redis:
        condition: service_healthy
    volumes:
      - ../../services/core/constitutional-ai:/app
      - ../../services/shared:/app/shared
    restart: unless-stopped

  integrity_service:
    build: ../../services/platform/integrity
    container_name: acgs_integrity_service
    ports:
      - "8002:8002" # Internal port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://USER:PASSWORD@postgres_db:5432/DBNAME}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ../../services/platform/integrity:/app
      - ../../services/shared:/app/shared
    restart: unless-stopped

  fv_service:
    build: ../../services/core/formal-verification
    container_name: acgs_fv_service
    ports:
      - "8003:8003" # Internal port
    environment:
      - VERIFICATION_TOOL_ENDPOINT=${VERIFICATION_TOOL_ENDPOINT:-http://mock_verification_tool:80/verify}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
      # Task 7: Parallel processing configuration
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/1}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
      - PARALLEL_MAX_CONCURRENT=${PARALLEL_MAX_CONCURRENT:-50}
      - PARALLEL_BATCH_SIZE=${PARALLEL_BATCH_SIZE:-25}
      - ENABLE_WEBSOCKET_STREAMING=${ENABLE_WEBSOCKET_STREAMING:-true}
    depends_on:
      ac_service:
        condition: service_started # Or healthy if healthcheck is added to ac_service
      integrity_service:
        condition: service_started # Or healthy
      redis:
        condition: service_healthy # Wait for Redis to be ready
    volumes:
      - ../../services/core/formal-verification:/app
      - ../../services/shared:/app/shared
    restart: unless-stopped

  gs_service:
    build: ../../services/core/governance-synthesis
    container_name: acgs_gs_service
    ports:
      - "8004:8004" # Internal port
    environment:
      - LLM_API_ENDPOINT=${LLM_API_ENDPOINT:-http://mock_llm_service/generate}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - FV_SERVICE_URL=${FV_SERVICE_URL:-http://fv_service:8003/api/v1}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
      # LangGraph configuration
      - LANGGRAPH_REDIS_URL=${LANGGRAPH_REDIS_URL:-redis://langgraph_redis:6379}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - POLICY_QUALITY_THRESHOLD=${POLICY_QUALITY_THRESHOLD:-0.80}
      - MAX_SYNTHESIS_LOOPS=${MAX_SYNTHESIS_LOOPS:-3}
    depends_on:
      ac_service:
        condition: service_started
      integrity_service:
        condition: service_started
      fv_service:
        condition: service_started
      langgraph_redis:
        condition: service_healthy
    volumes:
      - ../../services/core/governance-synthesis:/app
      - ../../services/shared:/app/shared
      - ../../integrations/alphaevolve-engine/src/alphaevolve_gs_engine:/app/alphaevolve_gs_engine
    restart: unless-stopped

  pgc_service:
    build: ../../services/core/policy-governance
    container_name: acgs_pgc_service
    ports:
      - "8005:8005" # Internal port
    environment:
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002/api/v1}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
      # Task 8: OPA integration for incremental policy compilation
      - OPA_SERVER_URL=${OPA_SERVER_URL:-http://opa:8181}
      - OPA_BUNDLE_NAME=${OPA_BUNDLE_NAME:-authz}
      - ENABLE_INCREMENTAL_COMPILATION=${ENABLE_INCREMENTAL_COMPILATION:-true}
      - POLICY_CACHE_TTL=${POLICY_CACHE_TTL:-300}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      integrity_service:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ../../services/core/policy-governance:/app
      - ../../services/shared:/app/shared
    restart: unless-stopped

  # Research Infrastructure Service
  research_service:
    build: ../../services/research/research-platform/research_service
    container_name: acgs_research_service
    ports:
      - "8007:8007" # Internal port
    environment:
      - RESEARCH_DATABASE_URL=${RESEARCH_DATABASE_URL:-postgresql+asyncpg://USER:PASSWORD@postgres_db:5432/DBNAME}
      - RESEARCH_REDIS_URL=${RESEARCH_REDIS_URL:-redis://redis:6379/2}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001}
      - GS_SERVICE_URL=${GS_SERVICE_URL:-http://gs_service:8004}
      - FV_SERVICE_URL=${FV_SERVICE_URL:-http://fv_service:8003}
      - INTEGRITY_SERVICE_URL=${INTEGRITY_SERVICE_URL:-http://integrity_service:8002}
      - PGC_SERVICE_URL=${PGC_SERVICE_URL:-http://pgc_service:8005}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
      # Research configuration
      - EXPERIMENT_TRACKING_ENABLED=${EXPERIMENT_TRACKING_ENABLED:-true}
      - AUTO_ANALYSIS_ENABLED=${AUTO_ANALYSIS_ENABLED:-true}
      - REPRODUCIBILITY_CHECKS_ENABLED=${REPRODUCIBILITY_CHECKS_ENABLED:-true}
      - MAX_EXPERIMENT_DURATION_HOURS=${MAX_EXPERIMENT_DURATION_HOURS:-24}
      - DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-365}
      - STATISTICAL_SIGNIFICANCE_THRESHOLD=${STATISTICAL_SIGNIFICANCE_THRESHOLD:-0.05}
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully
    volumes:
      - ../../services/research/research-platform/research_service:/app
      - ../../services/shared:/app/shared
      - research_data:/app/research_data
      - experiment_artifacts:/app/experiment_artifacts
      - analysis_results:/app/analysis_results
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # EC Service (Evolutionary Computation) - WINA Optimization and Constitutional Oversight
  ec_service:
    build: ../../services/core/evolutionary-computation/ec_service
    container_name: acgs_ec_service
    ports:
      - "8006:8006" # Internal port (service runs on 8006 inside container)
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://USER:PASSWORD@postgres_db:5432/DBNAME}
      - AC_SERVICE_URL=${AC_SERVICE_URL:-http://ac_service:8001/api/v1}
      - GS_SERVICE_URL=${GS_SERVICE_URL:-http://gs_service:8004/api/v1}
      - JWT_SECRET_KEY=${AUTH_SERVICE_SECRET_KEY:-acgs-development-secret-key-2024-phase1-infrastructure-stabilization-jwt-token-signing}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - PYTHONPATH=/app:/app/shared
      # WINA Optimization Configuration
      - WINA_ENABLED=${WINA_ENABLED:-true}
      - WINA_SVD_ENABLED=${WINA_SVD_ENABLED:-true}
      - WINA_GATING_ENABLED=${WINA_GATING_ENABLED:-true}
      - WINA_GFLOPS_REDUCTION_TARGET=${WINA_GFLOPS_REDUCTION_TARGET:-0.55}
      - WINA_SYNTHESIS_ACCURACY_THRESHOLD=${WINA_SYNTHESIS_ACCURACY_THRESHOLD:-0.95}
      - WINA_CONSTITUTIONAL_COMPLIANCE_ENABLED=${WINA_CONSTITUTIONAL_COMPLIANCE_ENABLED:-true}
      # AlphaEvolve Configuration
      - ALPHAEVOLVE_ENABLED=${ALPHAEVOLVE_ENABLED:-true}
      - EVOLUTIONARY_COMPUTATION_ENABLED=${EVOLUTIONARY_COMPUTATION_ENABLED:-true}
      - POPULATION_SIZE=${POPULATION_SIZE:-50}
      - MUTATION_RATE=${MUTATION_RATE:-0.1}
      - CROSSOVER_RATE=${CROSSOVER_RATE:-0.8}
      - MAX_GENERATIONS=${MAX_GENERATIONS:-100}
      # Constitutional Fidelity Monitoring
      - CFM_ENABLED=${CFM_ENABLED:-true}
      - CFM_GREEN_THRESHOLD=${CFM_GREEN_THRESHOLD:-0.85}
      - CFM_AMBER_THRESHOLD=${CFM_AMBER_THRESHOLD:-0.70}
      - CFM_RED_THRESHOLD=${CFM_RED_THRESHOLD:-0.55}
      - CFM_MONITORING_INTERVAL_SECONDS=${CFM_MONITORING_INTERVAL_SECONDS:-30}
      # Redis for performance monitoring
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      postgres_db:
        condition: service_healthy
      ac_service:
        condition: service_started
      gs_service:
        condition: service_started
      redis:
        condition: service_healthy
      alembic-runner:
        condition: service_completed_successfully
    volumes:
      - ../../services/core/evolutionary-computation/ec_service:/app
      - ../../services/shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx_gateway:
    image: nginx:1.25-alpine
    container_name: acgs_nginx_gateway
    ports:
      - "8000:80" # Main entry point for backend APIs via Nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth_service
      - ac_service
      - integrity_service
      - fv_service
      - gs_service
      - pgc_service
      - ec_service
    restart: unless-stopped

  frontend:
    build: ../../applications/legacy-frontend
    container_name: acgs_frontend
    ports:
      - "3000:3000" # React development server port (host:container)
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-/api} # Points to Nginx gateway
      - CHOKIDAR_USEPOLLING=true # For Docker hot-reloading on some systems
    volumes:
      - ../../applications/legacy-frontend:/app
      - /app/node_modules # Use node_modules from image, not host, to avoid OS conflicts
    depends_on:
      - nginx_gateway # Frontend makes API calls through Nginx
    restart: unless-stopped

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: acgs_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - auth_service
      - ac_service
      - integrity_service
      - fv_service
      - gs_service
      - pgc_service
      - ec_service

  # HAProxy Load Balancer for High Availability
  haproxy_load_balancer:
    build: ../load-balancer
    container_name: acgs_haproxy_lb
    ports:
      - "80:80"     # HTTP traffic
      - "443:443"   # HTTPS traffic
      - "8080:8080" # HAProxy stats interface
    volumes:
      - ../load-balancer/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ../load-balancer/errors:/etc/haproxy/errors:ro
      - ../load-balancer/ssl:/etc/ssl/certs:ro
      - haproxy_logs:/var/log/haproxy
    environment:
      - HAPROXY_STATS_USER=${HAPROXY_STATS_USER:-admin}
      - HAPROXY_STATS_PASSWORD=${HAPROXY_STATS_PASSWORD:-acgs_haproxy_admin_2024}
    depends_on:
      auth_service:
        condition: service_started
      ac_service:
        condition: service_started
      integrity_service:
        condition: service_started
      fv_service:
        condition: service_started
      gs_service:
        condition: service_started
      pgc_service:
        condition: service_started
      ec_service:
        condition: service_started
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - default

  # Grafana monitoring dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: acgs_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  langgraph_redis_data:
  opa_policies:
  opa_data:
  prometheus_data:
  grafana_data:
  research_data:
  experiment_artifacts:
  analysis_results:
  haproxy_logs:
