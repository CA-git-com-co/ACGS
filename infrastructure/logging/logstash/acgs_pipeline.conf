# Logstash Pipeline Configuration for ACGS-1
# Processes logs from all 7 core services with structured parsing and enrichment

input {
  # Filebeat input for service logs
  beats {
    port => 5044
    type => "filebeat"
  }
  
  # Direct syslog input
  syslog {
    port => 5514
    type => "syslog"
  }
  
  # HTTP input for application logs
  http {
    port => 8080
    type => "http"
  }
  
  # Redis input for high-volume logs
  redis {
    host => "localhost"
    port => 6379
    data_type => "list"
    key => "acgs_logs"
    type => "redis"
  }
}

filter {
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
    }
    
    # Move parsed fields to root level
    if [parsed] {
      mutate {
        add_field => {
          "service" => "%{[parsed][service]}"
          "level" => "%{[parsed][level]}"
          "timestamp" => "%{[parsed][timestamp]}"
          "request_id" => "%{[parsed][request_id]}"
          "user_id" => "%{[parsed][user_id]}"
          "endpoint" => "%{[parsed][endpoint]}"
          "method" => "%{[parsed][method]}"
          "status_code" => "%{[parsed][status_code]}"
          "response_time" => "%{[parsed][response_time]}"
          "error_message" => "%{[parsed][error]}"
        }
      }
    }
  }
  
  # Parse service-specific log formats
  if [service] == "auth_service" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:logger} - %{GREEDYDATA:log_message}"
      }
    }
    
    # Extract authentication events
    if [log_message] =~ /authentication/ {
      mutate {
        add_field => { "event_type" => "authentication" }
      }
      
      grok {
        match => {
          "log_message" => "authentication %{WORD:auth_result} for user %{DATA:username} from %{IP:client_ip}"
        }
      }
    }
  }
  
  if [service] == "pgc_service" {
    # Parse policy enforcement logs
    if [log_message] =~ /policy enforcement/ {
      mutate {
        add_field => { "event_type" => "policy_enforcement" }
      }
      
      grok {
        match => {
          "log_message" => "policy enforcement %{WORD:enforcement_result} for policy %{DATA:policy_id} with confidence %{NUMBER:confidence}"
        }
      }
    }
    
    # Parse governance workflow logs
    if [log_message] =~ /workflow/ {
      mutate {
        add_field => { "event_type" => "governance_workflow" }
      }
      
      grok {
        match => {
          "log_message" => "workflow %{DATA:workflow_id} %{WORD:workflow_status} in %{NUMBER:execution_time}ms"
        }
      }
    }
  }
  
  if [service] == "ac_service" {
    # Parse constitutional compliance logs
    if [log_message] =~ /constitutional compliance/ {
      mutate {
        add_field => { "event_type" => "constitutional_compliance" }
      }
      
      grok {
        match => {
          "log_message" => "constitutional compliance score %{NUMBER:compliance_score} for validation %{DATA:validation_id}"
        }
      }
    }
  }
  
  if [service] == "gs_service" {
    # Parse LLM operation logs
    if [log_message] =~ /LLM/ {
      mutate {
        add_field => { "event_type" => "llm_operation" }
      }
      
      grok {
        match => {
          "log_message" => "LLM %{DATA:model} %{WORD:operation} completed in %{NUMBER:llm_duration}ms with %{NUMBER:token_count} tokens"
        }
      }
    }
  }
  
  # Security event detection
  if [log_message] =~ /(failed login|unauthorized|blocked|suspicious|attack|violation)/ {
    mutate {
      add_field => { "security_event" => "true" }
      add_field => { "alert_level" => "high" }
    }
  }
  
  # Performance monitoring
  if [response_time] {
    if [response_time] > 1000 {
      mutate {
        add_field => { "performance_alert" => "slow_response" }
      }
    }
  }
  
  # Error categorization
  if [level] == "ERROR" or [status_code] >= 500 {
    mutate {
      add_field => { "error_category" => "system_error" }
    }
  } else if [status_code] >= 400 and [status_code] < 500 {
    mutate {
      add_field => { "error_category" => "client_error" }
    }
  }
  
  # Geolocation for client IPs
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Add environment and deployment info
  mutate {
    add_field => {
      "environment" => "production"
      "deployment_version" => "3.0.0"
      "cluster" => "acgs-main"
    }
  }
  
  # Convert numeric fields
  if [response_time] {
    mutate {
      convert => { "response_time" => "integer" }
    }
  }
  
  if [status_code] {
    mutate {
      convert => { "status_code" => "integer" }
    }
  }
  
  if [confidence] {
    mutate {
      convert => { "confidence" => "float" }
    }
  }
  
  if [compliance_score] {
    mutate {
      convert => { "compliance_score" => "float" }
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => ["parsed", "beat", "input", "agent", "ecs", "host"]
  }
  
  # Add timestamp if not present
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "acgs-logs-%{+YYYY.MM.dd}"
    template_name => "acgs-logs"
    template => "/etc/logstash/templates/acgs-logs-template.json"
    template_overwrite => true
  }
  
  # Security events to dedicated index
  if [security_event] == "true" {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "acgs-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Performance alerts to dedicated index
  if [performance_alert] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "acgs-performance-%{+YYYY.MM.dd}"
    }
  }
  
  # Error logs to dedicated index
  if [error_category] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "acgs-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # Governance events to dedicated index
  if [event_type] in ["policy_enforcement", "governance_workflow", "constitutional_compliance"] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "acgs-governance-%{+YYYY.MM.dd}"
    }
  }
  
  # High-priority alerts to external systems
  if [alert_level] == "high" {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "ACGS Security Event"
              "service" => "%{service}"
              "severity" => "critical"
            }
            "annotations" => {
              "summary" => "%{log_message}"
              "description" => "Security event detected in %{service}: %{log_message}"
            }
          }
        ]
      }
    }
  }
  
  # Debug output (remove in production)
  if [service] == "debug" {
    stdout {
      codec => rubydebug
    }
  }
}
