# Constitutional Hash: cdd01ef066bc6cf2
# ACGS-1 Security Log Processing Pipeline
# Real-time security event processing, threat detection, and enrichment

input {
  # ACGS service logs via Filebeat
  beats {
    port => 5044
    type => "acgs-logs"
  }
  
  # Direct TCP input for real-time security events
  tcp {
    port => 5000
    type => "acgs-security-events"
    codec => json_lines
  }
  
  # System logs
  file {
    path => "/var/log/acgs/security/*.log"
    type => "acgs-security"
    codec => json
    start_position => "beginning"
  }
  
  # Authentication logs
  file {
    path => "/var/log/acgs/auth/*.log"
    type => "acgs-auth"
    codec => json
    start_position => "beginning"
  }
  
  # Audit logs
  file {
    path => "/var/log/acgs/audit/*.log"
    type => "acgs-audit"
    codec => json
    start_position => "beginning"
  }
  
  # Governance workflow logs
  file {
    path => "/var/log/acgs/governance/*.log"
    type => "acgs-governance"
    codec => json
    start_position => "beginning"
  }
}

filter {
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Add common fields
  mutate {
    add_field => {
      "system" => "acgs-1"
      "environment" => "production"
      "log_source" => "acgs-security-monitoring"
    }
  }
  
  # Security event processing
  if [type] == "acgs-security" or [type] == "acgs-security-events" {
    # Parse security events
    if [message] =~ /SECURITY_ALERT/ {
      grok {
        match => { 
          "message" => "SECURITY_ALERT\|%{DATA:alert_type}\|%{DATA:severity}\|%{DATA:source_ip}\|%{DATA:user_id}\|%{GREEDYDATA:description}" 
        }
        add_tag => ["security_alert"]
      }
      
      # Enrich with threat intelligence
      if [source_ip] {
        cidr {
          address => [ "%{source_ip}" ]
          network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
          add_tag => [ "internal_ip" ]
        }
        
        # GeoIP enrichment for external IPs
        if "internal_ip" not in [tags] {
          geoip {
            source => "source_ip"
            target => "geoip"
          }
        }
      }
      
      # Risk scoring
      if [severity] == "CRITICAL" {
        mutate { add_field => { "risk_score" => 100 } }
      } else if [severity] == "HIGH" {
        mutate { add_field => { "risk_score" => 75 } }
      } else if [severity] == "MEDIUM" {
        mutate { add_field => { "risk_score" => 50 } }
      } else {
        mutate { add_field => { "risk_score" => 25 } }
      }
    }
    
    # Failed authentication detection
    if [message] =~ /authentication.*failed|login.*failed|invalid.*credentials/ {
      mutate {
        add_tag => ["failed_auth"]
        add_field => { "event_type" => "authentication_failure" }
      }
    }
    
    # Suspicious activity detection
    if [message] =~ /multiple.*failed.*attempts|brute.*force|suspicious.*activity/ {
      mutate {
        add_tag => ["suspicious_activity"]
        add_field => { "event_type" => "suspicious_activity" }
      }
    }
    
    # Constitutional governance violations
    if [message] =~ /constitutional.*violation|governance.*breach|policy.*violation/ {
      mutate {
        add_tag => ["governance_violation"]
        add_field => { "event_type" => "governance_violation" }
      }
    }
  }
  
  # Authentication log processing
  if [type] == "acgs-auth" {
    # Parse authentication events
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:auth_timestamp} %{DATA:service} %{DATA:auth_result} user=%{DATA:user_id} ip=%{IP:client_ip} %{GREEDYDATA:auth_details}" 
      }
    }
    
    # Track authentication patterns
    if [auth_result] == "SUCCESS" {
      mutate { add_tag => ["successful_auth"] }
    } else {
      mutate { add_tag => ["failed_auth"] }
    }
  }
  
  # Audit log processing
  if [type] == "acgs-audit" {
    # Parse audit events
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:audit_timestamp} %{DATA:action} user=%{DATA:user_id} resource=%{DATA:resource} result=%{DATA:result} %{GREEDYDATA:audit_details}" 
      }
    }
    
    # Classify audit events
    if [action] =~ /create|modify|delete/ {
      mutate { add_tag => ["data_modification"] }
    }
    
    if [action] =~ /access|view|read/ {
      mutate { add_tag => ["data_access"] }
    }
  }
  
  # Governance workflow processing
  if [type] == "acgs-governance" {
    # Parse governance events
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:gov_timestamp} workflow=%{DATA:workflow_type} stage=%{DATA:stage} status=%{DATA:status} %{GREEDYDATA:gov_details}" 
      }
    }
    
    # Track governance workflow health
    if [status] == "FAILED" or [status] == "ERROR" {
      mutate { 
        add_tag => ["governance_failure"]
        add_field => { "event_type" => "governance_failure" }
      }
    }
  }
  
  # Remove sensitive data
  mutate {
    remove_field => ["password", "secret", "token", "key"]
  }
  
  # Convert numeric fields
  if [risk_score] {
    mutate {
      convert => { "risk_score" => "integer" }
    }
  }
}

output {
  # Security events to dedicated index
  if "security_alert" in [tags] or "suspicious_activity" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch-security:9200"]
      user => "elastic"
      password => "acgs_security_2024"
      index => "acgs-security-alerts-%{+YYYY.MM.dd}"
      template_name => "acgs-security-alerts"
      template_pattern => "acgs-security-alerts-*"
      template => {
        "index_patterns" => ["acgs-security-alerts-*"]
        "settings" => {
          "number_of_shards" => 1
          "number_of_replicas" => 0
          "index.refresh_interval" => "5s"
        }
        "mappings" => {
          "properties" => {
            "@timestamp" => { "type" => "date" }
            "alert_type" => { "type" => "keyword" }
            "severity" => { "type" => "keyword" }
            "risk_score" => { "type" => "integer" }
            "source_ip" => { "type" => "ip" }
            "user_id" => { "type" => "keyword" }
            "event_type" => { "type" => "keyword" }
          }
        }
      }
    }
  }
  
  # Authentication events
  if [type] == "acgs-auth" {
    elasticsearch {
      hosts => ["elasticsearch-security:9200"]
      user => "elastic"
      password => "acgs_security_2024"
      index => "acgs-auth-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # Audit events
  if [type] == "acgs-audit" {
    elasticsearch {
      hosts => ["elasticsearch-security:9200"]
      user => "elastic"
      password => "acgs_security_2024"
      index => "acgs-audit-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # Governance events
  if [type] == "acgs-governance" {
    elasticsearch {
      hosts => ["elasticsearch-security:9200"]
      user => "elastic"
      password => "acgs_security_2024"
      index => "acgs-governance-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # All other logs
  elasticsearch {
    hosts => ["elasticsearch-security:9200"]
    user => "elastic"
    password => "acgs_security_2024"
    index => "acgs-logs-%{+YYYY.MM.dd}"
  }
  
  # Debug output (remove in production)
  # stdout { codec => rubydebug }
}
