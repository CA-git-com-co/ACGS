# ACGS Phase 3A HAProxy Load Balancer Configuration
# Constitutional Hash: cdd01ef066bc6cf2
# Target: 99.9% uptime with intelligent load balancing

global
    daemon
    log stdout local0 info
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Constitutional compliance
    description "ACGS Load Balancer - Constitutional Hash: cdd01ef066bc6cf2"

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 3s
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "ACGS Load Balancer Statistics - Constitutional Hash: cdd01ef066bc6cf2"

# Main HTTP frontend
frontend acgs_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/acgs.pem
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # Constitutional compliance header
    http-response set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    http-response set-header X-ACGS-Zone "%[var(txn.zone)]"
    
    # Health check endpoint
    acl is_health_check path_beg /health
    use_backend acgs_health if is_health_check
    
    # Auth service routing
    acl is_auth path_beg /auth
    use_backend acgs_auth_backend if is_auth
    
    # Constitutional AI service routing
    acl is_constitutional path_beg /constitutional
    use_backend acgs_constitutional_backend if is_constitutional
    
    # Policy Governance service routing
    acl is_policy path_beg /policy
    use_backend acgs_policy_backend if is_policy
    
    # Governance Synthesis service routing
    acl is_governance path_beg /governance
    use_backend acgs_governance_backend if is_governance
    
    # Code Analysis service routing
    acl is_analysis path_beg /analysis
    use_backend acgs_analysis_backend if is_analysis
    
    # Default backend
    default_backend acgs_auth_backend

# Health check backend
backend acgs_health
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server health_zone_a acgs-auth-zone-a:8016 check inter 10s fall 3 rise 2
    server health_zone_b acgs-auth-zone-b:8016 check inter 10s fall 3 rise 2
    server health_zone_c acgs-auth-zone-c:8016 check inter 10s fall 3 rise 2

# Auth service backend (Multi-zone)
backend acgs_auth_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Zone preference based on client location (future enhancement)
    # stick-table type ip size 200k expire 30m
    # stick on src
    
    # Constitutional compliance tracking
    http-request set-var(txn.zone) str(multi-zone)
    http-response set-header X-Backend-Server %s
    
    server auth_zone_a acgs-auth-zone-a:8016 check inter 10s fall 3 rise 2 weight 100
    server auth_zone_b acgs-auth-zone-b:8016 check inter 10s fall 3 rise 2 weight 100
    server auth_zone_c acgs-auth-zone-c:8016 check inter 10s fall 3 rise 2 weight 100

# Constitutional AI backend (Multi-zone)
backend acgs_constitutional_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    http-request set-var(txn.zone) str(constitutional-ai)
    http-response set-header X-Backend-Server %s
    http-response set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    
    server constitutional_zone_a acgs-constitutional-zone-a:8001 check inter 10s fall 3 rise 2 weight 100
    server constitutional_zone_b acgs-constitutional-zone-b:8001 check inter 10s fall 3 rise 2 weight 100
    server constitutional_zone_c acgs-constitutional-zone-c:8001 check inter 10s fall 3 rise 2 weight 100

# Policy Governance backend (Multi-zone)
backend acgs_policy_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    http-request set-var(txn.zone) str(policy-governance)
    http-response set-header X-Backend-Server %s
    http-response set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    
    server policy_zone_a acgs-policy-zone-a:8005 check inter 10s fall 3 rise 2 weight 100
    server policy_zone_b acgs-policy-zone-b:8005 check inter 10s fall 3 rise 2 weight 100
    server policy_zone_c acgs-policy-zone-c:8005 check inter 10s fall 3 rise 2 weight 100

# Governance Synthesis backend (Multi-zone)
backend acgs_governance_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    http-request set-var(txn.zone) str(governance-synthesis)
    http-response set-header X-Backend-Server %s
    http-response set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    
    server governance_zone_a acgs-governance-zone-a:8004 check inter 10s fall 3 rise 2 weight 100
    server governance_zone_b acgs-governance-zone-b:8004 check inter 10s fall 3 rise 2 weight 100
    server governance_zone_c acgs-governance-zone-c:8004 check inter 10s fall 3 rise 2 weight 100

# Code Analysis backend (Multi-zone)
backend acgs_analysis_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    http-request set-var(txn.zone) str(code-analysis)
    http-response set-header X-Backend-Server %s
    http-response set-header X-Constitutional-Hash "cdd01ef066bc6cf2"
    
    server analysis_zone_a acgs-analysis-zone-a:8007 check inter 10s fall 3 rise 2 weight 100
    server analysis_zone_b acgs-analysis-zone-b:8007 check inter 10s fall 3 rise 2 weight 100
    server analysis_zone_c acgs-analysis-zone-c:8007 check inter 10s fall 3 rise 2 weight 100

# Database backend (Read/Write splitting)
backend acgs_database_write
    balance first
    option httpchk
    
    server postgres_primary postgres-primary:5432 check inter 10s fall 3 rise 2

backend acgs_database_read
    balance roundrobin
    option httpchk
    
    server postgres_replica_a postgres-replica-a:5432 check inter 10s fall 3 rise 2 weight 100
    server postgres_replica_b postgres-replica-b:5432 check inter 10s fall 3 rise 2 weight 100
    server postgres_primary postgres-primary:5432 check inter 10s fall 3 rise 2 weight 50 backup

# Redis backend (Cluster-aware)
backend acgs_redis_backend
    balance roundrobin
    option tcp-check
    
    server redis_cluster_1 redis-cluster-1:7001 check inter 10s fall 3 rise 2
    server redis_cluster_2 redis-cluster-2:7002 check inter 10s fall 3 rise 2
    server redis_cluster_3 redis-cluster-3:7003 check inter 10s fall 3 rise 2

# Monitoring backends
backend acgs_prometheus_backend
    balance roundrobin
    option httpchk GET /-/healthy
    http-check expect status 200
    
    server prometheus_ha prometheus-ha:9090 check inter 30s fall 3 rise 2

backend acgs_grafana_backend
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    
    server grafana_ha grafana-ha:3000 check inter 30s fall 3 rise 2

# Frontend for monitoring services
frontend acgs_monitoring
    bind *:9090
    bind *:3000
    
    # Prometheus routing
    acl is_prometheus dst_port 9090
    use_backend acgs_prometheus_backend if is_prometheus
    
    # Grafana routing
    acl is_grafana dst_port 3000
    use_backend acgs_grafana_backend if is_grafana
