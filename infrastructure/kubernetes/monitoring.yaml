---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: acgs-monitoring
  resources:
    requests:
      storage: 200Gi

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        constitutional-hash: "cdd01ef066bc6cf2"
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/part-of: acgs
        app.kubernetes.io/component: monitoring
      annotations:
        acgs.ai/constitutional-compliance: "required"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--storage.tsdb.retention.time=30d"
            - "--web.enable-lifecycle"
            - "--web.enable-admin-api"
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9090
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    # Constitutional Compliance Prometheus Configuration
    # Constitutional Hash: cdd01ef066bc6cf2

    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'acgs-production'
        constitutional_hash: 'cdd01ef066bc6cf2'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Prometheus self-monitoring
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 15s

      # ACGS API Gateway
      - job_name: 'acgs-api-gateway'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - acgs-system
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: api-gateway
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: metrics
        - source_labels: [__meta_kubernetes_service_annotation_acgs_ai_constitutional_compliance]
          action: keep
          regex: required
        scrape_interval: 10s

      # ACGS Core Services
      - job_name: 'acgs-core-services'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - acgs-system
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: '(auth|constitutional-ai|integrity|governance-synthesis|policy-governance|formal-verification)-service'
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: metrics
        - source_labels: [__meta_kubernetes_service_annotation_acgs_ai_constitutional_compliance]
          action: keep
          regex: required
        scrape_interval: 15s

      # Kubernetes cluster metrics
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Node metrics
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      # Pod metrics
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - acgs-system
            - acgs-monitoring
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

  rules.yml: |
    # Constitutional Compliance Alerting Rules
    # Constitutional Hash: cdd01ef066bc6cf2

    groups:
    - name: acgs.constitutional.compliance
      rules:
      - alert: ConstitutionalHashMismatch
        expr: up{constitutional_hash!="cdd01ef066bc6cf2"} == 1
        for: 0m
        labels:
          severity: critical
          component: constitutional-compliance
        annotations:
          summary: "Constitutional hash mismatch detected"
          description: "Service {{ $labels.instance }} has incorrect constitutional hash"

      - alert: ConstitutionalComplianceDown
        expr: up{job=~"acgs.*"} == 0
        for: 5m
        labels:
          severity: critical
          component: constitutional-compliance
        annotations:
          summary: "ACGS service is down"
          description: "{{ $labels.job }} has been down for more than 5 minutes"

    - name: acgs.performance
      rules:
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, http_request_duration_seconds_bucket{job=~"acgs.*"}) > 2
        for: 10m
        labels:
          severity: warning
          component: performance
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is {{ $value }}s for {{ $labels.job }}"

      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.01
        for: 5m
        labels:
          severity: critical
          component: performance
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.job }}"

    - name: acgs.security
      rules:
      - alert: SecurityPolicyViolation
        expr: increase(security_policy_violations_total[5m]) > 0
        for: 0m
        labels:
          severity: critical
          component: security
        annotations:
          summary: "Security policy violation detected"
          description: "{{ $value }} security policy violations in the last 5 minutes"

      - alert: AuditTrailIntegrityFailure
        expr: increase(audit_trail_integrity_failures_total[5m]) > 0
        for: 0m
        labels:
          severity: critical
          component: audit
        annotations:
          summary: "Audit trail integrity failure"
          description: "Audit trail integrity check failed {{ $value }} times in the last 5 minutes"

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: acgs-monitoring
  resources:
    requests:
      storage: 50Gi

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        constitutional-hash: "cdd01ef066bc6cf2"
        app.kubernetes.io/name: grafana
        app.kubernetes.io/part-of: acgs
        app.kubernetes.io/component: monitoring
      annotations:
        acgs.ai/constitutional-compliance: "required"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: monitoring-secrets
                  key: GF_SECURITY_ADMIN_USER
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: monitoring-secrets
                  key: GF_SECURITY_ADMIN_PASSWORD
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3000
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring

---
# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
data:
  grafana.ini: |
    # Constitutional Compliance Grafana Configuration
    # Constitutional Hash: cdd01ef066bc6cf2

    [server]
    http_port = 3000
    root_url = %(protocol)s://%(domain)s:%(http_port)s/

    [security]
    admin_user = ${GF_SECURITY_ADMIN_USER}
    admin_password = ${GF_SECURITY_ADMIN_PASSWORD}
    cookie_secure = true
    cookie_samesite = strict

    [auth]
    disable_login_form = false
    disable_signout_menu = false

    [auth.anonymous]
    enabled = false

    [alerting]
    enabled = true

    [unified_alerting]
    enabled = true

    [panels]
    enable_alpha = true

    [feature_toggles]
    enable = constitutionalCompliance

    [log]
    mode = console
    level = info

  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.acgs-monitoring.svc.cluster.local:9090
      isDefault: true
      jsonData:
        httpMethod: GET
        prometheusType: Prometheus
        prometheusVersion: 2.45.0
        customQueryParameters: constitutional_hash=cdd01ef066bc6cf2

---
# Grafana Dashboards ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: acgs-monitoring
  labels:
    constitutional-hash: "cdd01ef066bc6cf2"
    app.kubernetes.io/part-of: acgs
    app.kubernetes.io/component: monitoring
data:
  acgs-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "ACGS Constitutional Compliance Overview",
        "tags": ["acgs", "constitutional", "compliance"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Constitutional Compliance Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{constitutional_hash=\"cdd01ef066bc6cf2\"}",
                "legendFormat": "{{instance}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=~\"acgs.*\"}[5m])",
                "legendFormat": "{{job}}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Response Time P95",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, http_request_duration_seconds_bucket{job=~\"acgs.*\"})",
                "legendFormat": "{{job}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"5..\",job=~\"acgs.*\"}[5m]) / rate(http_requests_total{job=~\"acgs.*\"}[5m])",
                "legendFormat": "{{job}}"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
