version: '3.8'

services:
  gemini-cli:
    build:
      context: ./services/cli/gemini_cli
      dockerfile: Dockerfile
    container_name: acgs-gemini-cli
    restart: unless-stopped
    depends_on:
      - acgs-coordinator
      - auth-service
      - sandbox-service
      - formal-verification
      - audit-service
      - hitl-service
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - gemini_cli_data:/home/gemini/.gemini_cli
      - gemini_cli_logs:/home/gemini/.gemini_cli/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker MCP server
      - ./services/shared:/app/shared:ro
    networks:
      - acgs-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gemini-cli.rule=Host(`gemini-cli.acgs.local`)"
      - "traefik.http.services.gemini-cli.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "gemini-cli", "monitor", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MCP Server for advanced functionality
  gemini-mcp-advanced:
    build:
      context: ./services/cli/gemini_cli
      dockerfile: Dockerfile.mcp
    container_name: acgs-gemini-mcp-advanced
    restart: unless-stopped
    environment:
      - CONSTITUTIONAL_HASH=cdd01ef066bc6cf2
      - PYTHONPATH=/app
    volumes:
      - gemini_cli_data:/home/gemini/.gemini_cli
      - ./services/shared:/app/shared:ro
    networks:
      - acgs-network
    command: ["python", "-m", "gemini_cli.mcp_servers.acgs_constitutional"]

  # Gemini CLI Web Interface (optional)
  gemini-cli-web:
    build:
      context: ./services/cli/gemini_cli
      dockerfile: Dockerfile.web
    container_name: acgs-gemini-cli-web
    restart: unless-stopped
    depends_on:
      - gemini-cli
    environment:
      - GEMINI_CLI_BACKEND=http://gemini-cli:8080
    ports:
      - "8087:8080"
    volumes:
      - gemini_cli_web_data:/app/data
    networks:
      - acgs-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gemini-cli-web.rule=Host(`gemini-web.acgs.local`)"
      - "traefik.http.services.gemini-cli-web.loadbalancer.server.port=8080"

volumes:
  gemini_cli_data:
    driver: local
  gemini_cli_logs:
    driver: local
  gemini_cli_web_data:
    driver: local

networks:
  acgs-network:
    external: true