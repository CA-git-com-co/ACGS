# ACGS-PGP Blue-Green Deployment Configuration
# Constitutional Hash: cdd01ef066bc6cf2

apiVersion: v1
kind: ConfigMap
metadata:
  name: acgs-blue-green-config
  namespace: acgs-production
data:
  deployment_strategy: 'blue-green'
  constitutional_hash: 'cdd01ef066bc6cf2'
  traffic_split_percentage: '10' # Start with 10% traffic to green
  health_check_timeout: '30s'
  rollback_timeout: '300s' # 5 minutes

---
# Blue Environment (Current Production)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: acgs-blue
  namespace: acgs-production
  labels:
    app: acgs-pgp
    environment: blue
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: acgs-pgp
      environment: blue
  template:
    metadata:
      labels:
        app: acgs-pgp
        environment: blue
        constitutional-hash: cdd01ef066bc6cf2
    spec:
      containers:
        # Auth Service
        - name: auth-service
          image: acgs-auth-service:production
          ports:
            - containerPort: 8000
          env:
            - name: CONSTITUTIONAL_HASH
              value: 'cdd01ef066bc6cf2'
            - name: ENVIRONMENT
              value: 'blue'
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '512Mi'
              cpu: '300m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5

        # Constitutional AI Service
        - name: ac-service
          image: acgs-ac-service:production
          ports:
            - containerPort: 8001
          env:
            - name: CONSTITUTIONAL_HASH
              value: 'cdd01ef066bc6cf2'
            - name: ENVIRONMENT
              value: 'blue'
          resources:
            requests:
              memory: '512Mi'
              cpu: '200m'
            limits:
              memory: '1Gi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 5
            periodSeconds: 5

        # Integrity Service
        - name: integrity-service
          image: acgs-integrity-service:production
          ports:
            - containerPort: 8002
          env:
            - name: CONSTITUTIONAL_HASH
              value: 'cdd01ef066bc6cf2'
            - name: ENVIRONMENT
              value: 'blue'
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '512Mi'
              cpu: '300m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8002
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8002
            initialDelaySeconds: 5
            periodSeconds: 5

      # Additional services (FV, GS, PGC, EC) would follow similar pattern
      # Simplified for brevity - each service gets similar configuration

---
# Green Environment (New Deployment)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: acgs-green
  namespace: acgs-production
  labels:
    app: acgs-pgp
    environment: green
    constitutional-hash: cdd01ef066bc6cf2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: acgs-pgp
      environment: green
  template:
    metadata:
      labels:
        app: acgs-pgp
        environment: green
        constitutional-hash: cdd01ef066bc6cf2
    spec:
      containers:
        # Same container configuration as blue but with environment: green
        - name: auth-service
          image: acgs-auth-service:latest # New version
          ports:
            - containerPort: 8000
          env:
            - name: CONSTITUTIONAL_HASH
              value: 'cdd01ef066bc6cf2'
            - name: ENVIRONMENT
              value: 'green'
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '512Mi'
              cpu: '300m'
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5

---
# Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: acgs-load-balancer
  namespace: acgs-production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: 'nlb'
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
spec:
  type: LoadBalancer
  selector:
    app: acgs-pgp
  ports:
    - name: auth-service
      port: 8000
      targetPort: 8000
      protocol: TCP
    - name: ac-service
      port: 8001
      targetPort: 8001
      protocol: TCP
    - name: integrity-service
      port: 8002
      targetPort: 8002
      protocol: TCP
    - name: fv-service
      port: 8003
      targetPort: 8003
      protocol: TCP
    - name: gs-service
      port: 8004
      targetPort: 8004
      protocol: TCP
    - name: pgc-service
      port: 8005
      targetPort: 8005
      protocol: TCP
    - name: ec-service
      port: 8006
      targetPort: 8006
      protocol: TCP

---
# Ingress Controller for Traffic Splitting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: acgs-blue-green-ingress
  namespace: acgs-production
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/canary: 'true'
    nginx.ingress.kubernetes.io/canary-weight: '10' # 10% to green initially
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
spec:
  tls:
    - hosts:
        - acgs.ai
        - api.acgs.ai
      secretName: acgs-tls-secret
  rules:
    - host: acgs.ai
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: acgs-load-balancer
                port:
                  number: 8000
    - host: api.acgs.ai
      http:
        paths:
          - path: /auth
            pathType: Prefix
            backend:
              service:
                name: acgs-load-balancer
                port:
                  number: 8000
          - path: /constitutional
            pathType: Prefix
            backend:
              service:
                name: acgs-load-balancer
                port:
                  number: 8001
          - path: /integrity
            pathType: Prefix
            backend:
              service:
                name: acgs-load-balancer
                port:
                  number: 8002

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: acgs-blue-hpa
  namespace: acgs-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: acgs-blue
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: acgs-green-hpa
  namespace: acgs-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: acgs-green
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: acgs-network-policy
  namespace: acgs-production
spec:
  podSelector:
    matchLabels:
      app: acgs-pgp
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: acgs-production
      ports:
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 8001
        - protocol: TCP
          port: 8002
        - protocol: TCP
          port: 8003
        - protocol: TCP
          port: 8004
        - protocol: TCP
          port: 8005
        - protocol: TCP
          port: 8006
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443 # HTTPS
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 6379 # Redis
