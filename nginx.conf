# /nginx.conf (for Docker Compose API Gateway)
# This Nginx configuration acts as a reverse proxy for backend services.
# It's used by the 'nginx' service in the main docker-compose.yml.

user nginx;
worker_processes auto; # Use '1' for basic setups or 'auto' for multi-core
pid /run/nginx.pid;
# include /etc/nginx/modules-enabled/*.conf; # Alpine Nginx might not have this structure

events {
    worker_connections 1024; # Default is 768, can be increased
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss image/svg+xml;

    # Upstream blocks for backend services (using service names from docker-compose)
    upstream auth_service_upstream {
        server auth_service:8000;
    }
    upstream ac_service_upstream {
        server ac_service:8001;
    }
    upstream integrity_service_upstream {
        server integrity_service:8002;
    }
    upstream fv_service_upstream {
        server fv_service:8003;
    }
    upstream gs_service_upstream {
        server gs_service:8004;
    }
    upstream pgc_service_upstream {
        server pgc_service:8005;
    }
    # For frontend dev server (if proxying through this Nginx)
    # upstream frontend_dev_upstream {
    #     server frontend:3000; 
    # }

    server {
        listen 80; # Nginx container listens on port 80
        server_name localhost; # Or your domain

        # API Gateway routes
        # Assumes frontend calls are prefixed with /api, e.g., /api/auth/token
        # REACT_APP_API_BASE_URL in frontend should be http://<nginx_host_port>/api
        # If nginx is on host port 80, then http://localhost/api

        location /api/auth/ {
            proxy_pass http://auth_service_upstream/; # Note the trailing slash
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_redirect off; # Optional: can help with some redirect issues
        }

        location /api/ac/ {
            proxy_pass http://ac_service_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/integrity/ {
            proxy_pass http://integrity_service_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/fv/ {
            proxy_pass http://fv_service_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/gs/ {
            proxy_pass http://gs_service_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/pgc/ {
            proxy_pass http://pgc_service_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Optional: If you want Nginx to also proxy to the frontend dev server (on port 3000)
        # This is useful if you want a single entry point (e.g., http://localhost) for everything during dev.
        # The frontend's package.json also has a "proxy" setting which might be simpler for dev.
        # If using this, ensure REACT_APP_API_BASE_URL in frontend/.env is set to just "/api"
        # (so it makes relative calls to the same host Nginx is on).
        # location / {
        #     proxy_pass http://frontend_dev_upstream; # To frontend dev server
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection 'upgrade';
        #     proxy_set_header Host $host;
        #     proxy_cache_bypass $http_upgrade;
        # }
    }
}
