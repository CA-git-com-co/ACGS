# ACGS/nginx.conf
# This Nginx configuration acts as a reverse proxy for backend services.
# It's used by the 'nginx_gateway' service in the docker-compose.yml.

user nginx;
worker_processes auto; # Use '1' for basic setups or 'auto' for multi-core
pid /run/nginx.pid;
# include /etc/nginx/modules-enabled/*.conf; # Alpine Nginx might not have this structure

events {
    worker_connections 1024; # Default is 768, can be increased
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 4096; # Increased from 2048
    server_names_hash_bucket_size 128; # Added if many server_names or long ones

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss image/svg+xml;

    # Upstream blocks for backend services (using service names from docker-compose)
    # Ports correspond to what each service's Uvicorn runs on INSIDE its container.
    upstream auth_service_upstream {
        server auth_service:8000; # auth_service FastAPI runs on port 8000
    }
    upstream ac_service_upstream {
        server ac_service:8001;   # ac_service FastAPI runs on port 8001
    }
    upstream integrity_service_upstream {
        server integrity_service:8002; # integrity_service FastAPI runs on port 8002
    }
    upstream fv_service_upstream {
        server fv_service:8003;   # fv_service FastAPI runs on port 8003
    }
    upstream gs_service_upstream {
        server gs_service:8004;   # gs_service FastAPI runs on port 8004
    }
    upstream pgc_service_upstream {
        server pgc_service:8005;  # pgc_service FastAPI runs on port 8005
    }

    server {
        listen 80; # Nginx container listens on port 80 (mapped to host port 80 in docker-compose)
        server_name localhost; # Or your domain if applicable

        # API Gateway routes
        # Frontend calls are prefixed with /api, e.g., /api/auth/token
        # REACT_APP_API_BASE_URL in frontend/.env should be "/api"

        location /api/auth/ {
            # Remove /api/auth prefix and proxy to auth service with /auth prefix
            rewrite ^/api/auth/(.*)$ /auth/$1 break;
            proxy_pass http://auth_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off; # Useful for SSE or WebSockets if any
        }

        # Also handle requests to auth service root
        location /api/auth {
            # Redirect to add trailing slash
            return 301 /api/auth/;
        }

        location /api/ac/ {
            # Path for ac_service. Example: /api/ac/principles/
            # Assuming ac_service main router is at /api/v1/principles
            proxy_pass http://ac_service_upstream/api/v1/principles/; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }
        
        location /api/integrity/ {
            # Integrity service has /api/v1/policies and /api/v1/audit
            # Request to Nginx: /api/integrity/policies/some_id -> proxy_pass to http://integrity_service_upstream/api/v1/policies/some_id
            rewrite ^/api/integrity/(.*)$ /api/v1/$1 break; # This captures policies/ or audit/
            proxy_pass http://integrity_service_upstream; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        location /api/fv/ {
            # Path for fv_service. Example: /api/fv/verify/
            # Assuming fv_service main router is at /api/v1/verify
            proxy_pass http://fv_service_upstream/api/v1/verify/; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        location /api/gs/ {
             # GS service has /api/v1/synthesize and /api/v1/policy-management
             # Request to Nginx: /api/gs/synthesize -> proxy_pass to http://gs_service_upstream/api/v1/synthesize
            rewrite ^/api/gs/(.*)$ /api/v1/$1 break;
            proxy_pass http://gs_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        location /api/pgc/ {
            # Path for pgc_service. Example: /api/pgc/enforcement/
            # Assuming pgc_service main router is at /api/v1/enforcement
            proxy_pass http://pgc_service_upstream/api/v1/enforcement/; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }

        # Optional: If Nginx is also serving the frontend static build in production
        # location / {
        #     root /usr/share/nginx/html; # Assuming frontend build is copied here in prod Nginx image
        #     try_files $uri $uri/ /index.html;
        # }

        # Health check for Nginx itself
        location /nginx_health {
            access_log off;
            return 200 "Nginx is healthy.\n";
            add_header Content-Type text/plain;
        }
    }
}
