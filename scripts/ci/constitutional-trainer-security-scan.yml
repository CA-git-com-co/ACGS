# Constitutional Trainer Security Scanning CI Job
#
# This GitHub Actions job configuration performs comprehensive security scanning
# for the Constitutional Trainer Service including container vulnerabilities,
# Kubernetes manifest auditing, and static application security testing.

name: Constitutional Trainer Security Scan

on:
  push:
    branches: [main, master, develop]
    paths:
      - 'services/core/constitutional-trainer/**'
      - 'infrastructure/kubernetes/acgs-lite/**'
      - 'scripts/security/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'services/core/constitutional-trainer/**'
      - 'infrastructure/kubernetes/acgs-lite/**'
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - container-only
          - k8s-only
          - sast-only
      fail_on_high:
        description: 'Fail on high severity vulnerabilities'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: constitutional-trainer
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read

    strategy:
      matrix:
        scan-type:
          - container-vulnerabilities
          - k8s-manifest-audit
          - static-analysis

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Container Image
        if: matrix.scan-type == 'container-vulnerabilities'
        uses: docker/build-push-action@v5
        with:
          context: ./services/core/constitutional-trainer
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Security Tools
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Install kube-score
          wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
          tar xzf kube-score_1.16.1_linux_amd64.tar.gz
          sudo mv kube-score /usr/local/bin/

          # Install Python security tools
          pip install bandit[toml] safety

      - name: Run Container Vulnerability Scan
        if: matrix.scan-type == 'container-vulnerabilities'
        run: |
          echo "🔍 Running container vulnerability scan..."

          # Create results directory
          mkdir -p security-scan-results

          # Get the first tag from metadata
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

          # Run Trivy scan
          trivy image \
            --format sarif \
            --output security-scan-results/trivy-results.sarif \
            --severity HIGH,CRITICAL \
            "$IMAGE_TAG"

          # Run Trivy scan for JSON output
          trivy image \
            --format json \
            --output security-scan-results/trivy-results.json \
            "$IMAGE_TAG"

          # Generate summary
          trivy image \
            --format table \
            --output security-scan-results/trivy-summary.txt \
            "$IMAGE_TAG"

          # Check for high/critical vulnerabilities
          HIGH_CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' security-scan-results/trivy-results.json)

          echo "Found $HIGH_CRITICAL_COUNT high/critical vulnerabilities"

          if [[ "$HIGH_CRITICAL_COUNT" -gt 0 && "${{ inputs.fail_on_high || 'true' }}" == "true" ]]; then
            echo "::error::Found $HIGH_CRITICAL_COUNT high/critical vulnerabilities"
            exit 1
          fi

      - name: Run Kubernetes Manifest Audit
        if: matrix.scan-type == 'k8s-manifest-audit'
        run: |
          echo "🔍 Running Kubernetes manifest security audit..."

          mkdir -p security-scan-results

          # Run kube-score on all manifests
          find infrastructure/kubernetes/acgs-lite -name "*.yaml" -exec kube-score score {} \; > security-scan-results/kube-score-results.txt || true

          # Check for security issues
          if grep -q "CRITICAL\|HIGH" security-scan-results/kube-score-results.txt; then
            echo "::warning::Found security issues in Kubernetes manifests"
          fi

          # Validate specific security requirements
          echo "Validating security requirements..."

          # Check for runAsNonRoot
          if ! grep -r "runAsNonRoot: true" infrastructure/kubernetes/acgs-lite/; then
            echo "::warning::runAsNonRoot: true not found in manifests"
          fi

          # Check for resource limits
          if ! grep -r "limits:" infrastructure/kubernetes/acgs-lite/; then
            echo "::warning::Resource limits not found in manifests"
          fi

          # Check for NetworkPolicy
          if ! find infrastructure/kubernetes/acgs-lite -name "*network*policy*" | grep -q .; then
            echo "::warning::No NetworkPolicy manifests found"
          fi

      - name: Run Static Application Security Testing
        if: matrix.scan-type == 'static-analysis'
        run: |
          echo "🔍 Running static application security testing..."

          mkdir -p security-scan-results

          # Run Bandit SAST
          bandit -r services/core/constitutional-trainer \
            -f json \
            -o security-scan-results/bandit-results.json \
            --skip B101,B601 || true

          # Generate human-readable report
          bandit -r services/core/constitutional-trainer \
            -f txt \
            -o security-scan-results/bandit-report.txt \
            --skip B101,B601 || true

          # Run Safety check for known vulnerabilities in dependencies
          if [[ -f services/core/constitutional-trainer/requirements.txt ]]; then
            safety check \
              --json \
              --output security-scan-results/safety-results.json \
              -r services/core/constitutional-trainer/requirements.txt || true
          fi

          # Check for high severity issues
          HIGH_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' security-scan-results/bandit-results.json 2>/dev/null || echo "0")

          if [[ "$HIGH_ISSUES" -gt 0 ]]; then
            echo "::warning::Found $HIGH_ISSUES high severity security issues in code"
          fi

      - name: Upload Security Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ matrix.scan-type }}
          path: security-scan-results/
          retention-days: 30

      - name: Upload SARIF Results to GitHub Security
        if: matrix.scan-type == 'container-vulnerabilities' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security-scan-results/trivy-results.sarif
          category: container-vulnerabilities

      - name: Comment on PR with Security Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let comment = `## Security Scan Results - ${{ matrix.scan-type }}\n\n`;

            // Read and format results based on scan type
            try {
              if ('${{ matrix.scan-type }}' === 'container-vulnerabilities') {
                const trivyResults = JSON.parse(fs.readFileSync('security-scan-results/trivy-results.json', 'utf8'));
                const vulns = trivyResults.Results?.flatMap(r => r.Vulnerabilities || []) || [];
                const critical = vulns.filter(v => v.Severity === 'CRITICAL').length;
                const high = vulns.filter(v => v.Severity === 'HIGH').length;
                
                comment += `### Container Vulnerabilities\n`;
                comment += `- Critical: ${critical}\n`;
                comment += `- High: ${high}\n`;
                comment += `- Total: ${vulns.length}\n\n`;
              }
              
              if ('${{ matrix.scan-type }}' === 'static-analysis') {
                const banditResults = JSON.parse(fs.readFileSync('security-scan-results/bandit-results.json', 'utf8'));
                const issues = banditResults.results || [];
                const high = issues.filter(i => i.issue_severity === 'HIGH').length;
                const medium = issues.filter(i => i.issue_severity === 'MEDIUM').length;
                
                comment += `### Static Analysis Issues\n`;
                comment += `- High: ${high}\n`;
                comment += `- Medium: ${medium}\n`;
                comment += `- Total: ${issues.length}\n\n`;
              }
              
              if ('${{ matrix.scan-type }}' === 'k8s-manifest-audit') {
                comment += `### Kubernetes Manifest Audit\n`;
                comment += `See uploaded artifacts for detailed results.\n\n`;
              }
              
            } catch (error) {
              comment += `Error reading results: ${error.message}\n\n`;
            }

            comment += `📊 Detailed results available in the [workflow artifacts](${context.payload.pull_request.html_url}/checks).`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Summary
        run: |
          echo "# Constitutional Trainer Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch/PR:** ${{ github.ref_name }}" >> security-summary.md
          echo "" >> security-summary.md

          # Process container vulnerability results
          if [[ -f security-scan-results-container-vulnerabilities/trivy-results.json ]]; then
            echo "## Container Vulnerabilities" >> security-summary.md
            echo "" >> security-summary.md
            
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-scan-results-container-vulnerabilities/trivy-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-scan-results-container-vulnerabilities/trivy-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' security-scan-results-container-vulnerabilities/trivy-results.json 2>/dev/null || echo "0")
            
            echo "| Severity | Count |" >> security-summary.md
            echo "|----------|-------|" >> security-summary.md
            echo "| Critical | $CRITICAL |" >> security-summary.md
            echo "| High | $HIGH |" >> security-summary.md
            echo "| Medium | $MEDIUM |" >> security-summary.md
            echo "" >> security-summary.md
          fi

          # Process static analysis results
          if [[ -f security-scan-results-static-docs/reports/bandit-results.json ]]; then
            echo "## Static Analysis Issues" >> security-summary.md
            echo "" >> security-summary.md
            
            HIGH_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' security-scan-results-static-docs/reports/bandit-results.json 2>/dev/null || echo "0")
            MEDIUM_ISSUES=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' security-scan-results-static-docs/reports/bandit-results.json 2>/dev/null || echo "0")
            LOW_ISSUES=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' security-scan-results-static-docs/reports/bandit-results.json 2>/dev/null || echo "0")
            
            echo "| Severity | Count |" >> security-summary.md
            echo "|----------|-------|" >> security-summary.md
            echo "| High | $HIGH_ISSUES |" >> security-summary.md
            echo "| Medium | $MEDIUM_ISSUES |" >> security-summary.md
            echo "| Low | $LOW_ISSUES |" >> security-summary.md
            echo "" >> security-summary.md
          fi

          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review and remediate all high and critical severity vulnerabilities" >> security-summary.md
          echo "2. Implement security best practices in Kubernetes manifests" >> security-summary.md
          echo "3. Address static analysis findings in source code" >> security-summary.md
          echo "4. Regularly update dependencies to latest secure versions" >> security-summary.md
          echo "" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 90
