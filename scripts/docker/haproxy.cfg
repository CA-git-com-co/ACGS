# ACGS-1 HAProxy Load Balancer Configuration
# Optimized for constitutional governance service distribution

global
    daemon
    log stdout local0 info
    maxconn 4096
    user haproxy
    group haproxy
    
    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    option forwardfor
    option http-server-close
    
    # Timeouts optimized for ACGS services
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10000ms
    timeout http-keep-alive 2000ms
    timeout check 3000ms
    
    # Health check configuration
    default-server check inter 10s fall 3 rise 2
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:acgs_haproxy_admin_2024

# Main frontend for ACGS services
frontend acgs_frontend
    bind *:80
    
    # Request routing based on path
    acl is_auth_service path_beg /auth
    acl is_ac_service path_beg /constitutional
    acl is_integrity_service path_beg /integrity
    acl is_fv_service path_beg /verification
    acl is_gs_service path_beg /governance
    acl is_pgc_service path_beg /compliance
    acl is_ec_service path_beg /evolution
    
    # Health check routing
    acl is_health_check path_end /health
    
    # Route to appropriate backend
    use_backend auth_backend if is_auth_service
    use_backend ac_backend if is_ac_service
    use_backend integrity_backend if is_integrity_service
    use_backend fv_backend if is_fv_service
    use_backend gs_backend if is_gs_service
    use_backend pgc_backend if is_pgc_service
    use_backend ec_backend if is_ec_service
    
    # Default to auth service for root requests
    default_backend auth_backend

# Backend configurations for each ACGS service
backend auth_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server auth1 auth_service:8000 check

backend ac_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server ac1 ac_service:8001 check

backend integrity_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server integrity1 integrity_service:8002 check

backend fv_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server fv1 fv_service:8003 check

backend gs_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server gs1 gs_service:8004 check

backend pgc_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server pgc1 pgc_service:8005 check

backend ec_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    server ec1 ec_service:8006 check
