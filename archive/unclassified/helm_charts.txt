# ==============================================================================
# Helm Chart for ACGS-PGP Constitutional AI Governance System
# Chart.yaml
# ==============================================================================

apiVersion: v2
name: acgs-pgp
description: |
  ACGS-PGP Constitutional AI Governance System - Production deployment for
  Policy Generation Platform with constitutional compliance validation,
  formal verification, and distributed governance synthesis capabilities.

type: application
version: 2.0.0
appVersion: "2.0.0"

keywords:
  - ai
  - governance
  - constitutional-ai
  - policy-generation
  - formal-verification
  - kubernetes

home: https://github.com/CA-git-com-co/ACGS
sources:
  - https://github.com/CA-git-com-co/ACGS

maintainers:
  - name: ACGS-PGP Team
    email: info@soln.ai
    url: https://github.com/CA-git-com-co/ACGS

annotations:
  category: AI/ML
  licenses: MIT
  acgs.io/architecture: "3-core-service-pattern"
  acgs.io/governance-type: "constitutional-ai"
  acgs.io/safety-pattern: "dgm-sandbox"

dependencies:
  - name: postgresql
    version: "15.x.x"
    repository: "https://charts.bitnami.com/bitnami"
    condition: postgresql.enabled
  - name: redis
    version: "18.x.x"
    repository: "https://charts.bitnami.com/bitnami"
    condition: redis.enabled
  - name: prometheus
    version: "25.x.x"
    repository: "https://prometheus-community.github.io/helm-charts"
    condition: monitoring.prometheus.enabled
  - name: grafana
    version: "7.x.x"
    repository: "https://grafana.github.io/helm-charts"
    condition: monitoring.grafana.enabled

---
# ==============================================================================
# values.yaml - Default configuration values
# ==============================================================================

# Global configuration
global:
  registry: ghcr.io/acgs-pgp
  tag: latest
  pullPolicy: IfNotPresent
  storageClass: fast-ssd

# Environment configuration
environment: staging
domain: acgs-pgp.ai

# Image configuration
image:
  registry: ghcr.io/acgs-pgp
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []

# Service account configuration
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Security context (Constitutional AI compliance)
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

# Default resource configuration (aligned with ACGS-1 Lite preferences)
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi

# Autoscaling (Constitutional AI governance scaling)
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 8
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod disruption budget (High availability for governance)
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Node selection
nodeSelector:
  kubernetes.io/arch: amd64

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - acgs-pgp
        topologyKey: kubernetes.io/hostname

# Constitutional AI Constraints and DGM Safety Patterns
constitutionalAI:
  enabled: true
  dgmSandbox:
    enabled: true
    isolationLevel: strict
    humanReviewRequired: true
    emergencyShutdown:
      enabled: true
      rtoMinutes: 30
      autoTriggerThreshold: 0.95
  circuitBreaker:
    enabled: true
    failureThreshold: 5
    recoveryTimeout: 60s
    cascadePreventionEnabled: true

# ==============================================================================
# Authentication Service (Platform Service - Port 8000)
# ==============================================================================
authService:
  enabled: true
  replicaCount: 2

  image:
    repository: auth-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: JWT_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: acgs-pgp-secrets
          key: jwt_secret_key
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: acgs-pgp-secrets
          key: database_url

  envFrom:
    - configMapRef:
        name: acgs-pgp-config

  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Constitutional AI Service (Core Service - Port 8001)
# ==============================================================================
acService:
  enabled: true
  replicaCount: 2

  image:
    repository: ac-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8001
    targetPort: 8001

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Constitutional framework configuration
  constitution:
    version: "3.0.0"
    mountPath: /app/constitution
    configMapName: constitution-config

  # Policy enforcement settings (Constitutional AI compliance)
  enforcement:
    strictMode: true
    violationThreshold: 0.1
    alertOnViolation: true
    humanReviewRequired: true

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: CONSTITUTIONAL_AI_ENABLED
      value: "true"
    - name: DGM_SANDBOX_ENABLED
      value: "true"

  livenessProbe:
    httpGet:
      path: /health
      port: 8001
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8001
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Integrity Service (Platform Service - Port 8002)
# ==============================================================================
integrityService:
  enabled: true
  replicaCount: 2

  image:
    repository: integrity-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8002
    targetPort: 8002

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Cryptographic verification configuration
  cryptographic:
    enabled: true
    hashAlgorithm: sha256
    signatureValidation: true

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: INTEGRITY_CHECK_ENABLED
      value: "true"
    - name: CRYPTOGRAPHIC_VALIDATION
      value: "true"

  livenessProbe:
    httpGet:
      path: /health
      port: 8002
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8002
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Formal Verification Service (Core Service - Port 8003)
# ==============================================================================
fvService:
  enabled: true
  replicaCount: 2

  image:
    repository: fv-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8003
    targetPort: 8003

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Formal verification configuration
  verification:
    enabled: true
    proofValidation: true
    theoremProving: true
    modelChecking: true

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: FORMAL_VERIFICATION_ENABLED
      value: "true"
    - name: PROOF_VALIDATION_STRICT
      value: "true"

  livenessProbe:
    httpGet:
      path: /health
      port: 8003
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8003
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Governance Synthesis Service (Core Service - Port 8004)
# ==============================================================================
gsService:
  enabled: true
  replicaCount: 2

  image:
    repository: gs-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8004
    targetPort: 8004

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Governance synthesis configuration
  synthesis:
    enabled: true
    multiModelConsensus: true
    constitutionalCompliance: true
    riskStrategy: four-tier

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: GOVERNANCE_SYNTHESIS_ENABLED
      value: "true"
    - name: MULTI_MODEL_CONSENSUS
      value: "true"

  livenessProbe:
    httpGet:
      path: /health
      port: 8004
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8004
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Policy Governance Service (Core Service - Port 8005)
# ==============================================================================
pgcService:
  enabled: true
  replicaCount: 2

  image:
    repository: pgc-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8005
    targetPort: 8005

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Policy governance configuration
  governance:
    enabled: true
    policyEnforcement: strict
    complianceValidation: true
    twoSpeedGovernance: true

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: POLICY_GOVERNANCE_ENABLED
      value: "true"
    - name: TWO_SPEED_GOVERNANCE
      value: "true"

  livenessProbe:
    httpGet:
      path: /health
      port: 8005
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8005
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Evolutionary Computation Service (Core Service - Port 8006)
# ==============================================================================
ecService:
  enabled: true
  replicaCount: 2

  image:
    repository: ec-service
    tag: ""
    pullPolicy: ""

  service:
    type: ClusterIP
    port: 8006
    targetPort: 8006

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

  # Evolutionary computation configuration
  evolution:
    enabled: true
    geneticAlgorithms: true
    constitutionalEvolution: true
    performanceOptimization: true

  env:
    - name: LOG_LEVEL
      value: INFO
    - name: EVOLUTIONARY_COMPUTATION_ENABLED
      value: "true"
    - name: CONSTITUTIONAL_EVOLUTION
      value: "true"

  livenessProbe:
    httpGet:
      path: /health
      port: 8006
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8006
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# ==============================================================================
# Configuration
# ==============================================================================
config:
  # Application configuration
  app:
    debug: false
    logLevel: INFO
    corsEnabled: true
    corsOrigins: "*"
    constitutionalAIEnabled: true
    dgmSandboxEnabled: true

  # Database configuration (when using external DB)
  database:
    host: ""
    port: 5432
    name: acgs_pgp_db
    user: acgs_pgp_user
    sslMode: require
    poolSize: 20
    maxOverflow: 0

  # Redis configuration (when using external Redis)
  redis:
    host: ""
    port: 6379
    db: 0
    maxConnections: 100

  # Constitutional AI settings
  constitutionalAI:
    strictMode: true
    humanReviewThreshold: 0.8
    emergencyShutdownEnabled: true
    dgmSandboxIsolation: strict

  # Alert thresholds (Constitutional compliance focused)
  alerts:
    violationThreshold: 0.1
    complianceThreshold: 0.9
    responseTimeThreshold: 2000
    constitutionalViolationAlert: true

# Secrets configuration
secrets:
  create: true
  annotations: {}

  # External secrets (when using external secret management)
  external:
    enabled: false
    secretStore: aws-secretsmanager

  # Secret values (set via values files or CLI)
  values:
    postgresql:
      password: ""
    redis:
      password: ""
    jwtSecretKey: ""
    constitutionalAIKey: ""
    dgmSandboxKey: ""
    emergencyShutdownKey: ""

# ==============================================================================
# Ingress Configuration
# ==============================================================================
ingress:
  enabled: true
  className: alb
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: ""
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '5'

  hosts:
    - host: api.acgs-pgp.ai
      paths:
        - path: /auth
          pathType: Prefix
          service:
            name: auth-service
            port: 8000
        - path: /constitutional-ai
          pathType: Prefix
          service:
            name: ac-service
            port: 8001
        - path: /integrity
          pathType: Prefix
          service:
            name: integrity-service
            port: 8002
        - path: /formal-verification
          pathType: Prefix
          service:
            name: fv-service
            port: 8003
        - path: /governance-synthesis
          pathType: Prefix
          service:
            name: gs-service
            port: 8004
        - path: /policy-governance
          pathType: Prefix
          service:
            name: pgc-service
            port: 8005
        - path: /evolutionary-computation
          pathType: Prefix
          service:
            name: ec-service
            port: 8006

  tls:
    - secretName: acgs-pgp-tls
      hosts:
        - api.acgs-pgp.ai

# ==============================================================================
# Monitoring and Observability (Constitutional AI Focused)
# ==============================================================================
monitoring:
  enabled: true

  # Prometheus monitoring with constitutional compliance metrics
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
    interval: 30s
    constitutionalMetrics:
      enabled: true
      violationTracking: true
      complianceScoring: true
      dgmSandboxMonitoring: true

    # Service monitor
    serviceMonitor:
      enabled: true
      labels:
        acgs.io/constitutional-monitoring: "true"
      annotations:
        acgs.io/compliance-level: "strict"

  # Grafana dashboards with constitutional AI focus
  grafana:
    enabled: true
    dashboards:
      enabled: true
      constitutionalCompliance: true
      dgmSandboxStatus: true
      emergencyShutdownMetrics: true

  # Jaeger tracing for governance workflows
  tracing:
    enabled: true
    jaeger:
      endpoint: ""
      constitutionalTracing: true

  # Log aggregation with constitutional focus
  logging:
    enabled: true
    level: INFO
    constitutionalLogs: true
    dgmSandboxLogs: true
    emergencyEventLogs: true
    fluentd:
      enabled: false

# ==============================================================================
# Backup and Recovery
# ==============================================================================
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: 30
  storage:
    class: ""
    size: 100Gi

# ==============================================================================
# Network Policies (Constitutional AI Security)
# ==============================================================================
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: acgs-pgp
              acgs.io/constitutional-compliant: "true"
      ports:
        - protocol: TCP
          port: 8000  # Auth Service
        - protocol: TCP
          port: 8001  # Constitutional AI Service
        - protocol: TCP
          port: 8002  # Integrity Service
        - protocol: TCP
          port: 8003  # Formal Verification Service
        - protocol: TCP
          port: 8004  # Governance Synthesis Service
        - protocol: TCP
          port: 8005  # Policy Governance Service
        - protocol: TCP
          port: 8006  # Evolutionary Computation Service

  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 9090  # Prometheus
        - protocol: TCP
          port: 3000  # Grafana

# ==============================================================================
# Dependency Charts Configuration
# ==============================================================================

# PostgreSQL (when enabled) - ACGS-PGP optimized
postgresql:
  enabled: false  # Use external RDS by default
  auth:
    postgresPassword: ""
    username: acgs_pgp_user
    password: ""
    database: acgs_pgp_db
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 50Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi

# Redis (when enabled) - ACGS-PGP optimized
redis:
  enabled: false  # Use external ElastiCache by default
  auth:
    enabled: true
    password: ""
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi

# Prometheus (when enabled) - Constitutional AI monitoring
prometheus:
  enabled: false
  server:
    retention: 30d
    persistentVolume:
      enabled: true
      size: 100Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
    # Constitutional AI specific configuration
    configMapOverrides:
      constitutional_ai_rules: |
        groups:
        - name: constitutional_ai
          rules:
          - alert: ConstitutionalViolation
            expr: constitutional_violation_rate > 0.1
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Constitutional AI violation detected"

# Grafana (when enabled) - Constitutional AI dashboards
grafana:
  enabled: false
  persistence:
    enabled: true
    size: 20Gi
  adminPassword: ""  # Set via secrets
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'constitutional-ai'
        orgId: 1
        folder: 'Constitutional AI'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/constitutional-ai

---
# ==============================================================================
# values-staging.yaml - Staging environment overrides
# ==============================================================================

environment: staging
domain: staging.acgs-pgp.ai

# Constitutional AI staging configuration
constitutionalAI:
  enabled: true
  dgmSandbox:
    enabled: true
    isolationLevel: moderate
    humanReviewRequired: false  # Relaxed for staging
    emergencyShutdown:
      enabled: true
      rtoMinutes: 60  # Longer RTO for staging

# Reduced resources for staging (all services)
authService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

acService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

integrityService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

fvService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

gsService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

pgcService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

ecService:
  replicaCount: 1
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# Use internal PostgreSQL for staging
postgresql:
  enabled: true
  auth:
    postgresPassword: staging_password
    password: staging_password

# Use internal Redis for staging
redis:
  enabled: true
  auth:
    password: staging_redis_password

# Monitoring with constitutional focus
monitoring:
  prometheus:
    enabled: true
    constitutionalMetrics:
      enabled: true
  grafana:
    enabled: true
    dashboards:
      constitutionalCompliance: true

ingress:
  annotations:
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-west-2:123456789012:certificate/staging-cert-id"
  hosts:
    - host: staging-api.acgs-pgp.ai

config:
  app:
    debug: true
    logLevel: DEBUG
    constitutionalAIEnabled: true
    dgmSandboxEnabled: true
  constitutionalAI:
    strictMode: false  # Relaxed for staging
    humanReviewThreshold: 0.9
    emergencyShutdownEnabled: true
    dgmSandboxIsolation: moderate

---
# ==============================================================================
# values-production.yaml - Production environment overrides
# ==============================================================================

environment: production
domain: acgs-pgp.ai

# Constitutional AI production configuration (strict compliance)
constitutionalAI:
  enabled: true
  dgmSandbox:
    enabled: true
    isolationLevel: strict
    humanReviewRequired: true
    emergencyShutdown:
      enabled: true
      rtoMinutes: 30
      autoTriggerThreshold: 0.95
  circuitBreaker:
    enabled: true
    failureThreshold: 3
    recoveryTimeout: 30s

# High availability configuration (all services)
authService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

acService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

integrityService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

fvService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

gsService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

pgcService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

ecService:
  replicaCount: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

# Use external managed services
postgresql:
  enabled: false
redis:
  enabled: false

# External secret management
secrets:
  external:
    enabled: true
    secretStore: aws-secretsmanager

# Production ingress with constitutional AI security
ingress:
  annotations:
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-west-2:123456789012:certificate/production-cert-id"
    alb.ingress.kubernetes.io/wafv2-acl-arn: "arn:aws:wafv2:us-west-2:123456789012:regional/webacl/acgs-pgp-production/12345"
    alb.ingress.kubernetes.io/load-balancer-attributes: deletion_protection.enabled=true
    acgs.io/constitutional-protection: "strict"
  hosts:
    - host: api.acgs-pgp.ai

# Enhanced monitoring for production with constitutional focus
monitoring:
  prometheus:
    enabled: true
    constitutionalMetrics:
      enabled: true
      violationTracking: true
      dgmSandboxMonitoring: true
  grafana:
    enabled: true
    dashboards:
      constitutionalCompliance: true
      emergencyShutdownMetrics: true
  tracing:
    enabled: true
    constitutionalTracing: true

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: 30

# Strict security with constitutional compliance
networkPolicy:
  enabled: true

config:
  app:
    debug: false
    logLevel: WARNING
    constitutionalAIEnabled: true
    dgmSandboxEnabled: true
  constitutionalAI:
    strictMode: true
    humanReviewThreshold: 0.8
    emergencyShutdownEnabled: true
    dgmSandboxIsolation: strict
  alerts:
    violationThreshold: 0.05
    complianceThreshold: 0.95
    constitutionalViolationAlert: true

---
# ==============================================================================
# Templates Directory Structure
# ==============================================================================

# templates/_helpers.tpl
{{/*
Expand the name of the chart.
*/}}
{{- define "acgs-pgp.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Create a default fully qualified app name.
*/}}
{{- define "acgs-pgp.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "acgs-pgp.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{/*
Common labels with constitutional AI annotations
*/}}
{{- define "acgs-pgp.labels" -}}
helm.sh/chart: {{ include "acgs-pgp.chart" . }}
{{ include "acgs-pgp.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
environment: {{ .Values.environment }}
acgs.io/constitutional-ai: "enabled"
acgs.io/dgm-sandbox: "enabled"
{{- end }}

{{/*
Selector labels
*/}}
{{- define "acgs-pgp.selectorLabels" -}}
app.kubernetes.io/name: {{ include "acgs-pgp.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
Create the name of the service account to use
*/}}
{{- define "acgs-pgp.serviceAccountName" -}}
{{- if .Values.serviceAccount.create }}
{{- default (include "acgs-pgp.fullname" .) .Values.serviceAccount.name }}
{{- else }}
{{- default "default" .Values.serviceAccount.name }}
{{- end }}
{{- end }}

{{/*
Generate image name
*/}}
{{- define "acgs-pgp.image" -}}
{{- $registry := .Values.global.registry | default .Values.image.registry -}}
{{- $repository := .repository -}}
{{- $tag := .tag | default .Values.global.tag | default .Values.image.tag | default .Chart.AppVersion -}}
{{- printf "%s/%s:%s" $registry $repository $tag -}}
{{- end }}

{{/*
Database URL
*/}}
{{- define "acgs-pgp.databaseUrl" -}}
{{- if .Values.postgresql.enabled -}}
{{- printf "postgresql://%s:%s@%s-postgresql:5432/%s" .Values.postgresql.auth.username .Values.postgresql.auth.password (include "acgs-pgp.fullname" .) .Values.postgresql.auth.database -}}
{{- else -}}
{{- printf "postgresql://%s@%s:%d/%s" .Values.config.database.user .Values.config.database.host .Values.config.database.port .Values.config.database.name -}}
{{- end -}}
{{- end }}

{{/*
Redis URL
*/}}
{{- define "acgs-pgp.redisUrl" -}}
{{- if .Values.redis.enabled -}}
{{- printf "redis://:%s@%s-redis-master:6379/0" .Values.redis.auth.password (include "acgs-pgp.fullname" .) -}}
{{- else -}}
{{- printf "redis://%s:%d/%d" .Values.config.redis.host .Values.config.redis.port .Values.config.redis.db -}}
{{- end -}}
{{- end }}

{{/*
Constitutional AI compliance check
*/}}
{{- define "acgs-pgp.constitutionalCompliance" -}}
{{- if .Values.constitutionalAI.enabled -}}
acgs.io/constitutional-compliance: "strict"
acgs.io/dgm-sandbox-isolation: {{ .Values.constitutionalAI.dgmSandbox.isolationLevel | quote }}
acgs.io/human-review-required: {{ .Values.constitutionalAI.dgmSandbox.humanReviewRequired | quote }}
{{- end -}}
{{- end }}

---
# ==============================================================================
# templates/configmap.yaml
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "acgs-pgp.fullname" . }}-config
  labels:
    {{- include "acgs-pgp.labels" . | nindent 4 }}
  annotations:
    {{- include "acgs-pgp.constitutionalCompliance" . | nindent 4 }}
data:
  app.yaml: |
    app:
      debug: {{ .Values.config.app.debug }}
      log_level: {{ .Values.config.app.logLevel }}
      cors_enabled: {{ .Values.config.app.corsEnabled }}
      cors_origins: {{ .Values.config.app.corsOrigins }}
      constitutional_ai_enabled: {{ .Values.config.app.constitutionalAIEnabled }}
      dgm_sandbox_enabled: {{ .Values.config.app.dgmSandboxEnabled }}

    database:
      pool_size: {{ .Values.config.database.poolSize }}
      max_overflow: {{ .Values.config.database.maxOverflow }}
      ssl_mode: {{ .Values.config.database.sslMode }}

    redis:
      max_connections: {{ .Values.config.redis.maxConnections }}

    constitutional_ai:
      strict_mode: {{ .Values.config.constitutionalAI.strictMode }}
      human_review_threshold: {{ .Values.config.constitutionalAI.humanReviewThreshold }}
      emergency_shutdown_enabled: {{ .Values.config.constitutionalAI.emergencyShutdownEnabled }}
      dgm_sandbox_isolation: {{ .Values.config.constitutionalAI.dgmSandboxIsolation }}

    alerts:
      violation_threshold: {{ .Values.config.alerts.violationThreshold }}
      compliance_threshold: {{ .Values.config.alerts.complianceThreshold }}
      response_time_threshold: {{ .Values.config.alerts.responseTimeThreshold }}
      constitutional_violation_alert: {{ .Values.config.alerts.constitutionalViolationAlert }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "acgs-pgp.fullname" . }}-constitution
  labels:
    {{- include "acgs-pgp.labels" . | nindent 4 }}
  annotations:
    {{- include "acgs-pgp.constitutionalCompliance" . | nindent 4 }}
data:
  constitution.json: |
    {
      "version": "{{ .Values.acService.constitution.version }}",
      "created_at": "{{ now | date "2006-01-02T15:04:05Z" }}",
      "updated_at": "{{ now | date "2006-01-02T15:04:05Z" }}",
      "dgm_sandbox_enabled": {{ .Values.constitutionalAI.dgmSandbox.enabled }},
      "emergency_shutdown_rto_minutes": {{ .Values.constitutionalAI.dgmSandbox.emergencyShutdown.rtoMinutes }},
      "principles": [
        {
          "id": "harmlessness",
          "name": "Harmlessness",
          "description": "AI must not cause harm to individuals or society",
          "weight": 1.0,
          "enforcement_level": "strict",
          "violation_penalty": -1.0,
          "dgm_sandbox_required": true
        },
        {
          "id": "truthfulness",
          "name": "Truthfulness",
          "description": "AI must provide accurate and honest information",
          "weight": 0.9,
          "enforcement_level": "strict",
          "violation_penalty": -0.8,
          "dgm_sandbox_required": true
        },
        {
          "id": "privacy",
          "name": "Privacy",
          "description": "AI must protect user privacy and not expose PII",
          "weight": 1.0,
          "enforcement_level": "strict",
          "violation_penalty": -1.0,
          "dgm_sandbox_required": true
        },
        {
          "id": "fairness",
          "name": "Fairness",
          "description": "AI must treat all users fairly without bias",
          "weight": 0.8,
          "enforcement_level": "strict",
          "violation_penalty": -0.8,
          "dgm_sandbox_required": true
        },
        {
          "id": "transparency",
          "name": "Transparency",
          "description": "AI must be clear about its capabilities and limitations",
          "weight": 0.7,
          "enforcement_level": "strict",
          "violation_penalty": -0.6,
          "dgm_sandbox_required": false
        },
        {
          "id": "constitutional_compliance",
          "name": "Constitutional Compliance",
          "description": "All AI operations must comply with constitutional framework",
          "weight": 1.0,
          "enforcement_level": "strict",
          "violation_penalty": -1.0,
          "dgm_sandbox_required": true,
          "emergency_shutdown_trigger": true
        }
      ]
    }

---
# ==============================================================================
# templates/secret.yaml
# ==============================================================================

{{- if .Values.secrets.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "acgs-pgp.fullname" . }}-secrets
  labels:
    {{- include "acgs-pgp.labels" . | nindent 4 }}
  annotations:
    {{- include "acgs-pgp.constitutionalCompliance" . | nindent 4 }}
    {{- with .Values.secrets.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
data:
  {{- if not .Values.secrets.external.enabled }}
  DATABASE_URL: {{ printf "%s" (include "acgs-pgp.databaseUrl" .) | b64enc }}
  REDIS_URL: {{ printf "%s" (include "acgs-pgp.redisUrl" .) | b64enc }}
  JWT_SECRET_KEY: {{ .Values.secrets.values.jwtSecretKey | b64enc }}
  CONSTITUTIONAL_AI_KEY: {{ .Values.secrets.values.constitutionalAIKey | b64enc }}
  DGM_SANDBOX_KEY: {{ .Values.secrets.values.dgmSandboxKey | b64enc }}
  EMERGENCY_SHUTDOWN_KEY: {{ .Values.secrets.values.emergencyShutdownKey | b64enc }}
  {{- if .Values.postgresql.enabled }}
  POSTGRES_PASSWORD: {{ .Values.postgresql.auth.password | b64enc }}
  {{- end }}
  {{- if .Values.redis.enabled }}
  REDIS_PASSWORD: {{ .Values.redis.auth.password | b64enc }}
  {{- end }}
  {{- end }}
{{- end }}

---
# ==============================================================================
# templates/deployment-auth-service.yaml
# ==============================================================================

{{- if .Values.authService.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "acgs-pgp.fullname" . }}-auth-service
  labels:
    {{- include "acgs-pgp.labels" . | nindent 4 }}
    app.kubernetes.io/component: auth-service
  annotations:
    {{- include "acgs-pgp.constitutionalCompliance" . | nindent 4 }}
spec:
  replicas: {{ .Values.authService.replicaCount }}
  selector:
    matchLabels:
      {{- include "acgs-pgp.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: auth-service
  template:
    metadata:
      labels:
        {{- include "acgs-pgp.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: auth-service
      annotations:
        {{- include "acgs-pgp.constitutionalCompliance" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "acgs-pgp.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: auth-service
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "acgs-pgp.image" (dict "repository" .Values.authService.image.repository "tag" .Values.authService.image.tag "Values" .Values) }}
          imagePullPolicy: {{ .Values.authService.image.pullPolicy | default .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            {{- toYaml .Values.authService.env | nindent 12 }}
          envFrom:
            {{- toYaml .Values.authService.envFrom | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.authService.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.authService.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.authService.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: constitution
              mountPath: /app/constitution
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: {{ include "acgs-pgp.fullname" . }}-config
        - name: constitution
          configMap:
            name: {{ include "acgs-pgp.fullname" . }}-constitution
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}

---
# ==============================================================================
# templates/service-api-gateway.yaml
# ==============================================================================

{{- if .Values.apiGateway.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "acgs-lite.fullname" . }}-api-gateway
  labels:
    {{- include "acgs-lite.labels" . | nindent 4 }}
    app.kubernetes.io/component: api-gateway
  {{- with .Values.apiGateway.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.apiGateway.service.type }}
  ports:
    - port: {{ .Values.apiGateway.service.port }}
      targetPort: {{ .Values.apiGateway.service.targetPort }}
      protocol: TCP
      name: http
  selector:
    {{- include "acgs-lite.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: api-gateway
{{- end }}

---
# ==============================================================================
# templates/hpa.yaml - Horizontal Pod Autoscaler
# ==============================================================================

{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "acgs-lite.fullname" . }}-api-gateway-hpa
  labels:
    {{- include "acgs-lite.labels" . | nindent 4 }}
    app.kubernetes.io/component: api-gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "acgs-lite.fullname" . }}-api-gateway
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}

---
# ==============================================================================
# templates/pdb.yaml - Pod Disruption Budget
# ==============================================================================

{{- if .Values.podDisruptionBudget.enabled }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "acgs-lite.fullname" . }}-pdb
  labels:
    {{- include "acgs-lite.labels" . | nindent 4 }}
spec:
  {{- if .Values.podDisruptionBudget.minAvailable }}
  minAvailable: {{ .Values.podDisruptionBudget.minAvailable }}
  {{- end }}
  {{- if .Values.podDisruptionBudget.maxUnavailable }}
  maxUnavailable: {{ .Values.podDisruptionBudget.maxUnavailable }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "acgs-lite.selectorLabels" . | nindent 6 }}
{{- end }}

---
# ==============================================================================
# templates/networkpolicy.yaml
# ==============================================================================

{{- if .Values.networkPolicy.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "acgs-lite.fullname" . }}-netpol
  labels:
    {{- include "acgs-lite.labels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- include "acgs-lite.selectorLabels" . | nindent 6 }}
  policyTypes:
    {{- toYaml .Values.networkPolicy.policyTypes | nindent 4 }}
  {{- if .Values.networkPolicy.ingress }}
  ingress:
    {{- toYaml .Values.networkPolicy.ingress | nindent 4 }}
  {{- end }}
  {{- if .Values.networkPolicy.egress }}
  egress:
    {{- toYaml .Values.networkPolicy.egress | nindent 4 }}
  {{- end }}
{{- end }}

---
# ==============================================================================
# Installation Instructions
# ==============================================================================

# To install ACGS-PGP using Helm:

# 1. Add the repository (if published)
# helm repo add acgs-pgp https://charts.acgs-pgp.ai
# helm repo update

# 2. Install with custom values and constitutional AI configuration
# helm install acgs-pgp acgs-pgp/acgs-pgp \
#   --namespace acgs-pgp \
#   --create-namespace \
#   --values values-production.yaml \
#   --set secrets.values.jwtSecretKey=$JWT_SECRET_KEY \
#   --set secrets.values.constitutionalAIKey=$CONSTITUTIONAL_AI_KEY \
#   --set secrets.values.dgmSandboxKey=$DGM_SANDBOX_KEY \
#   --set secrets.values.emergencyShutdownKey=$EMERGENCY_SHUTDOWN_KEY

# 3. Upgrade existing installation with constitutional compliance
# helm upgrade acgs-pgp acgs-pgp/acgs-pgp \
#   --namespace acgs-pgp \
#   --values values-production.yaml \
#   --reuse-values

# 4. Emergency shutdown (Constitutional AI safety)
# kubectl patch deployment acgs-pgp-ac-service -n acgs-pgp -p '{"spec":{"replicas":0}}'
# kubectl patch deployment acgs-pgp-gs-service -n acgs-pgp -p '{"spec":{"replicas":0}}'

# 5. Uninstall
# helm uninstall acgs-pgp --namespace acgs-pgp

# 6. Install from local chart with DGM sandbox
# helm install acgs-pgp ./helm/acgs-pgp \
#   --namespace acgs-pgp \
#   --create-namespace \
#   --values ./helm/values-staging.yaml \
#   --set constitutionalAI.dgmSandbox.enabled=true

# 7. Validate constitutional compliance
# kubectl get pods -n acgs-pgp -l acgs.io/constitutional-ai=enabled
# kubectl logs -n acgs-pgp -l app.kubernetes.io/component=ac-service