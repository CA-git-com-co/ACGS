# ACGS-PGP Constitutional AI Governance System API Specifications

## Overview

This document provides OpenAPI 3.0 specifications for each of the seven microservices in the ACGS-PGP (AI Compliance Governance System - Policy Generation Platform) Constitutional AI Governance System. Each service operates independently with its own FastAPI application and endpoints.

## Service Architecture

The ACGS-PGP system consists of the following microservices:

- **auth-service** (Port 8000) - Authentication and JWT management
- **ac-service** (Port 8001) - Constitutional AI compliance validation  
- **integrity-service** (Port 8002) - Data integrity and cryptographic verification
- **fv-service** (Port 8003) - Formal verification and proof validation
- **gs-service** (Port 8004) - Governance synthesis and policy generation
- **pgc-service** (Port 8005) - Policy governance and compliance enforcement
- **ec-service** (Port 8006) - Evolutionary computation and optimization

Each service provides its own OpenAPI documentation at `http://localhost:{port}/docs`

---

# 1. Authentication Service API (Port 8000)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Authentication Service API
  description: |
    Authentication and authorization service for the ACGS-PGP Constitutional AI Governance System.
    
    This service provides:
    - JWT token authentication and management
    - User authentication and authorization
    - Constitutional AI access control
    - DGM sandbox security validation
    - Emergency access procedures
    
  version: 2.0.0
  contact:
    name: ACGS-PGP Team
    email: info@soln.ai
    url: https://github.com/CA-git-com-co/ACGS

servers:
  - url: http://localhost:8000
    description: Authentication Service
  - url: https://api.acgs-pgp.ai:8000
    description: Production Authentication Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username for authentication
        password:
          type: string
          format: password
          description: Password for authentication
        constitutional_compliance_required:
          type: boolean
          default: true
          description: Require constitutional AI compliance validation

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        token_type:
          type: string
          default: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
        constitutional_clearance_level:
          type: string
          enum: [basic, standard, elevated, emergency]
          description: Constitutional AI clearance level
        dgm_sandbox_access:
          type: boolean
          description: DGM sandbox access permission

    UserInfo:
      type: object
      properties:
        user_id:
          type: string
          description: Unique user identifier
        username:
          type: string
          description: Username
        roles:
          type: array
          items:
            type: string
          description: User roles and permissions
        constitutional_clearance:
          type: string
          description: Constitutional AI clearance level
        dgm_sandbox_enabled:
          type: boolean
          description: DGM sandbox access status

paths:
  /auth/login:
    post:
      summary: Authenticate user and get JWT token
      description: Authenticate user credentials and return JWT token with constitutional AI clearance
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed
        '403':
          description: Constitutional AI compliance violation

  /auth/refresh:
    post:
      summary: Refresh JWT token
      description: Refresh existing JWT token with constitutional compliance validation
      tags:
        - Authentication
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid or expired token

  /auth/user:
    get:
      summary: Get current user information
      description: Retrieve current authenticated user information and constitutional clearance
      tags:
        - Authentication
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout and invalidate token
      description: Logout user and invalidate JWT token
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  /health:
    get:
      summary: Health check endpoint
      description: Check service health and constitutional compliance status
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  constitutional_compliance:
                    type: boolean
                    example: true
                  dgm_sandbox_status:
                    type: string
                    example: operational
```

---

# 2. Constitutional AI Service API (Port 8001)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Constitutional AI Service API
  description: |
    Constitutional AI compliance validation service for the ACGS-PGP system.
    
    This service provides:
    - Constitutional compliance analysis and validation
    - DGM sandbox safety pattern implementation
    - Human review interface management
    - Emergency shutdown procedures
    - Constitutional violation detection and response
    
  version: 2.0.0
  contact:
    name: ACGS-PGP Team
    email: info@soln.ai

servers:
  - url: http://localhost:8001
    description: Constitutional AI Service
  - url: https://api.acgs-pgp.ai:8001
    description: Production Constitutional AI Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ConstitutionalAnalysisRequest:
      type: object
      required:
        - text
        - principles
      properties:
        text:
          type: string
          description: Text content to analyze for constitutional compliance
        principles:
          type: array
          items:
            type: string
            enum: [harmlessness, truthfulness, privacy, fairness, transparency, constitutional_compliance]
          description: Constitutional principles to validate against
        analysis_type:
          type: string
          enum: [basic, comprehensive, deep]
          default: comprehensive
          description: Depth of constitutional analysis
        dgm_sandbox_enabled:
          type: boolean
          default: true
          description: Enable DGM sandbox for analysis
        human_review_threshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.8
          description: Threshold for requiring human review

    ConstitutionalAnalysisResponse:
      type: object
      properties:
        analysis_id:
          type: string
          description: Unique analysis identifier
        compliant:
          type: boolean
          description: Overall constitutional compliance status
        compliance_score:
          type: number
          minimum: 0
          maximum: 1
          description: Constitutional compliance score
        violations:
          type: array
          items:
            type: object
            properties:
              principle:
                type: string
                description: Violated constitutional principle
              severity:
                type: string
                enum: [low, moderate, high, critical]
              description:
                type: string
                description: Description of the violation
              correction_suggested:
                type: string
                description: Suggested correction
          description: List of constitutional violations found
        corrections_applied:
          type: boolean
          description: Whether automatic corrections were applied
        human_review_required:
          type: boolean
          description: Whether human review is required
        dgm_sandbox_status:
          type: string
          enum: [passed, failed, pending, error]
          description: DGM sandbox validation status
        emergency_shutdown_triggered:
          type: boolean
          default: false
          description: Whether emergency shutdown was triggered

paths:
  /api/v1/analyze:
    post:
      summary: Analyze content for constitutional compliance
      description: Perform constitutional AI compliance analysis on provided content
      tags:
        - Constitutional Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConstitutionalAnalysisRequest'
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstitutionalAnalysisResponse'
        '400':
          description: Invalid request parameters
        '403':
          description: Constitutional violation detected
        '500':
          description: Analysis failed

  /api/v1/constitutional-council/amendments:
    post:
      summary: Validate constitutional amendment
      description: Validate proposed constitutional amendment for compliance
      tags:
        - Constitutional Council
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amendment_text:
                  type: string
                  description: Proposed amendment text
                justification:
                  type: string
                  description: Justification for the amendment
                impact_assessment:
                  type: object
                  description: Impact assessment of the amendment
      responses:
        '200':
          description: Amendment validated
        '403':
          description: Amendment violates constitutional principles

  /api/v1/emergency/shutdown:
    post:
      summary: Trigger emergency shutdown
      description: Trigger emergency shutdown for critical constitutional violations
      tags:
        - Emergency Procedures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
                - severity
              properties:
                reason:
                  type: string
                  description: Reason for emergency shutdown
                severity:
                  type: string
                  enum: [high, critical]
                  description: Severity level of the violation
                auto_trigger:
                  type: boolean
                  default: true
                  description: Whether to auto-trigger shutdown
                rto_minutes:
                  type: integer
                  default: 30
                  description: Recovery time objective in minutes
      responses:
        '200':
          description: Emergency shutdown initiated
        '403':
          description: Insufficient permissions for emergency shutdown

  /health:
    get:
      summary: Health check endpoint
      description: Check constitutional AI service health
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  constitutional_framework_loaded:
                    type: boolean
                    example: true
                  dgm_sandbox_operational:
                    type: boolean
                    example: true
```

---

# 3. Integrity Service API (Port 8002)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Integrity Service API
  description: |
    Data integrity and cryptographic verification service for the ACGS-PGP system.

    This service provides:
    - Cryptographic hash validation
    - Digital signature verification
    - Data integrity monitoring
    - Constitutional compliance integrity checks

  version: 2.0.0

servers:
  - url: http://localhost:8002
    description: Integrity Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    IntegrityCheckRequest:
      type: object
      required:
        - data
        - hash_algorithm
      properties:
        data:
          type: string
          description: Data to verify integrity
        hash_algorithm:
          type: string
          enum: [sha256, sha512, blake2b]
          default: sha256
        expected_hash:
          type: string
          description: Expected hash value
        signature:
          type: string
          description: Digital signature to verify

    IntegrityCheckResponse:
      type: object
      properties:
        integrity_valid:
          type: boolean
          description: Whether data integrity is valid
        computed_hash:
          type: string
          description: Computed hash value
        signature_valid:
          type: boolean
          description: Whether digital signature is valid
        constitutional_compliance:
          type: boolean
          description: Constitutional compliance status

paths:
  /api/v1/verify:
    post:
      summary: Verify data integrity
      description: Verify cryptographic integrity of provided data
      tags:
        - Integrity Verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrityCheckRequest'
      responses:
        '200':
          description: Integrity verification completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrityCheckResponse'

  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
```

---

# 4. Formal Verification Service API (Port 8003)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Formal Verification Service API
  description: |
    Formal verification and proof validation service for the ACGS-PGP system.

    This service provides:
    - Mathematical proof validation
    - Logical reasoning verification
    - Theorem proving capabilities
    - Constitutional logic validation

  version: 2.0.0

servers:
  - url: http://localhost:8003
    description: Formal Verification Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ProofValidationRequest:
      type: object
      required:
        - proof_statement
        - proof_method
      properties:
        proof_statement:
          type: string
          description: Mathematical or logical statement to prove
        proof_method:
          type: string
          enum: [natural_deduction, resolution, tableau, model_checking]
          description: Proof method to use
        axioms:
          type: array
          items:
            type: string
          description: Axioms to use in proof
        constitutional_constraints:
          type: boolean
          default: true
          description: Apply constitutional constraints to proof

    ProofValidationResponse:
      type: object
      properties:
        proof_valid:
          type: boolean
          description: Whether the proof is valid
        proof_steps:
          type: array
          items:
            type: object
            properties:
              step_number:
                type: integer
              rule_applied:
                type: string
              statement:
                type: string
          description: Detailed proof steps
        constitutional_compliance:
          type: boolean
          description: Constitutional compliance of the proof

paths:
  /api/v1/verify-proof:
    post:
      summary: Verify mathematical proof
      description: Verify the validity of a mathematical or logical proof
      tags:
        - Proof Verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProofValidationRequest'
      responses:
        '200':
          description: Proof verification completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProofValidationResponse'

  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
```

---

# 5. Governance Synthesis Service API (Port 8004)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Governance Synthesis Service API
  description: |
    Governance synthesis and policy generation service for the ACGS-PGP system.

    This service provides:
    - Multi-model consensus policy synthesis
    - Constitutional compliance validation
    - Risk assessment and mitigation
    - Governance workflow orchestration

  version: 2.0.0

servers:
  - url: http://localhost:8004
    description: Governance Synthesis Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    PolicySynthesisRequest:
      type: object
      required:
        - domain
        - requirements
      properties:
        domain:
          type: string
          description: Policy domain (e.g., constitutional_ai, data_privacy)
        requirements:
          type: array
          items:
            type: string
          description: Policy requirements and constraints
        multi_model_consensus:
          type: boolean
          default: true
          description: Use multi-model consensus for synthesis
        constitutional_compliance:
          type: boolean
          default: true
          description: Ensure constitutional compliance
        risk_strategy:
          type: string
          enum: [conservative, balanced, aggressive, four-tier]
          default: four-tier
          description: Risk assessment strategy

    PolicySynthesisResponse:
      type: object
      properties:
        synthesis_id:
          type: string
          description: Unique synthesis identifier
        synthesized_policy:
          type: object
          description: Generated policy document
        consensus_score:
          type: number
          minimum: 0
          maximum: 1
          description: Multi-model consensus score
        constitutional_compliance_score:
          type: number
          minimum: 0
          maximum: 1
          description: Constitutional compliance score
        risk_assessment:
          type: object
          properties:
            risk_level:
              type: string
              enum: [low, moderate, high, critical]
            mitigation_strategies:
              type: array
              items:
                type: string
          description: Risk assessment results

paths:
  /api/v1/synthesize/policy:
    post:
      summary: Synthesize governance policy
      description: Generate governance policy using multi-model consensus
      tags:
        - Policy Synthesis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicySynthesisRequest'
      responses:
        '200':
          description: Policy synthesis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicySynthesisResponse'

  /api/v1/synthesize/validate/{synthesis_id}:
    get:
      summary: Validate synthesis quality
      description: Validate the quality and constitutional compliance of synthesis
      tags:
        - Policy Validation
      parameters:
        - name: synthesis_id
          in: path
          required: true
          schema:
            type: string
          description: Synthesis identifier
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  validation_status:
                    type: string
                    enum: [passed, failed, pending]
                  quality_score:
                    type: number
                  constitutional_compliance:
                    type: boolean

  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
```

---

# 6. Policy Governance Service API (Port 8005)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Policy Governance Service API
  description: |
    Policy governance and compliance enforcement service for the ACGS-PGP system.

    This service provides:
    - Two-speed governance (fast-lane/slow-lane) workflows
    - Policy enforcement and compliance monitoring
    - Constitutional policy validation
    - Governance workflow management

  version: 2.0.0

servers:
  - url: http://localhost:8005
    description: Policy Governance Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    GovernanceRequest:
      type: object
      required:
        - request_type
        - content
      properties:
        request_type:
          type: string
          enum: [policy_approval, compliance_check, constitutional_review]
          description: Type of governance request
        content:
          type: object
          description: Request content for governance review
        approval_lane:
          type: string
          enum: [fast, slow]
          description: Approval workflow lane
        risk_level:
          type: string
          enum: [low, moderate, high, critical]
          description: Risk level assessment
        constitutional_compliance_required:
          type: boolean
          default: true
          description: Require constitutional compliance validation

    GovernanceResponse:
      type: object
      properties:
        request_id:
          type: string
          description: Unique request identifier
        approval_status:
          type: string
          enum: [approved, rejected, pending, requires_review]
          description: Approval status
        approval_lane:
          type: string
          description: Processing lane used
        processing_time:
          type: integer
          description: Processing time in seconds
        constitutional_compliance:
          type: boolean
          description: Constitutional compliance status
        human_review_required:
          type: boolean
          description: Whether human review is required
        next_steps:
          type: array
          items:
            type: string
          description: Required next steps

paths:
  /api/v1/governance/fast-lane:
    post:
      summary: Submit fast-lane governance request
      description: Submit request for fast-lane approval (low-risk changes)
      tags:
        - Fast-Lane Governance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernanceRequest'
      responses:
        '200':
          description: Fast-lane request processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernanceResponse'

  /api/v1/governance/slow-lane:
    post:
      summary: Submit slow-lane governance request
      description: Submit request for slow-lane approval (high-risk changes)
      tags:
        - Slow-Lane Governance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernanceRequest'
      responses:
        '200':
          description: Slow-lane request processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernanceResponse'

  /api/v1/governance/status/{request_id}:
    get:
      summary: Get governance request status
      description: Retrieve status of governance request
      tags:
        - Governance Status
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
          description: Governance request identifier
      responses:
        '200':
          description: Request status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernanceResponse'

  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
```

---

# 7. Evolutionary Computation Service API (Port 8006)

```yaml
openapi: 3.0.3
info:
  title: ACGS-PGP Evolutionary Computation Service API
  description: |
    Evolutionary computation and optimization service for the ACGS-PGP system.

    This service provides:
    - Genetic algorithm optimization
    - Constitutional evolution strategies
    - Performance optimization
    - Adaptive governance mechanisms

  version: 2.0.0

servers:
  - url: http://localhost:8006
    description: Evolutionary Computation Service

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    EvolutionRequest:
      type: object
      required:
        - optimization_target
        - parameters
      properties:
        optimization_target:
          type: string
          description: Target for optimization (e.g., policy_effectiveness, constitutional_compliance)
        parameters:
          type: object
          description: Parameters to optimize
        population_size:
          type: integer
          default: 50
          description: Population size for genetic algorithm
        generations:
          type: integer
          default: 100
          description: Number of generations to evolve
        constitutional_constraints:
          type: boolean
          default: true
          description: Apply constitutional constraints during evolution
        mutation_rate:
          type: number
          minimum: 0
          maximum: 1
          default: 0.1
          description: Mutation rate for genetic algorithm

    EvolutionResponse:
      type: object
      properties:
        evolution_id:
          type: string
          description: Unique evolution run identifier
        optimized_parameters:
          type: object
          description: Optimized parameters
        fitness_score:
          type: number
          description: Final fitness score
        constitutional_compliance_score:
          type: number
          description: Constitutional compliance score
        generations_completed:
          type: integer
          description: Number of generations completed
        convergence_achieved:
          type: boolean
          description: Whether convergence was achieved

paths:
  /api/v1/evolve:
    post:
      summary: Start evolutionary optimization
      description: Start evolutionary computation optimization process
      tags:
        - Evolutionary Optimization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvolutionRequest'
      responses:
        '200':
          description: Evolution process started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvolutionResponse'

  /api/v1/evolve/status/{evolution_id}:
    get:
      summary: Get evolution status
      description: Get status of evolutionary computation process
      tags:
        - Evolution Status
      parameters:
        - name: evolution_id
          in: path
          required: true
          schema:
            type: string
          description: Evolution process identifier
      responses:
        '200':
          description: Evolution status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [running, completed, failed, stopped]
                  current_generation:
                    type: integer
                  best_fitness:
                    type: number
                  constitutional_compliance:
                    type: boolean

  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
```

---

# 8. DGM Sandbox Safety Patterns API

## 8.1 DGM Sandbox Management (AC Service Extension)

```yaml
# Additional endpoints for AC Service (Port 8001) - DGM Sandbox functionality

paths:
  /api/v1/dgm-sandbox/create:
    post:
      summary: Create DGM sandbox environment
      description: Create isolated DGM sandbox environment for constitutional AI testing
      tags:
        - DGM Sandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isolation_level
              properties:
                isolation_level:
                  type: string
                  enum: [strict, moderate, basic]
                  description: Sandbox isolation level
                constitutional_constraints:
                  type: boolean
                  default: true
                  description: Apply constitutional constraints
                human_review_enabled:
                  type: boolean
                  default: true
                  description: Enable human review interface
                emergency_shutdown_enabled:
                  type: boolean
                  default: true
                  description: Enable emergency shutdown capability
                max_execution_time:
                  type: integer
                  default: 300
                  description: Maximum execution time in seconds
                resource_limits:
                  type: object
                  properties:
                    cpu:
                      type: string
                      default: "500m"
                    memory:
                      type: string
                      default: "1Gi"
                    network:
                      type: string
                      enum: [restricted, isolated, none]
                      default: "restricted"
      responses:
        '200':
          description: Sandbox created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sandbox_id:
                    type: string
                    description: Unique sandbox identifier
                  isolation_level:
                    type: string
                    description: Applied isolation level
                  constitutional_monitoring:
                    type: boolean
                    description: Constitutional monitoring status
                  emergency_shutdown_ready:
                    type: boolean
                    description: Emergency shutdown readiness

  /api/v1/dgm-sandbox/execute:
    post:
      summary: Execute code in DGM sandbox
      description: Execute code in DGM sandbox with constitutional monitoring
      tags:
        - DGM Sandbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sandbox_id
                - code
              properties:
                sandbox_id:
                  type: string
                  description: Sandbox identifier
                code:
                  type: string
                  description: Code to execute in sandbox
                constitutional_monitoring:
                  type: boolean
                  default: true
                  description: Enable constitutional monitoring
                violation_threshold:
                  type: number
                  minimum: 0
                  maximum: 1
                  default: 0.1
                  description: Constitutional violation threshold
                auto_shutdown_on_violation:
                  type: boolean
                  default: true
                  description: Auto-shutdown on constitutional violation
      responses:
        '200':
          description: Code executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  execution_id:
                    type: string
                    description: Execution identifier
                  result:
                    type: string
                    description: Execution result
                  constitutional_compliance:
                    type: boolean
                    description: Constitutional compliance status
                  violations_detected:
                    type: array
                    items:
                      type: string
                    description: Constitutional violations detected
                  emergency_shutdown_triggered:
                    type: boolean
                    description: Whether emergency shutdown was triggered

  /api/v1/dgm-sandbox/{sandbox_id}/health:
    get:
      summary: Monitor sandbox health
      description: Monitor sandbox health and constitutional compliance
      tags:
        - DGM Sandbox
      parameters:
        - name: sandbox_id
          in: path
          required: true
          schema:
            type: string
          description: Sandbox identifier
      responses:
        '200':
          description: Sandbox health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  sandbox_status:
                    type: string
                    enum: [healthy, degraded, failed, shutdown]
                  constitutional_compliance:
                    type: boolean
                  resource_usage:
                    type: object
                    properties:
                      cpu_usage:
                        type: number
                      memory_usage:
                        type: number
                      network_activity:
                        type: boolean
                  violations_count:
                    type: integer
                  last_health_check:
                    type: string
                    format: date-time
```

## 8.2 Human Review Interface API

```yaml
# Human Review Interface endpoints (AC Service Extension)

paths:
  /api/v1/human-review/submit:
    post:
      summary: Submit content for human review
      description: Submit content for human constitutional compliance review
      tags:
        - Human Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: object
                  description: Content requiring human review
                priority:
                  type: string
                  enum: [low, normal, high, critical]
                  default: normal
                  description: Review priority level
                review_type:
                  type: string
                  enum: [constitutional_compliance, policy_validation, emergency_response]
                  default: constitutional_compliance
                  description: Type of review required
                auto_escalation:
                  type: boolean
                  default: true
                  description: Enable automatic escalation
                sla_hours:
                  type: integer
                  description: SLA for review completion in hours
      responses:
        '200':
          description: Review request submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  review_id:
                    type: string
                    description: Unique review identifier
                  priority:
                    type: string
                    description: Assigned priority
                  estimated_completion:
                    type: string
                    format: date-time
                    description: Estimated completion time
                  reviewer_assigned:
                    type: boolean
                    description: Whether reviewer is assigned

  /api/v1/human-review/{review_id}/status:
    get:
      summary: Get human review status
      description: Get status of human review request
      tags:
        - Human Review
      parameters:
        - name: review_id
          in: path
          required: true
          schema:
            type: string
          description: Review identifier
      responses:
        '200':
          description: Review status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  review_status:
                    type: string
                    enum: [pending, in_progress, completed, escalated]
                  reviewer_id:
                    type: string
                    description: Assigned reviewer identifier
                  completion_percentage:
                    type: integer
                    minimum: 0
                    maximum: 100
                  constitutional_decision:
                    type: string
                    enum: [approved, rejected, requires_modification]
                  review_comments:
                    type: string
                    description: Reviewer comments
                  escalation_required:
                    type: boolean
                    description: Whether escalation is required
```

## 8.3 Constitutional Compliance Monitoring API

```yaml
# Constitutional Compliance Monitoring endpoints

paths:
  /api/v1/metrics/constitutional:
    get:
      summary: Get constitutional compliance metrics
      description: Retrieve constitutional AI compliance metrics and monitoring data
      tags:
        - Constitutional Monitoring
      parameters:
        - name: time_range
          in: query
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d]
            default: 24h
          description: Time range for metrics
        - name: service_filter
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filter by specific services
      responses:
        '200':
          description: Constitutional compliance metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_compliance_score:
                    type: number
                    minimum: 0
                    maximum: 1
                    description: Overall constitutional compliance score
                  violations_detected:
                    type: integer
                    description: Number of violations detected
                  emergency_shutdowns:
                    type: integer
                    description: Number of emergency shutdowns triggered
                  human_reviews_pending:
                    type: integer
                    description: Number of pending human reviews
                  dgm_sandbox_health:
                    type: object
                    properties:
                      active_sandboxes:
                        type: integer
                      healthy_sandboxes:
                        type: integer
                      failed_sandboxes:
                        type: integer
                  service_compliance:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        compliance_score:
                          type: number
                        violations_count:
                          type: integer
                        last_check:
                          type: string
                          format: date-time

  /api/v1/alerts/constitutional:
    get:
      summary: Get constitutional compliance alerts
      description: Retrieve active constitutional compliance alerts
      tags:
        - Constitutional Alerts
      responses:
        '200':
          description: Constitutional compliance alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  active_alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        alert_id:
                          type: string
                        severity:
                          type: string
                          enum: [low, moderate, high, critical]
                        alert_type:
                          type: string
                          enum: [violation, degradation, failure, emergency]
                        service:
                          type: string
                        description:
                          type: string
                        timestamp:
                          type: string
                          format: date-time
                        auto_resolution_attempted:
                          type: boolean
                        human_intervention_required:
                          type: boolean
```

## 9. Circuit Breaker and Emergency Response API

```yaml
# Circuit Breaker and Emergency Response endpoints

paths:
  /api/v1/circuit-breaker/status:
    get:
      summary: Get circuit breaker status
      description: Get status of all circuit breakers in the system
      tags:
        - Circuit Breaker
      responses:
        '200':
          description: Circuit breaker status
          content:
            application/json:
              schema:
                type: object
                properties:
                  circuit_breakers:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        state:
                          type: string
                          enum: [closed, open, half-open]
                        failure_count:
                          type: integer
                        failure_threshold:
                          type: integer
                        recovery_timeout:
                          type: integer
                        last_failure_time:
                          type: string
                          format: date-time
                        constitutional_monitoring:
                          type: boolean

  /api/v1/emergency/readiness:
    get:
      summary: Validate emergency shutdown readiness
      description: Validate system readiness for emergency shutdown procedures
      tags:
        - Emergency Response
      responses:
        '200':
          description: Emergency readiness status
          content:
            application/json:
              schema:
                type: object
                properties:
                  emergency_ready:
                    type: boolean
                    description: Overall emergency readiness status
                  rto_capability:
                    type: integer
                    description: Recovery time objective capability in minutes
                  services_ready:
                    type: object
                    additionalProperties:
                      type: boolean
                    description: Per-service emergency readiness
                  constitutional_safeguards:
                    type: boolean
                    description: Constitutional safeguards operational status
                  human_notification_ready:
                    type: boolean
                    description: Human notification system readiness
```

This comprehensive API specification document provides complete OpenAPI 3.0 documentation for all seven ACGS-PGP services, including constitutional AI compliance validation, DGM sandbox safety patterns, human review interfaces, and emergency response procedures. Each service operates independently with its own FastAPI application, reflecting the actual microservices architecture found in the codebase.
